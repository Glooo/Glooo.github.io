<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>为git操作起别名的方法 &amp; git fetch</title>
    <url>/git/git-alias/</url>
    <content><![CDATA[<h1 id="起别名的原因"><a href="#起别名的原因" class="headerlink" title="起别名的原因"></a>起别名的原因</h1><p>如果有一定 git 的基础，<br>就知道通常 git 操作为<code>git status</code>、<code>git commit -m &#39;commit&#39;</code>等。<br>比较繁琐，<br>如果想简化写法，<br>比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git st // 等价于git status</span><br><span class="line"></span><br><span class="line">git commit -m &apos;&apos; // 等价于git ci -m &apos;&apos;</span><br><span class="line"></span><br><span class="line">git checkout master // 等价于git co master</span><br><span class="line"></span><br><span class="line">and so on ...</span><br></pre></td></tr></table></figure>

<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global alias.别名 原始命令</span><br></pre></td></tr></table></figure>

<p>命令行中设置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global alias.st status</span><br><span class="line"></span><br><span class="line">git config --global alias.co checkout</span><br><span class="line"></span><br><span class="line">git config --global alias.ci commit</span><br></pre></td></tr></table></figure>

<p>因为设置级别为<code>global</code>，即用户级别，windows 下 git 会将别名写入你<code>C盘/用户/&lt;你的用户名下&gt;/</code>的<code>.gitconfig</code>文件中，如果不加 global 条件，则默认写入你仓库的 <code>config</code> 中，只针对当前仓库有效。当然也可以手动在配置文件中按照格式要求写入别名。</p>
<h1 id="git-fetch-与-git-pull-的区别"><a href="#git-fetch-与-git-pull-的区别" class="headerlink" title="git fetch 与 git pull 的区别"></a>git fetch 与 git pull 的区别</h1><p>git fetch 拉取远程分支，不合并</p>
<p>git pull = git fetch + git merge<br>拉取远程分支，更新本地仓库，直接合并到工作区。</p>
<h1 id="git-cherry-pick-commitId-挑拣分支提交合并"><a href="#git-cherry-pick-commitId-挑拣分支提交合并" class="headerlink" title="git cherry-pick commitId 挑拣分支提交合并"></a>git cherry-pick commitId 挑拣分支提交合并</h1>]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Typescript学习</title>
    <url>/typescript/typescript/</url>
    <content><![CDATA[<h1 id="typescript"><a href="#typescript" class="headerlink" title="typescript"></a>typescript</h1><p>typescript是Javascript的一个超集，主要提供了类型系统和ES6的支持，由微软开发。<br>比JS多了接口、泛型、类、枚举类型等概念。<br>安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g typescript</span><br></pre></td></tr></table></figure>

<p>以上命令会在全局环境下安装 <code>tsc</code> 命令，安装完成之后，我们就可以在任何地方执行 <code>tsc</code> 命令了。<br><font color="red">编译</font>一个 TypeScript 文件很简单：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tsc hello.ts</span><br></pre></td></tr></table></figure>

<p>我们约定使用 TypeScript 编写的文件以 <code>.ts</code> 为后缀，用 TypeScript 编写 React 时，以 <code>.tsx</code> 为后缀。</p>
<h1 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h1><p>TypeScript 最大的优势便是增强了编辑器和 IDE 的功能，包括代码补全、接口提示、跳转到定义、重构等。</p>
<p>推荐使用 <a href="https://code.visualstudio.com/" target="_blank" rel="noopener"><strong>Visual Studio Code</strong></a></p>
<p>它是一款开源，跨终端的轻量级编辑器，内置了 TypeScript 支持。另外，它本身也由 typescript 编写。</p>
<a id="more"></a>
<h1 id="Hello-Typescript"><a href="#Hello-Typescript" class="headerlink" title="Hello Typescript"></a>Hello Typescript</h1><p>TypeScript 中，使用 <code>:</code> 指定变量的类型，<code>:</code> 的前后有没有空格都可以。</p>
<p>TypeScript 只会进行静态检查，如果发现有错误，编译的时候就会报错。</p>
<p>TypeScript 编译的时候即使报错了，还是会生成编译结果，我们仍然可以使用这个编译之后的文件。</p>
<p>如果要在报错的时候终止 js 文件的生成，可以在 tsconfig.json 中配置 noEmitOnError 即可。关于 tsconfig.json，请参阅<a href="https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/tsconfig.json.html" target="_blank" rel="noopener">官方手册（中文版）</a>。</p>
<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><ul>
<li>原始数据类型</li>
<li>任意值</li>
<li>类型推论</li>
<li>联合类型</li>
<li>对象的类型——接口</li>
<li>数组的类型</li>
<li>函数的类型</li>
<li>类型断言</li>
<li>声明文件</li>
<li>内置对象</li>
</ul>
<h2 id="原始数据类型"><a href="#原始数据类型" class="headerlink" title="原始数据类型"></a>原始数据类型</h2><p>JavaScript 的类型分为两种：<strong>原始数据类型</strong>（Primitive data types）和对象类型（Object types）。<br>原始数据类型包括：<strong>布尔值</strong>、<strong>数值</strong>、<strong>字符串</strong>、<strong>null</strong>、<strong>undefined</strong> 以及 ES6 中的新类型 <strong>Symbol</strong></p>
<h3 id="布尔"><a href="#布尔" class="headerlink" title="布尔"></a>布尔</h3><h3 id="数值"><a href="#数值" class="headerlink" title="数值"></a>数值</h3><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h3 id="空值"><a href="#空值" class="headerlink" title="空值"></a>空值</h3><p>JavaScript 没有空值（Void）的概念，在 TypeScript 中，可以用 void 表示没有任何返回值的函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">alertName</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">    alert(<span class="string">'My name is Tom'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>声明一个 void 类型的变量没有什么用，因为你只能将它赋值为 <strong>undefined</strong> 和 <strong>null</strong> ：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> unusable: <span class="keyword">void</span> = <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure>

<h3 id="Null和Undefined"><a href="#Null和Undefined" class="headerlink" title="Null和Undefined"></a>Null和Undefined</h3><p>在 TypeScript 中，可以使用 <strong>null</strong> 和 <strong>undefined</strong> 来定义这两个原始数据类型：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> u: <span class="literal">undefined</span> = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> n: <span class="literal">null</span> = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>

<p>与 void 的区别是，undefined 和 null 是所有类型的子类型。也就是说 undefined 类型的变量，可以赋值给 number 类型的变量：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这样不会报错</span></span><br><span class="line"><span class="keyword">let</span> num: number = <span class="literal">undefined</span>;</span><br><span class="line"><span class="comment">// 这样也不会报错</span></span><br><span class="line"><span class="keyword">let</span> u: <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> num: number = u;</span><br></pre></td></tr></table></figure>

<p>而 void 类型的变量不能赋值给 number 类型的变量：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> u: <span class="keyword">void</span>;</span><br><span class="line"><span class="keyword">let</span> num: number = u;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Type 'void' is not assignable to type 'number'.</span></span><br></pre></td></tr></table></figure>

<h2 id="任意值"><a href="#任意值" class="headerlink" title="任意值"></a>任意值</h2><p>任意值（Any）用来表示允许赋值为<strong>任意类型</strong>。</p>
<h3 id="什么是任意值类型"><a href="#什么是任意值类型" class="headerlink" title="什么是任意值类型?"></a>什么是任意值类型?</h3><p>如果是一个普通类型，在赋值过程中改变类型是不被允许的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myFavoriteNumber: string = <span class="string">'seven'</span>;</span><br><span class="line">myFavoriteNumber = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts(2,1): error TS2322: Type 'number' is not assignable to type 'string'.</span></span><br></pre></td></tr></table></figure>

<p>但如果是 any 类型，则允许被赋值为任意类型。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myFavoriteNumber: any = <span class="string">'seven'</span>;</span><br><span class="line">myFavoriteNumber = <span class="number">7</span>;</span><br></pre></td></tr></table></figure>

<h3 id="任意值的属性和方法"><a href="#任意值的属性和方法" class="headerlink" title="任意值的属性和方法"></a>任意值的属性和方法</h3><p>在任意值上访问任何属性都是允许的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> anyThing: any = <span class="string">'hello'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(anyThing.myName);</span><br><span class="line"><span class="built_in">console</span>.log(anyThing.myName.firstName);</span><br></pre></td></tr></table></figure>

<p>也允许调用任何方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> anyThing: any = <span class="string">'Tom'</span>;</span><br><span class="line">anyThing.setName(<span class="string">'Jerry'</span>);</span><br><span class="line">anyThing.setName(<span class="string">'Jerry'</span>).sayHello();</span><br><span class="line">anyThing.myName.setFirstName(<span class="string">'Cat'</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>可以认为，声明一个变量为任意值之后，对它的任何操作，返回值的类型都是<strong>任意值</strong>。</p>
</blockquote>
<h3 id="未声明类型的变量"><a href="#未声明类型的变量" class="headerlink" title="未声明类型的变量"></a>未声明类型的变量</h3><p>变量如果在声明的时候，未指定其类型，那么它会被识别为任意值类型：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注意：下面声明却未赋值的时候，才会被默认指定为任意类型；</span></span><br><span class="line"><span class="comment">// 如果声明后指定了值但未指定类型，ts就会自动进行类型推论，此时就不是任意类型(any)了。</span></span><br><span class="line"><span class="keyword">let</span> something; </span><br><span class="line">something = <span class="string">'seven'</span>;</span><br><span class="line">something = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">something.setName(<span class="string">'Tom'</span>);</span><br></pre></td></tr></table></figure>

<p>等价于</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> something: any;</span><br><span class="line">something = <span class="string">'seven'</span>;</span><br><span class="line">something = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">something.setName(<span class="string">'Tom'</span>);</span><br></pre></td></tr></table></figure>

<h2 id="类型推论"><a href="#类型推论" class="headerlink" title="类型推论"></a>类型推论</h2><p>如果没有明确的指定类型，那么 TypeScript 会依照类型推论（Type Inference）的规则推断出一个类型。</p>
<h3 id="什么是类型推论"><a href="#什么是类型推论" class="headerlink" title="什么是类型推论"></a>什么是类型推论</h3><p>以下代码虽然没有指定类型，但是会在编译的时候报错：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myFavoriteNumber = <span class="string">'seven'</span>; <span class="comment">// 声明并赋值，则自动识别类型为string，不是any类型</span></span><br><span class="line">myFavoriteNumber = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts(2,1): error TS2322: Type 'number' is not assignable to type 'string'.</span></span><br></pre></td></tr></table></figure>

<p>事实上，它等价于：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myFavoriteNumber: string = <span class="string">'seven'</span>;</span><br><span class="line">myFavoriteNumber = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts(2,1): error TS2322: Type 'number' is not assignable to type 'string'.</span></span><br></pre></td></tr></table></figure>

<p>TypeScript 会在没有明确的指定类型的时候推测出一个类型，这就是类型推论。</p>
<p><strong>如果定义的时候没有赋值，不管之后有没有赋值，都会被推断成 <code>any</code> 类型而完全不被类型检查：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myFavoriteNumber;</span><br><span class="line">myFavoriteNumber = <span class="string">'seven'</span>;</span><br><span class="line">myFavoriteNumber = <span class="number">7</span>;</span><br></pre></td></tr></table></figure>

<h2 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h2><p>联合类型（Union Types）表示取值可以为多种类型中的一种。</p>
<h2 id="对象的类型-接口"><a href="#对象的类型-接口" class="headerlink" title="对象的类型-接口"></a>对象的类型-接口</h2><h2 id="数组的类型"><a href="#数组的类型" class="headerlink" title="数组的类型"></a>数组的类型</h2><p>在 TypeScript 中，数组类型有多种定义方式，比较灵活。</p>
<h3 id="（常用）「类型-方括号」表示法"><a href="#（常用）「类型-方括号」表示法" class="headerlink" title="（常用）「类型 + 方括号」表示法"></a>（常用）「类型 + 方括号」表示法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fibonacci: number[] = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>];</span><br></pre></td></tr></table></figure>

<p>数组的项中不允许出现其他的类型：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fibonacci: number[] = [<span class="number">1</span>, <span class="string">'1'</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Type 'string' is not assignable to type 'number'.</span></span><br></pre></td></tr></table></figure>

<p>数组的一些方法的参数也会根据数组在定义时约定的类型进行限制：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fibonacci: number[] = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>];</span><br><span class="line">fibonacci.push(<span class="string">'8'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Argument of type '"8"' is not assignable to parameter of type 'number'.</span></span><br></pre></td></tr></table></figure>

<p>上例中，<code>push</code> 方法只允许传入 <code>number</code> 类型的参数，但是却传了一个 <code>string</code> 类型的参数，所以报错了。这里 ‘8’ 是一个字符串字面量类型，会在后续章节中详细介绍。</p>
<h3 id="数组泛型表示法：「Array」"><a href="#数组泛型表示法：「Array」" class="headerlink" title="数组泛型表示法：「Array」"></a>数组泛型表示法：「Array<elemtype>」</elemtype></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fibonacci: <span class="built_in">Array</span>&lt;number&gt; = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>];</span><br></pre></td></tr></table></figure>

<h3 id="用接口表示数组"><a href="#用接口表示数组" class="headerlink" title="用接口表示数组"></a>用接口表示数组</h3><p>接口也可以用来描述数组：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface NumberArray &#123;</span><br><span class="line">    [index: number]: number;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> fibonacci: NumberArray = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>];</span><br></pre></td></tr></table></figure>

<p>上面的NumberArray 表示：只要索引的类型是数字时，那么值的类型必须是数字。</p>
<blockquote>
<p>虽然接口也可以用来描述数组，但是我们一般不会这么做，因为这种方式比前两种方式复杂多了。<br>不过有一种情况例外，那就是它常用来表示类数组。</p>
</blockquote>
<h3 id="类数组"><a href="#类数组" class="headerlink" title="类数组"></a>类数组</h3><p>类数组（Array-like Object）不是数组类型，比如 arguments对象：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> args: number[] = <span class="built_in">arguments</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Type 'IArguments' is missing the following properties from type 'number[]': pop, push, concat, join, and 24 more.</span></span><br></pre></td></tr></table></figure>

<p>上例中，arguments 实际上是一个类数组，不能用普通的数组的方式来描述，而应该用接口：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> args: &#123;</span><br><span class="line">    [index: number]: number;</span><br><span class="line">    length: number;</span><br><span class="line">    callee: <span class="built_in">Function</span>;</span><br><span class="line">  &#125; = <span class="built_in">arguments</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个例子中，我们除了约束当索引的类型是数字时，值的类型必须是数字之外，也约束了它还有 length 和 callee 两个属性。<br>事实上常用的类数组都有自己的接口定义，如 IArguments, NodeList, HTMLCollection 等：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> args: IArguments = <span class="built_in">arguments</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>其中 <code>IArguments</code> 是 TypeScript 中定义好了的类型</strong>，它实际上就是：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface IArguments &#123;</span><br><span class="line">    [index: number]: any;</span><br><span class="line">    length: number;</span><br><span class="line">    callee: <span class="built_in">Function</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="any-在数组中的应用"><a href="#any-在数组中的应用" class="headerlink" title="any 在数组中的应用"></a>any 在数组中的应用</h3><p>一个比较常见的做法是，用 any 表示数组中允许出现任意类型：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> list: any[] = [<span class="string">'xcatliu'</span>, <span class="number">25</span>, &#123; <span class="attr">website</span>: <span class="string">'http://xcatliu.com'</span> &#125;];</span><br></pre></td></tr></table></figure>

<h2 id="函数的类型"><a href="#函数的类型" class="headerlink" title="函数的类型"></a>函数的类型</h2><p>JS中有两种常见的定义函数的方式：</p>
<ul>
<li>函数声明</li>
<li>函数表达式</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 函数表达式</span></span><br><span class="line"><span class="keyword">let</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h3><p>一个函数有输入和输出，要在 TypeScript 中对其进行约束，需要把输入和输出都考虑到，其中函数声明的类型定义较简单：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x: number, y: number</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意，输入多余的（或者少于要求的）参数，是不被允许的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x: number, y: number</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts(4,1): error TS2346: Supplied parameters do not match any signature of call target.</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x: number, y: number</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts(4,1): error TS2346: Supplied parameters do not match any signature of call target.</span></span><br></pre></td></tr></table></figure>

<h3 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h3><p>如果要我们现在写一个对函数表达式（Function Expression）的定义，可能会写成这样：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> mySum = <span class="function"><span class="keyword">function</span> (<span class="params">x: number, y: number</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>这是<strong>可以通过编译</strong>的，不过事实上，上面的代码<strong>只对等号右侧的匿名函数进行了类型定义</strong>，而等号左边的 <code>mySum</code> ，是通过赋值操作进行类型推论而推断出来的。如果需要我们手动给 mySum 添加类型，则应该是这样：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// !!!</span></span><br><span class="line"><span class="keyword">let</span> mySum: <span class="function">(<span class="params">x: number, y: number</span>) =&gt;</span> number = <span class="function"><span class="keyword">function</span> (<span class="params">x: number, y: number</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>在 TypeScript 的类型定义中，<code>=&gt;</code> 用来表示函数的定义，左边是输入类型，需要用括号括起来，右边是输出类型。</strong><br>在 ES6 中，=&gt; 叫做箭头函数。</p>
<h3 id="用接口定义函数的形状"><a href="#用接口定义函数的形状" class="headerlink" title="用接口定义函数的形状"></a>用接口定义函数的形状</h3><p>我们也可以使用接口的方式来定义一个函数需要符合的形状：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface SearchFunc &#123;</span><br><span class="line">    (source: string, <span class="attr">subString</span>: string): boolean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> mySearch: SearchFunc;</span><br><span class="line">mySearch = <span class="function"><span class="keyword">function</span>(<span class="params">source: string, subString: string</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> source.search(subString) !== <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述<code>mySearch</code>函数需要满足接口中的条件：两个string类型的参数和一个bool类型的返回值。</p>
<h3 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h3><p>前面提到，输入多余的（或者少于要求的）参数，是不允许的。那么如何定义可选的参数呢？</p>
<p>与接口中的可选属性类似，我们用 <strong>?</strong> 表示可选的参数：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildName</span>(<span class="params">firstName: <span class="built_in">string</span>, lastName?: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (lastName) &#123;</span><br><span class="line">        <span class="keyword">return</span> firstName + <span class="string">' '</span> + lastName;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> firstName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> tomcat = buildName(<span class="string">'Tom'</span>, <span class="string">'Cat'</span>);</span><br><span class="line"><span class="keyword">let</span> tom = buildName(<span class="string">'Tom'</span>);</span><br></pre></td></tr></table></figure>

<p>需要注意的是，<strong>可选参数必须接在必需参数后面</strong>。换句话说，可选参数后面不允许再出现必需参数了：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildName</span>(<span class="params">firstName?: <span class="built_in">string</span>, lastName: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (firstName) &#123;</span><br><span class="line">        <span class="keyword">return</span> firstName + <span class="string">' '</span> + lastName;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> lastName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> tomcat = buildName(<span class="string">'Tom'</span>, <span class="string">'Cat'</span>);</span><br><span class="line"><span class="keyword">let</span> tom = buildName(<span class="literal">undefined</span>, <span class="string">'Tom'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts(1,40): error TS1016: A required parameter cannot follow an optional parameter.</span></span><br></pre></td></tr></table></figure>

<h3 id="参数默认值"><a href="#参数默认值" class="headerlink" title="参数默认值"></a>参数默认值</h3><p>在 ES6 中，我们允许给函数的参数添加默认值，TypeScript 会将添加了默认值的参数识别为<strong>可选参数</strong>：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildName</span>(<span class="params">firstName: <span class="built_in">string</span>, lastName: <span class="built_in">string</span> = 'Cat'</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> firstName + <span class="string">' '</span> + lastName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> tomcat = buildName(<span class="string">'Tom'</span>, <span class="string">'Cat'</span>);</span><br><span class="line"><span class="keyword">let</span> tom = buildName(<span class="string">'Tom'</span>);</span><br></pre></td></tr></table></figure>

<p><strong>此时就不受「可选参数必须接在必需参数后面」的限制了</strong>：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildName</span>(<span class="params">firstName: <span class="built_in">string</span> = 'Tom', lastName: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> firstName + <span class="string">' '</span> + lastName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> tomcat = buildName(<span class="string">'Tom'</span>, <span class="string">'Cat'</span>);</span><br><span class="line"><span class="keyword">let</span> cat = buildName(<span class="literal">undefined</span>, <span class="string">'Cat'</span>);</span><br></pre></td></tr></table></figure>

<h3 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h3><p>ES6 中，可以使用 …rest 的方式获取函数中的剩余参数（rest 参数）：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">push</span>(<span class="params">array, ...items</span>) </span>&#123;</span><br><span class="line">    items.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">        array.push(item);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = [];</span><br><span class="line">push(a, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<p>事实上，items 是一个数组。所以我们可以用数组的类型来定义它：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">push</span>(<span class="params">array: any[], ...items: any[]</span>) </span>&#123;</span><br><span class="line">    items.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">        array.push(item);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = [];</span><br><span class="line">push(a, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<p>注意，rest 参数只能是最后一个参数。</p>
<h3 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h3><p>重载允许一个函数接受不同数量或类型的参数时，作出不同的处理。<br>比如，我们需要实现一个函数 reverse，输入数字 123 的时候，输出反转的数字 321，输入字符串 ‘hello’ 的时候，输出反转的字符串 ‘olleh’。<br>利用联合类型，我们可以这么实现：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span>(<span class="params">x: number | string</span>): <span class="title">number</span> | <span class="title">string</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">'number'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Number</span>(x.toString().split(<span class="string">''</span>).reverse().join(<span class="string">''</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">'string'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> x.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然而这样有一个缺点，就是不能够精确的表达，输入为数字的时候，输出也应该为数字，输入为字符串的时候，输出也应该为字符串。<br>这时，我们可以使用重载定义多个 reverse 的函数类型：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span>(<span class="params">x: number</span>): <span class="title">number</span>;</span></span><br><span class="line"><span class="function"><span class="title">function</span> <span class="title">reverse</span>(<span class="params">x: string</span>): <span class="title">string</span>;</span></span><br><span class="line"><span class="function"><span class="title">function</span> <span class="title">reverse</span>(<span class="params">x: number | string</span>): <span class="title">number</span> | <span class="title">string</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">'number'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Number</span>(x.toString().split(<span class="string">''</span>).reverse().join(<span class="string">''</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">'string'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> x.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上例中，我们重复定义了多次函数 reverse，前几次都是函数定义，最后一次是函数实现。在编辑器的代码提示中，可以正确的看到前两个提示。</p>
<blockquote>
<p>注意：TypeScript 会优先从最前面的函数定义开始匹配，所以多个函数定义如果有包含关系，需要优先把精确的定义写在前面。</p>
</blockquote>
<h2 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h2>]]></content>
      <categories>
        <category>typescript</category>
      </categories>
      <tags>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>鼠标选中文本的样式，Css之selection</title>
    <url>/css/css-selection/</url>
    <content><![CDATA[<h1 id="user-select"><a href="#user-select" class="headerlink" title="user-select"></a>user-select</h1><p>有时鼠标点按钮会造成 <em>文字被选中</em> 造成不好的用户体验，这时可以设置一个<code>user-select: none</code>来提高用户体验。</p>

<h1 id="selection"><a href="#selection" class="headerlink" title="::selection"></a>::selection</h1><p>有时，为了色彩搭配，需要用<code>::selection</code>来修改默认选中文字的颜色或背景颜色等；有时，也通过<code>::selection</code>设置选中高亮。<br>语法</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">::selection</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">background</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 或采用下面局部的方式 */</span></span><br><span class="line"><span class="selector-class">.div</span><span class="selector-pseudo">::selection</span> &#123; <span class="comment">/* 无空格 */</span></span><br><span class="line">  <span class="attribute">color</span>:red;</span><br><span class="line">  <span class="attribute">background</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::selection</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>:red;</span><br><span class="line">  <span class="attribute">background</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：设置::selection的时候要设置在最外层显示的那个块(div,p,span等)上。</p>
</blockquote>
<p>并不是选中后所有css属性都可以触发。据测试，只有<code>background</code>和<code>color</code>可用作为高亮样式。<br>而且，目前这种方法支持 webkit 的浏览器、Firefox 和 IE10。</p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>selection</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS右上角tag标签的实现方法</title>
    <url>/css/css-left-top-tag/</url>
    <content><![CDATA[<p>例如：</p>

<p>图片来自<a href="http://www.webfront-js.com/articaldetail/15.html" target="_blank" rel="noopener">http://www.webfront-js.com/articaldetail/15.html</a><br>又如：</p>


<p>这些样式是怎么实现的呢？我们来探讨下。<br>这一类地“标签”通常由CSS3的rotate来实现，且大多时候是通过一像素一像素地调节位置来实现。</p>

<p>画了个草图，大概就是有个大的div，大的div中要在右上角添加一个tag。先实现左边的css。<br>所以要把左边的图变成右边的，需要用到</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">transform-origin: left 100%;</span><br><span class="line">transform: translate(29.29%, -100%) rotate(45deg);</span><br></pre></td></tr></table></figure>

<p>其中用到了<code>translate</code>的百分比属性，它与<code>margin</code>和<code>padding</code>不同，它的百分比是相对于它本身的宽高进行计算的。所以当我们不确定div高度的情况下，也可以通过<code>translateY(-100%)</code>来向上移动一个它本身高度的距离，即把它放在<code>big-div</code>上面。<code>translateX(29.29%)</code>，<code>29.29%</code>是上面计算的数值。<br>而且重要的一点是，要把旋转中心点设置在<code>.tag</code>的<code>div</code>的左下角，即<code>transform-origin: left -100%;</code>，第一个参数为水平，第二个参数为垂直。</p>
<p>抛此砖引你玉～<br>原文链接：<a href="http://www.webfront-js.com/articaldetail/15.html" target="_blank" rel="noopener">http://www.webfront-js.com/articaldetail/15.html</a></p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>用CSS的border做一个三角形</title>
    <url>/css/css-triangle/</url>
    <content><![CDATA[<h1 id="用CSS做一个三角形"><a href="#用CSS做一个三角形" class="headerlink" title="用CSS做一个三角形"></a>用CSS做一个三角形</h1><p>将一个div的宽度和高度设为0，接着设置边框样式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.triangle</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">50px</span> solid black;</span><br><span class="line">  <span class="attribute">border-right</span>: <span class="number">50px</span> solid red;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">50px</span> solid yellow;</span><br><span class="line">  <span class="attribute">border-left</span>: <span class="number">50px</span> solid green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>border都为50px，并且不同颜色，结果如下图所示：</p>


<p>当height和width不为0时，</p>



<p>当其他边框设置为transparent(颜色和其父元素相同，即设置透明)时，就可以出现一个直角三角形（高50px，宽100px的三角形）。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.triangle</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">50px</span> solid black;</span><br><span class="line">  <span class="attribute">border-right</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">  <span class="attribute">border-left</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 下面代码更简洁 */</span></span><br><span class="line"><span class="selector-class">.triangle</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">  <span class="attribute">border-top-color</span>: black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果如下所示：</p>

<p>这样写出来的三角形实际上还是占据一个正方形的位置</p>

<p>为了使三角形所占空间尽可能缩小，我们可以<font color="pink">不设置下边框</font></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.triangle</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">  <span class="attribute">border-top-color</span>: black;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时，三角形所占区域就变为了：</p>


<p>同理还可以画出各种三角形：</p>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 上图从左到右，从上到下 */</span></span><br><span class="line"><span class="selector-class">.triangle1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">50px</span> solid <span class="built_in">rgb</span>(<span class="number">246</span>, <span class="number">255</span>, <span class="number">227</span>);</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">200px</span> solid black;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.triangle2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">50px</span> solid <span class="built_in">rgb</span>(<span class="number">246</span>, <span class="number">255</span>, <span class="number">227</span>);</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">200px</span> solid red;</span><br><span class="line">  <span class="attribute">border-top</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.triangle3</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">50px</span> solid <span class="built_in">rgb</span>(<span class="number">246</span>, <span class="number">255</span>, <span class="number">227</span>);</span><br><span class="line">  <span class="attribute">border-left</span>: <span class="number">200px</span> solid yellow;</span><br><span class="line">  <span class="attribute">border-right</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.triangle4</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">50px</span> solid <span class="built_in">rgb</span>(<span class="number">246</span>, <span class="number">255</span>, <span class="number">227</span>);</span><br><span class="line">  <span class="attribute">border-right</span>: <span class="number">200px</span> solid green;</span><br><span class="line">  <span class="attribute">border-left</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.triangle5</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">50px</span> solid <span class="built_in">rgb</span>(<span class="number">246</span>, <span class="number">255</span>, <span class="number">227</span>);</span><br><span class="line">  <span class="attribute">border-right</span>: <span class="number">50px</span> solid green;</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">50px</span> solid yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.triangle6</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">50px</span> solid <span class="built_in">rgb</span>(<span class="number">246</span>, <span class="number">255</span>, <span class="number">227</span>);</span><br><span class="line">  <span class="attribute">border-right</span>: <span class="number">50px</span> solid green;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">50px</span> solid yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.triangle7</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">50px</span> solid <span class="built_in">rgb</span>(<span class="number">246</span>, <span class="number">255</span>, <span class="number">227</span>);</span><br><span class="line">  <span class="attribute">border-left</span>: <span class="number">50px</span> solid yellow;</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">50px</span> solid yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.triangle8</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">50px</span> solid <span class="built_in">rgb</span>(<span class="number">246</span>, <span class="number">255</span>, <span class="number">227</span>);</span><br><span class="line">  <span class="attribute">border-left</span>: <span class="number">50px</span> solid green;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">50px</span> solid yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>推荐一篇<a href="https://www.cnblogs.com/luoyeguichen/p/5029752.html" target="_blank" rel="noopener">CSS实现三角形图标原理解析</a></p>
<h1 id="CSS实现右上角tag"><a href="#CSS实现右上角tag" class="headerlink" title="CSS实现右上角tag"></a>CSS实现右上角tag</h1><p>用CSS实现右上角小tag的方法详见另一篇：<a href="http://glooo.fun/css/background-image/css-left-top-tag/">CSS右上角tag标签的实现方法</a><br>例子：</p>

]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>border</tag>
        <tag>三角形</tag>
        <tag>triangle</tag>
      </tags>
  </entry>
  <entry>
    <title>background-image属性学习</title>
    <url>/css/background-image/</url>
    <content><![CDATA[<p><code>background-image</code>是一种常见的CSS添加背景图片的方式<br>常用的还有<code>&lt;img&gt;</code>标签</p>
<p>两种方式都可以，但是<code>background-image</code>多用于给元素添加<strong>背景</strong>图片，<code>&lt;img&gt;</code>则用于添加图片，实际应用中，<code>background-image</code>应用更广泛，通常配合div一起修改css样式。</p>
<p>但是有时会出现404，问题多半出在引用图片的路径上。如果是本机跑跑项目，绝对路径没有问题，但是项目越大，代码逻辑越复杂，绝对路径就很影响代码的维护与可读性。<br>所以，建议用相对路径。<br>在webpack搭建的vue项目中，图片一般放在<code>src/assets</code>或<code>src/static</code>中，项目中常常也有放在第三方图床上动态加载的。</p>
<hr>
<blockquote>
<p><strong>assets/static文件夹的区别</strong><br>&emsp;相同点：资源在html中使用，都是可以的。<br>&emsp;不同点：使用assets下面的资源，在js中使用的话，路径要经过webpack中file-loader编译，路径不能直接写。<br>&emsp;assets中的文件会经过webpack打包，重新编译，推荐该方式。而static中的文件，不会经过编译。项目在经过打包后，会生成dist文件夹，static中的文件只是复制一遍而已。简单来说，static中建议放一些外部第三方，自己的放到assets，别人的放到static中。<br>注意：如果把图片放在assets与static中，html页面可以使用；但在动态绑定中，assets路径的图片会加载失败，因为webpack使用的是commenJS规范，必须使用require才可以，具体代码如下：</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"hook"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h3</span>&gt;</span>演示钩子的组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>直接使用路径<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../../assets/11.png"</span> <span class="attr">alt</span>=<span class="string">"图片加载失败"</span> <span class="attr">title</span>=<span class="string">"assets中的图片"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../../../static/11.png"</span> <span class="attr">alt</span>=<span class="string">"图片加载失败"</span> <span class="attr">title</span>=<span class="string">"static中的图片"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>动态绑定路径<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"assetsURL"</span> <span class="attr">alt</span>=<span class="string">"图片加载失败"</span> <span class="attr">title</span>=<span class="string">"assets中的图片"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"staticURL"</span> <span class="attr">alt</span>=<span class="string">"图片加载失败"</span> <span class="attr">title</span>=<span class="string">"static中的图片"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data ()&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    assetsURL: <span class="built_in">require</span>(<span class="string">'../../assets/11.png'</span>), <span class="comment">// 此处有require</span></span><br><span class="line">    staticURL: <span class="string">'../../../static/11.png'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>



<p>原文链接：<a href="https://blog.csdn.net/qq_41115965/article/details/80796211" target="_blank" rel="noopener">https://blog.csdn.net/qq_41115965/article/details/80796211</a></p>
<hr>
<h1 id="background"><a href="#background" class="headerlink" title="background"></a>background</h1><p>使用<code>background-image</code>时，通常要配合</p>
<h2 id="background-image-url-lt-url-gt-背景图片路径"><a href="#background-image-url-lt-url-gt-背景图片路径" class="headerlink" title="background-image: url( &lt;url&gt; ) - 背景图片路径"></a><code>background-image: url( &lt;url&gt; )</code> - 背景图片路径</h2><ul>
<li>元素的背景是元素的总大小，包括填充(content)和边界(border)和内边距(padding)，（但不包括外边距）。</li>
<li>默认情况下，background-image放置在元素的<strong>左上角</strong>，并<strong>重复显示</strong>在垂直和水平方向。</li>
<li>提示：请设置一种可用的背景颜色，这样的话，假如背景图像不可用，可以使用背景色带代替。



<h3 id="属性值"><a href="#属性值" class="headerlink" title="属性值"></a>属性值</h3></li>
</ul>
<ul>
<li>none - 无图像背景会显示(默认)</li>
<li>url(‘URL’) - 图像的URL，可多个值</li>
<li>linear-gradient() - 创建一个线性渐变的 “图像”(从上到下)</li>
<li>radial-gradient() - 用径向渐变创建 “图像”。 (center to edges)</li>
<li>repeating-linear-gradient() - 创建重复的线性渐变 “图像”。</li>
<li>repeating-radial-gradient() - 创建重复的径向渐变 “图像”</li>
<li>inherit    指定背景图像应该从父元素继承</li>
</ul>
<p>多个URL图片CSS设置如下：</p>


<h2 id="background-repeat-拉伸-or-拉伸"><a href="#background-repeat-拉伸-or-拉伸" class="headerlink" title="background-repeat - 拉伸 or 拉伸"></a><code>background-repeat</code> - 拉伸 or 拉伸</h2><ul>
<li>repeat (默认)</li>
<li>repeat    背景图像将向垂直和水平方向重复。这是默认</li>
<li>repeat-x    只有水平位置会重复背景图像</li>
<li>repeat-y    只有垂直位置会重复背景图像</li>
<li>no-repeat    不会重复（<strong>最常用</strong>）</li>
<li>inherit 继承父元素</li>
</ul>
<p>(下图淡黄色是border，我设置透明度为0.5)</p>





<h2 id="background-size"><a href="#background-size" class="headerlink" title="background-size"></a><code>background-size</code></h2><p><font color="yellowgreen">经常会有设置完<code>bakcground-image</code>，图片不显示的情况，可能就是没有设置<code>background-size</code>导致的，图片默认显示原始大小，从左上角展开，大于div的部分被裁掉。</font></p>
<ul>
<li>length - 设置背景图片高度和宽度。第一个值设置<strong>宽度</strong>，第二个值设置的<strong>高度</strong>。如果只给出一个值，第二个是设置为 auto(自动)。</li>
<li>percentage - 将计算相对于<em>背景定位区域</em>(div)的百分比。第一个值设置<strong>宽度</strong>，第二个值设置的<strong>高度</strong>。如果只给出一个值，第二个是设置为”auto(自动)”。</li>
<li>cover - 此时<strong>会保持图像的纵横比</strong>并将图像<strong>缩放成将完全覆盖 背景定位区域(div) 的最小大小</strong>。</li>
<li>contain - 此时<strong>会保持图像的纵横比</strong>并将图像<strong>缩放成将适合背景定位区域的最大大小</strong>。</li>
</ul>
<p>不常用：</p>
<h2 id="background-blend-mode-属性定义了背景层的混合模式（图片与颜色）"><a href="#background-blend-mode-属性定义了背景层的混合模式（图片与颜色）" class="headerlink" title="background-blend-mode 属性定义了背景层的混合模式（图片与颜色）"></a><code>background-blend-mode</code> 属性定义了背景层的混合模式（图片与颜色）</h2><ul>
<li>normal    默认值。设置正常的混合模式</li>
<li>multiply    正片叠底模式</li>
<li>screen    滤色模式</li>
<li>overlay    叠加模式</li>
<li>darken    变暗模式</li>
<li>lighten    变亮模式</li>
<li>color-dodge    颜色减淡模式</li>
<li>saturation    饱和度模式</li>
<li>color    颜色模式</li>
<li>luminosity    亮度模式</li>
</ul>
<h2 id="background-attachment-是否滚动"><a href="#background-attachment-是否滚动" class="headerlink" title="background-attachment 是否滚动"></a><code>background-attachment</code> 是否滚动</h2><p>背景图像是否固定或者随着页面的其余部分滚动</p>
<ul>
<li>scroll    背景图片随着页面的滚动而滚动(默认)</li>
<li>fixed    背景图片不会随着页面的滚动而滚动</li>
<li>local    背景图片会随着元素内容的滚动而滚动</li>
<li>initial    设置该属性的默认值</li>
<li>inherit    指定 background-attachment 的设置应该从父元素继承</li>
</ul>
<h2 id="background-clip-指定背景绘制区域"><a href="#background-clip-指定背景绘制区域" class="headerlink" title="background-clip 指定背景绘制区域"></a><code>background-clip</code> 指定背景绘制区域</h2><ul>
<li>border-box    (默认值)。背景绘制在边框方框内（剪切成边框方框）- <font color="yellowgreen">border内(border+padding+content)</font></li>
<li>padding-box    背景绘制在衬距方框内（剪切成衬距方框）- <font color="yellowgreen">padding内(padding+content)</font></li>
<li>content-box    背景绘制在内容方框内（剪切成内容方框）- <font color="yellowgreen">content内(content)</font></li>
</ul>
<h2 id="background-color-背景颜色"><a href="#background-color-背景颜色" class="headerlink" title="background-color - 背景颜色"></a><code>background-color</code> - 背景颜色</h2><p>元素的背景是元素的总大小，跟随<code>background-clip</code>选定的区域而定，默认为border+border+content。</p>
<h2 id="background-position-设置背景图像的起始位置"><a href="#background-position-设置背景图像的起始位置" class="headerlink" title="background-position 设置背景图像的起始位置"></a><code>background-position</code> 设置背景图像的起始位置</h2><p>属性值：(如果只指定一个值，则另一个默认为center)</p>
<ul>
<li>left top</li>
<li>left center</li>
<li>left bottom</li>
<li>right top</li>
<li>right center</li>
<li>right bottom</li>
<li>center top</li>
<li>center center</li>
<li>center bottom</li>
<li>x% y% - 第一个值是水平位置，第二个值是垂直。左上角是0％0％。右下角是100％100％。如果仅指定了一个值，其他值将是50％。 。默认值为：0％0％</li>
<li>xpos ypos - 第一个值是水平位置，第二个值是垂直。左上角是0。单位可以是像素（0px0px）或任何其他 CSS单位。如果仅指定了一个值，其他值将是50％。你可以混合使用％和positions</li>
<li>inherit    指定background-position属性设置应该从父元素继承</li>
</ul>
<h2 id="background-origin-指定background-position的相对于什么的位置"><a href="#background-origin-指定background-position的相对于什么的位置" class="headerlink" title="background-origin 指定background-position的相对于什么的位置"></a><code>background-origin</code> 指定background-position的相对于什么的位置</h2><p>如果<code>background-attachment</code>是固定<code>fixed</code>，这个属性无效。</p>
<ul>
<li>border-box    相对于border的background-position位置</li>
<li>padding-box    相对于padding的background-position位置</li>
<li>content-box 相对于content的background-position位置</li>
</ul>
<p>参考<a href="https://www.runoob.com/cssref/css3-pr-background.html" target="_blank" rel="noopener">菜鸟教程</a></p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue的组件为什么要export default</title>
    <url>/vue/export-default/</url>
    <content><![CDATA[<p>Vue 的模块机制</p>
<p>Vue 是通过 webpack 实现的模块化，因此可以使用 import 来引入模块，例如：</p>

<p>此外，你还可以在 bulid/webpack.base.conf.js 文件中修改相关配置：</p>


<p>　意思是，你的模块可以省略 “.js”，”.vue”，“.json” 后缀，weebpack 会在之后自动添加上；可以用 “@” 符号代替 “src” 字符串等。</p>
<p>　　export 用来导出模块，Vue 的单文件组件通常需要导出一个对象，这个对象是 Vue 实例的选项对象，以便于在其它地方可以使用 import 引入。而 new Vue() 相当于一个构造函数，在入口文件 main.js 构造根组件的同时，如果根组件还包含其它子组件，那么 Vue 会通过引入的选项对象构造其对应的 Vue 实例，最终形成一棵组件树。</p>
<p>　　export 和export default 的区别在于：export 可以导出多个命名模块，例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//demo1.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> str = <span class="string">'hello world'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　对应的引入方式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//demo2.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; str, f &#125; <span class="keyword">from</span> <span class="string">'demo1'</span></span><br></pre></td></tr></table></figure>

<p>export default 只能导出一个默认模块，这个模块可以匿名，例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//demo1.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    a: <span class="string">'hello'</span>,</span><br><span class="line">    b: <span class="string">'world'</span>      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　　对应的引入方式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//demo2.js</span></span><br><span class="line"><span class="keyword">import</span> obj <span class="keyword">from</span> <span class="string">'demo1'</span></span><br></pre></td></tr></table></figure>

<p>　　引入的时候可以给这个模块取任意名字，例如 “obj”，且不需要用大括号括起来。<br>转载自<a href="https://www.cnblogs.com/win-and-coffee/p/10186649.html" target="_blank" rel="noopener">Vue的组件为什么要export default</a></p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>export</tag>
      </tags>
  </entry>
  <entry>
    <title>css box-shadow阴影效果生成的阴影区域，遮挡不了哪些页面元素</title>
    <url>/css/css-shadow/</url>
    <content><![CDATA[<h1 id="css-box-shadow阴影效果生成的阴影区域，遮挡不了哪些页面元素"><a href="#css-box-shadow阴影效果生成的阴影区域，遮挡不了哪些页面元素" class="headerlink" title="css box-shadow阴影效果生成的阴影区域，遮挡不了哪些页面元素?"></a>css box-shadow阴影效果生成的阴影区域，遮挡不了哪些页面元素?</h1><p>如果页面中存在绝对定位（position:absolute）或固定定位（position:fixed）的元素时，这些元素与主文档流并不在同一平面（你可以把它们想象成漂浮在空中的），这样的话地面物体的阴影肯定不能遮挡空中物体啦！<br><strong>你可以把含box-shadow属性的元素也弄成绝对定位或固定定位的，并且把z-index属性弄得比其他漂浮元素都大</strong>，这样它的阴影就能遮盖所有其他元素了。<br>一句话概括，就是要把它弄成最高的那一层！</p>
<p>补充一点：即使是在同一平面（所有元素都在地面，没有漂浮在空中的元素），那么如果含有box-shadow属性的元素后面还有其他元素，那么它的阴影也是没法遮盖后面的元素的。</p>
<p>追问<br>谢谢回答，我把有阴影元素使用了相对定位（position: relative），发现生成的阴影可以覆盖页面所有元素了，你可以解释一下使用了分别使用了绝对定位、固定定位、相对定位后的元素和未指定定位元素，他们之间的层次顺序是这样的吧。</p>
<p>来源<a href="https://zhidao.baidu.com/question/1452766081847510940.html" target="_blank" rel="noopener">https://zhidao.baidu.com/question/1452766081847510940.html</a></p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>box-shadow</tag>
      </tags>
  </entry>
  <entry>
    <title>vue使用element-ui的el-input监听不了键盘事件解决</title>
    <url>/elementUI/el-input-keyup/</url>
    <content><![CDATA[<p>vue使用element-ui的el-input监听不了键盘事件，原因应该是element-ui自身封装了一层div在input标签外面，把原来的事件隐藏了，所以如下代码运行是无响应的：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"name"</span> <span class="attr">placeholder</span>=<span class="string">"账号"</span> @<span class="attr">keyup.enter</span>=<span class="string">"doLogin"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在执行的时候事件是定义在input外面的div上的，所有没有响应。</p>
<p>解决方法需要在事件后面加上<code>.native</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"name"</span> <span class="attr">placeholder</span>=<span class="string">"账号"</span> @<span class="attr">keyup.enter.native</span>=<span class="string">"doLogin"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>事件native的官方链接：<a href="https://cn.vuejs.org/v2/guide/components.html#给组件绑定原生事件" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/components.html#给组件绑定原生事件</a></p>
]]></content>
      <categories>
        <category>elementUI</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>elementUI</tag>
        <tag>el-input</tag>
        <tag>keyup</tag>
      </tags>
  </entry>
  <entry>
    <title>JS获取某月的天数</title>
    <url>/js/js-getDate/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> year = date.getFullYear(); <span class="comment">// 获取当前的年份</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> month = date.getMonth() + <span class="number">1</span>; <span class="comment">// 获取当前年的总月数(一般为12个月)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> lastDay = <span class="keyword">new</span> <span class="built_in">Date</span>(year,month,<span class="number">0</span>).getDate() <span class="comment">// 获取year年，month月的天数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime() <span class="comment">// 获取当前时间戳，单位为毫秒</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>关于时间戳，敬请参考我的这篇文章<a href="http://glooo.fun/js/timestamp/">http://glooo.fun/js/timestamp/</a></p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>Network的headers参数意义</title>
    <url>/network-request/f12-network-headers/</url>
    <content><![CDATA[<p>Google浏览器 =&gt; F12(或右键 =&gt; 检查) =&gt; Network =&gt; XHR =&gt; 点开其中一个请求（无请求可刷新页面）</p>
<h1 id="General"><a href="#General" class="headerlink" title="General"></a><strong>General</strong></h1><p><code>Request URL</code><br><code>Request Method: HEAD</code><br><code>Status Code: 200</code><br><code>Remote Address: &lt;IP地址&gt;</code><br><code>Referrer Policy: no-referrer-when-downgrade</code></p>
<h1 id="Response-Headers"><a href="#Response-Headers" class="headerlink" title="Response Headers"></a><strong>Response Headers</strong></h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">access-control-allow-credentials: true</span><br><span class="line">access-control-allow-headers: Accept,X-PINGARUNER,CONTENT-TYPE,X-Requested-With</span><br><span class="line">access-control-allow-methods: GET,POST,OPTIONS</span><br><span class="line">access-control-allow-origin: http://www.glooo.fun</span><br><span class="line">cache-control: no-cache, no-store, max-age=0, must-revalidate</span><br><span class="line">content-length: 115</span><br><span class="line">content-type: text/plain;charset=UTF-8</span><br><span class="line">date: Mon, 09 Dec 2019 03:47:34 GMT</span><br><span class="line">eagleeye-traceid: 0b52066415758632546064907eee7f</span><br><span class="line">expires: 0</span><br><span class="line">p3p: CP=IVAa PSAa</span><br><span class="line">pragma: no-cache</span><br><span class="line">server: Tengine/Aserver</span><br><span class="line">set-cookie: umdata_=GA1549CC1C2EF656ABB79E83E30100C9480E708; Max-Age=31536000; Expires=Tue, 08-Dec-2020 03:47:34 GMT; Domain=ynuf.aliapp.org; Path=/</span><br><span class="line">status: 200</span><br><span class="line">strict-transport-security: max-age=31536000 ; includeSubDomains</span><br><span class="line">strict-transport-security: max-age=0</span><br><span class="line">timing-allow-origin: *</span><br><span class="line">ufe-result: A6</span><br><span class="line">x-application-context: umid-web:cn-prod:7001</span><br><span class="line">x-content-type-options: nosniff</span><br><span class="line">x-xss-protection: 1; mode=block</span><br></pre></td></tr></table></figure>

<h1 id="Request-Headers"><a href="#Request-Headers" class="headerlink" title="Request Headers"></a><strong>Request Headers</strong></h1><h1 id="Form-Data"><a href="#Form-Data" class="headerlink" title="Form Data"></a>Form Data</h1>]]></content>
      <categories>
        <category>network-request</category>
      </categories>
      <tags>
        <tag>Network</tag>
        <tag>调试</tag>
        <tag>Google</tag>
      </tags>
  </entry>
  <entry>
    <title>css中的scoped</title>
    <url>/css/css-scoped/</url>
    <content><![CDATA[<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span></span><br><span class="line"> main &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在vue文件中的style标签上，有一个特殊的属性：scoped。当一个style标签拥有scoped属性时，它的CSS样式就只能作用于当前的组件，也就是说，该样式只能适用于当前组件元素。通过该属性，可以使得组件之间的样式不互相污染。如果一个项目中的所有style标签全部加上了scoped，相当于实现了样式的模块化。</p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>git stash</title>
    <url>/git/git-stash/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>【Mac】如何查看本机IP地址 &amp;&amp; 把自己的电脑作为本地服务器让同一局域网下电脑访问</title>
    <url>/ip/mac-see-ip/</url>
    <content><![CDATA[<h1 id="Mac-Os下查看本机IP"><a href="#Mac-Os下查看本机IP" class="headerlink" title="Mac Os下查看本机IP"></a>Mac Os下查看本机IP</h1><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>终端下输入: </p>
<blockquote>
<p><code>ifconfig</code></p>
</blockquote>


<p>第二个inet后的地址就是你当前电脑的ip地址。</p>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>终端下输入:</p>
<blockquote>
<p><code>ifconfig | grep &quot;inet&quot;</code></p>
</blockquote>


<p>inet后的地址就是你当前电脑的ip地址。</p>
<p>我的ip地址是：<code>10.231.92.181</code></p>
<p>可以用两种方法校验一下</p>
<h1 id="把电脑变成本地服务器"><a href="#把电脑变成本地服务器" class="headerlink" title="把电脑变成本地服务器"></a>把电脑变成本地服务器</h1><p>同局域网内(相同Wi-Fi下)，把自己的电脑作为本地服务器，其他电脑可访问本地服务器项目</p>
<p>本地服务器运行项目<br>服务器中：</p>
<blockquote>
<p><code>http://localhost:8080/login?user=&#39;admin&#39;</code>或<br><code>http://127.0.0.1:8080/login?user=&#39;admin&#39;</code></p>
</blockquote>
<p>其他电脑用第一步中获取的本地服务器ip地址（我的是<code>10.231.92.181</code>）替换<code>localhost</code>或<code>127.0.0.1</code><br>例如：</p>
<blockquote>
<p><code>http://10.231.92.181:8080/login?user=&#39;admin&#39;</code></p>
</blockquote>
<p>这样，就可以在同一局域网下电脑访问其他电脑的本地项目了。</p>
]]></content>
      <categories>
        <category>ip</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>ip</tag>
        <tag>本地服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>git submodule 子模块</title>
    <url>/git/git-submodule/</url>
    <content><![CDATA[<h1 id="子模块"><a href="#子模块" class="headerlink" title="子模块"></a>子模块</h1><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><p>首先，<br>两个项目是独立的，<br>如果其中一个项目想要引用另一个项目（子模块）的文件，则可以将子模块添加进项目中来。</p>
<blockquote>
<p>（要添加进哪个文件夹，就在哪个文件夹下执行以下命令）<br>  <code>git submodule add &lt;submodule_url&gt; &lt;local_src&gt;</code> </p>
</blockquote>
<p><code>submodule_url</code>是子模块的地址<br><code>local_src</code>是本地路径，选填</p>
<p>添加子项目（子模块）后会出现<code>.gitmodules</code>文件，<br>这是一个配置文件，记录项目的URL和本地子目录之间的映射，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// .gitmodules文件</span><br><span class="line">[submodule `&lt;submodule_name&gt;`]</span><br><span class="line">  path = `&lt;local_directory&gt;`</span><br><span class="line">  url = `&lt;remote_url&gt;`</span><br><span class="line">  branch = `&lt;remote_update_branch_name&gt;` # 可选</span><br></pre></td></tr></table></figure>

<p>（我把子模块一般放在src文件夹下，子模块名为base）</p>

<p><code>.gitmodules</code>在git版本控制中，<br>其他参与项目的人通过<code>.gitmodules</code>获得子项目的情况。</p>
<p>并且在父仓库的git 配置文件中加入了submodule段。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 在.git/config下</span><br><span class="line"># 增加了submodule段</span><br><span class="line">[submodule &quot;sub&quot;]</span><br><span class="line">    url = &lt;submodule_url&gt;</span><br></pre></td></tr></table></figure>

<p>添加子仓库之后，主仓库的对应目录下(/src），并不是我们要的子模块文件和代码，而是对应的<code>commit id</code>。</p>
<h3 id="检出"><a href="#检出" class="headerlink" title="检出"></a>检出</h3><p>克隆一个包含子仓库的仓库目录，并不会clone下子仓库的文件，只是会克隆下<code>.gitmodule</code>描述文件，需要进一步克隆子仓库文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git submodule init  # 初始化本地配置文件(.submodule文件)</span><br><span class="line">git submodule update  # 同步远端submodule源码</span><br></pre></td></tr></table></figure>

<p>或者使用组合指令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git submodule update --init --recursive</span><br></pre></td></tr></table></figure>

<p>此时子目录在一个未命名分支,此时子仓库有改动并没有检测到。</p>
<p>在子仓库，切换到master分支，并git pull最新代码之后，回到主仓库目录，会显示子仓库修改，需要在主仓库提交修改，即修改指定的<code>commit id</code>。</p>
<h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><p>如果在本地修改子仓库，在主仓库 <code>git status</code>会显示子仓库有修改。</p>
<p>需要先在子仓库提交，然后再到主仓库提交代码。</p>
<h3 id="删除子模块"><a href="#删除子模块" class="headerlink" title="删除子模块"></a>删除子模块</h3><p>删除子仓库</p>
<ul>
<li><code>git rm --cached &lt;本地文件夹&gt;</code></li>
<li>删除.gitmodules里相关部分</li>
<li>删除.git/config 文件里相关字段</li>
<li>手动删除子模块残留的目录，清理脏文件</li>
</ul>
<blockquote>
<p>注：<code>.git/config</code>文件夹比较隐蔽，可通过命令行进入，<br>先进入主模块文件夹，执行<code>cd .git</code>，<br>（接着，Mac可通过<code>open .</code>打开文件夹，删除相应字段）<br> <code>vim config</code> 删掉submodule信息<br> <code>cd modules</code><br> <code>rm -rf *</code> 注意一定要慎重！千万别敲错了，或者可以到文件夹手动删除，防止删错误<br> <code>cd ../..</code></p>
</blockquote>
<blockquote>
<p>如果未按照上述步骤删除，可能残留在.git/modudles文件夹内。</p>
</blockquote>
<h2 id="clone的项目中包含子模块"><a href="#clone的项目中包含子模块" class="headerlink" title="clone的项目中包含子模块"></a>clone的项目中包含子模块</h2><p>如果你<code>git clone &lt;url&gt;</code>的项目中包含子模块submodule，<br><code>clone</code>和<code>pull</code>主项目的的时候不会同时拉到submodule的代码，<br>需要先本地初始化<code>.gitmodules</code>，<br>即：</p>
<blockquote>
<p>git submodule init</p>
</blockquote>
<p>再同步远端<code>submodule</code>源码，<br>即</p>
<blockquote>
<p>git submodule update</p>
</blockquote>
<p>如果希望<code>clone main project</code>的时候拉到所有<code>submodule</code>代码，<br>可以使用下面的命令<br><code>git clone --recurse-submodules &lt;main_project_url&gt;  # 获取主项目和所有子项目源码</code></p>
<h2 id="操作submodules源码"><a href="#操作submodules源码" class="headerlink" title="操作submodules源码"></a>操作submodules源码</h2><p>命令行进入子模块所在文件夹，<br>可执行Git操作。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 子模块git操作和一般项目git操作一样</span><br><span class="line"></span><br><span class="line">  git fetch  # 拉取submodule远端源码</span><br><span class="line">  git merge origin/&lt;branch_name&gt;  # 合并submodule远端源码</span><br><span class="line">  git pull  # 获取submodule远端源码合并到当前分支</span><br><span class="line">  git checkout &lt;branch_name&gt;  # 切换submodule的branch</span><br><span class="line">  git commit -m &quot;change_summary&quot;  # 提交submodule的commit</span><br></pre></td></tr></table></figure>

<p>或者：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 更新submodule源码，默认更新的branch是master，如果要修改branch，在.gitmodule中设置</span><br><span class="line">git submodule update --remote &lt;submodule_name&gt;  </span><br><span class="line"></span><br><span class="line"># 更新所有submodule源码，默认更新.gitmodule中设置的跟踪分支，未设置则跟踪master</span><br><span class="line">git submodule update --remote</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 当submodule commits提交有问题的时候放弃整个push</span><br><span class="line">git push --recurse-submodules=check</span><br><span class="line"></span><br><span class="line"># 分开提交submodule和main project</span><br><span class="line">git push --recurse-submodules=on-demand</span><br></pre></td></tr></table></figure>

<h2 id="其他技巧"><a href="#其他技巧" class="headerlink" title="其他技巧"></a>其他技巧</h2><h3 id="git-submodule-foreach"><a href="#git-submodule-foreach" class="headerlink" title="git submodule foreach"></a>git submodule foreach</h3><p>用’foreach’关键字同时管理多个submodules，<br>例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># stash所有submodules</span><br><span class="line">git submodule foreach &apos;git stash&apos;</span><br><span class="line"></span><br><span class="line"># 所有submodules创建新分支</span><br><span class="line">git submodule foreach &apos;git checkout -b &lt;branch_name&gt;&apos;</span><br></pre></td></tr></table></figure>

<p>注：<code>git add</code> 只是把文件加到git版本控制里，并不等于就被stash起来了，<code>git add</code>和<code>git stash</code> 没有必然的关系，但是执行<code>git stash</code> 能正确存储的前提是文件必须在git版本控制中才行。</p>
<h3 id="简写提升效率"><a href="#简写提升效率" class="headerlink" title="简写提升效率"></a>简写提升效率</h3><p>submodules的命令很长，为提升效率，可以创建 <code>alias</code> ，记录在<code>.git/config</code>路径下。如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config alias.spush &apos;push --recurse-submodules=on-demand&apos;</span><br><span class="line">git config alias.supdate &apos;submodule update --remote --merge&apos;</span><br></pre></td></tr></table></figure>

<p>这样，可以使用下面的命令来提高效率</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git spush</span><br><span class="line">git supdate</span><br></pre></td></tr></table></figure>

<p>参考<br>Sisyphus235的<a href="https://www.jianshu.com/p/0107698498af" target="_blank" rel="noopener">简书</a><br>工程人在路上的<a href="https://blog.csdn.net/xingqingly/article/details/80698246" target="_blank" rel="noopener">CSDN</a></p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>JS的includes函数</title>
    <url>/js/includes/</url>
    <content><![CDATA[<p>先来举个例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> site = [<span class="string">'runoob'</span>, <span class="string">'google'</span>, <span class="string">'taobao'</span>];</span><br><span class="line"> </span><br><span class="line">site.includes(<span class="string">'runoob'</span>); </span><br><span class="line"><span class="comment">// true </span></span><br><span class="line"> </span><br><span class="line">site.includes(<span class="string">'baidu'</span>); </span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p><code>includes()</code> 方法用来判断一个数组是否包含一个指定的值。如果是返回 true，否则false。</p>
<p><code>includes(searchElement,fromIndex)</code><br><code>searchElement</code>    必须。需要查找的元素值。<br><code>fromIndex</code>    可选。从该索引处开始查找 <code>searchElement</code> 。如果为负值，则按升序从 <code>array.length + fromIndex</code> 的索引开始搜索。默认为 0，如果计算出的索引小于 0，则整个数组都会被搜索。<br>例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">2</span>);     <span class="comment">// true</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">4</span>);     <span class="comment">// false</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">3</span>, <span class="number">3</span>);  <span class="comment">// false</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">3</span>, <span class="number">-1</span>); <span class="comment">// true</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="literal">NaN</span>].includes(<span class="literal">NaN</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>window.open()和window.location.href</title>
    <url>/js/open-location-href/</url>
    <content><![CDATA[<h1 id="open"><a href="#open" class="headerlink" title="open()"></a>open()</h1><p><code>open()</code>方法用于打开一个新的浏览器窗口或查找一个已命名的窗口。<br><code>window.open(URL,name,features,replace)</code><br>参数<strong>可选</strong>:</p>
<ul>
<li><strong>URL</strong>:<em>可选字符串，声明了要在新窗口中显示的文档的 URL。如果省略了这个参数，或者为空字符串，那么新窗口就不会显示任何文档。</em></li>
<li><strong>name</strong>:<em>可选字符串，该字符串是一个由逗号分隔的特征列表，其中包括数字、字母和下划线，该字符声明了新窗口的名称。这个名称可以用作标记 <code>&lt;a&gt;</code> 和 <code>&lt;form&gt;</code> 的属性 target 的值。如果该参数指定了一个已经存在的窗口，那么 open() 方法就不再创建一个新窗口，而只是返回对指定窗口的引用。在这种情况下，features 将被忽略。</em></li>
<li><strong>features</strong>:<em>可选字符串，声明了新窗口要显示的标准浏览器的特征。如果省略该参数，新窗口将具有所有标准特征。在窗口特征这个表格中，我们对该字符串的格式进行了详细的说明。</em></li>
<li><strong>replace</strong>:<em>一个可选的布尔值。规定了装载到窗口的 URL 是在窗口的浏览历史中创建一个新条目，还是替换浏览历史中的当前条目。支持下面的值：true - URL 替换浏览历史中的当前条目；false - URL 在浏览历史中创建新的条目。</em></li>
</ul>
<p><strong><em>注：请不要混淆方法 Window.open() 与方法 Document.open()，这两者的功能完全不同。为了使你的代码清楚明白，请使用 Window.open()，而不要使用 open()。</em></strong></p>
<p>一次打开多个新窗口只需要</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 写两行</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">window</span>.open(<span class="string">"http://www.glooo.fun/"</span>)</span><br><span class="line">  <span class="built_in">window</span>.open(<span class="string">"https://github.com/Glooo/"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行下面代码时，打开一个<code>200px*100px</code>的新窗口，写有<code>This is &#39;myWindow&#39;</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">myWindow=<span class="built_in">window</span>.open(<span class="string">''</span>,<span class="string">''</span>,<span class="string">'width=200,height=100'</span>) <span class="comment">// 浏览器全屏模式下不生效</span></span></span><br><span class="line"><span class="javascript">myWindow.document.write(<span class="string">"This is 'myWindow'"</span>)</span></span><br><span class="line"><span class="javascript">myWindow.focus() <span class="comment">// 系统将键盘焦点赋予窗口</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>窗口特征</strong>(Window Features)</p>
<ol>
<li>channelmode=yes|no|1|0    是否使用剧院模式显示窗口。默认为 no。</li>
<li>directories=yes|no|1|0    是否添加目录按钮。默认为 yes。</li>
<li>fullscreen=yes|no|1|0    是否使用全屏模式显示浏览器。默认是 no。处于全屏模式的窗口必须同时处于剧院模式。</li>
<li>height=pixels    窗口文档显示区的高度。以像素计。</li>
<li>left=pixels    窗口的 x 坐标。以像素计。</li>
<li>location=yes|no|1|0    是否显示地址字段。默认是 yes。</li>
<li>menubar=yes|no|1|0    是否显示菜单栏。默认是 yes。</li>
<li>resizable=yes|no|1|0    窗口是否可调节尺寸。默认是 yes。</li>
<li>scrollbars=yes|no|1|0    是否显示滚动条。默认是 yes。</li>
<li>status=yes|no|1|0    是否添加状态栏。默认是 yes。</li>
<li>titlebar=yes|no|1|0    是否显示标题栏。默认是 yes。</li>
<li>toolbar=yes|no|1|0    是否显示浏览器的工具栏。默认是 yes。</li>
<li>top=pixels    窗口的 y 坐标。</li>
<li>width=pixels    窗口的文档显示区的宽度。以像素计。</li>
</ol>
<h1 id="window-location-href-“http-glooo-fun-quot"><a href="#window-location-href-“http-glooo-fun-quot" class="headerlink" title="window.location.href = “http://glooo.fun/&quot;"></a>window.location.href = “<a href="http://glooo.fun/&quot;">http://glooo.fun/&quot;</a></h1><ul>
<li><p><code>self.location.href=&quot;/url&quot;</code> 当前页面打开URL页面</p>
</li>
<li><p><code>location.href=&quot;/url&quot;</code> 当前页面打开URL页面</p>
</li>
<li><p><code>windows.location.href=&quot;/url&quot;</code> 当前页面打开URL页面，前面三个用法相同。</p>
</li>
<li><p><code>this.location.href=&quot;/url&quot;</code> 当前页面打开URL页面</p>
</li>
<li><p><code>parent.location.href=&quot;/url&quot;</code> 在父页面打开新页面</p>
</li>
<li><p><code>top.location.href=&quot;/url&quot;</code> 在顶层页面打开新页面</p>
</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><strong>当前页面跳转</strong><br>  <code>window.location.href = &quot;http://glooo.fun/&quot;</code></p>
<p><strong>新页面跳转</strong><br>  <code>window.open(&#39;http://glooo.fun/&#39;)</code></p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL学习(持续更新～)</title>
    <url>/sql/sql/</url>
    <content><![CDATA[<h1 id="SQL基础"><a href="#SQL基础" class="headerlink" title="SQL基础"></a>SQL基础</h1><p>SQL(Structured Query Language)<br>注意：SQL 对大小写不敏感！</p>
<h2 id="SQL-DML-和-DDL"><a href="#SQL-DML-和-DDL" class="headerlink" title="SQL DML 和 DDL"></a>SQL DML 和 DDL</h2><p>可以把 SQL 分为两个部分：数据操作语言 (DML) 和 数据定义语言 (DDL)。<br>SQL (结构化查询语言)是用于执行查询的语法。但是 SQL 语言也包含用于更新、插入和删除记录的语法。</p>
<p>查询和更新指令构成了 SQL 的 DML 部分：</p>
<ul>
<li><code>select</code> - 从数据库表中获取数据</li>
<li><code>update</code> - 更新数据库表中的数据</li>
<li><code>delete</code> - 从数据库表中删除数据</li>
<li><code>insert into</code> - 向数据库表中插入数据</li>
</ul>
<p>SQL 的数据定义语言 (DDL) 部分使我们有能力创建或删除表格。我们也可以定义索引（键），规定表之间的链接，以及施加表间的约束。</p>
<p><strong>SQL 中最重要的 DDL 语句:</strong></p>
<ul>
<li><code>create database</code> - 创建新数据库</li>
<li><code>alter database</code> - 修改数据库 （注意是<code>alter</code>不是<code>alert</code>）</li>
<li><code>create table</code> - 创建新表</li>
<li><code>alter table</code> - 变更（改变）数据库表</li>
<li><code>drop table</code> - 删除表</li>
<li><code>create index</code> - 创建索引（搜索键）</li>
<li><code>drop index</code> - 删除索引</li>
</ul>
<h2 id="select"><a href="#select" class="headerlink" title="select"></a>select</h2><p>SELECT 语句用于从表中选取数据，结果被存储在一个结果表中（称为结果集）。<br>语法:<br><code>SELECT [&lt;列名称1&gt;,&lt;列名称2&gt;] FROM &lt;表名称&gt;;</code></p>
<p>选取所有:<br><code>SELECT * FROM &lt;表名称&gt;;</code></p>
<p>从table表中选取age字段<br><code>select age from table;</code></p>
<p>从table表中选取<code>age</code>和<code>name</code>字段<br><code>select age,name from table</code></p>
<h2 id="distinct-去重"><a href="#distinct-去重" class="headerlink" title="distinct 去重"></a>distinct 去重</h2><p>在表中，可能会包含重复值。<br>关键词 distinct 用于返回结果集中<strong>唯一不同</strong>的值。<br><code>select distinct &lt;列名称&gt; FROM &lt;表名称&gt;</code></p>
<h2 id="where"><a href="#where" class="headerlink" title="where"></a>where</h2><p>如需有条件地从表中选取数据，可将 where 子句添加到 select 语句。<br><code>SELECT &lt;列名称&gt; FROM &lt;表名称&gt; WHERE &lt;列&gt; &lt;运算符&gt; &lt;值&gt;</code><br>下面的运算符可在 WHERE 子句中使用：</p>
<table>
<thead>
<tr>
<th>操作符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>=</td>
<td>等于</td>
</tr>
<tr>
<td>&lt;&gt;</td>
<td>不等于</td>
</tr>
<tr>
<td>&gt;</td>
<td>大于</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于</td>
</tr>
<tr>
<td>&gt;=</td>
<td>大于等于</td>
</tr>
<tr>
<td>&lt;=</td>
<td>小于等于</td>
</tr>
<tr>
<td>BETWEEN</td>
<td>在某个范围内</td>
</tr>
<tr>
<td>LIKE</td>
<td>搜索某种模式</td>
</tr>
</tbody></table>
<p>注意：某些版本的sql中，操作符<code>&lt;&gt;</code>可以写为<code>!=</code></p>
<h3 id="引号的使用"><a href="#引号的使用" class="headerlink" title="引号的使用"></a>引号的使用</h3><p>请注意，在下面例子中的条件值周围使用的是<strong>单引号</strong>。</p>
<p>SQL 使用<strong>单引号</strong>来环绕<strong>文本值（大部分数据库系统也接受双引号）</strong>。如果是<strong>数值</strong>，请不要使用引号。</p>
<ol>
<li><p>文本值：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 这是正确的：</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Persons <span class="keyword">WHERE</span> FirstName=<span class="string">'Bush'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 这是错误的：</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Persons <span class="keyword">WHERE</span> FirstName=Bush</span><br></pre></td></tr></table></figure>
</li>
<li><p>数值：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 这是正确的：</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Persons <span class="keyword">WHERE</span> <span class="keyword">Year</span>&gt;<span class="number">1965</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 这是错误的：</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Persons <span class="keyword">WHERE</span> <span class="keyword">Year</span>&gt;<span class="string">'1965'</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="and-amp-or"><a href="#and-amp-or" class="headerlink" title="and &amp; or"></a>and &amp; or</h2><p>and 和 or 可在 where 子语句中把两个或多个条件结合起来。</p>
<p>实例</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- AND</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Persons <span class="keyword">WHERE</span> FirstName=<span class="string">'Thomas'</span> <span class="keyword">AND</span> LastName=<span class="string">'Carter'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- OR</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Persons <span class="keyword">WHERE</span> firstname=<span class="string">'Thomas'</span> <span class="keyword">OR</span> lastname=<span class="string">'Carter'</span></span><br></pre></td></tr></table></figure>

<h3 id="结合-AND-和-OR-运算符"><a href="#结合-AND-和-OR-运算符" class="headerlink" title="结合 AND 和 OR 运算符"></a>结合 AND 和 OR 运算符</h3><p>我们也可以把 and 和 or 结合起来，使用圆括号来组成复杂的表达式:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Persons <span class="keyword">WHERE</span> (FirstName=<span class="string">'Thomas'</span> <span class="keyword">OR</span> FirstName=<span class="string">'William'</span>)</span><br><span class="line"><span class="keyword">AND</span> LastName=<span class="string">'Carter'</span></span><br></pre></td></tr></table></figure>

<h2 id="order-by"><a href="#order-by" class="headerlink" title="order by"></a>order by</h2><p>ORDER BY 语句用于对结果集进行排序。</p>
<p>ORDER BY 语句用于根据指定的列对结果集进行排序。</p>
<p>ORDER BY 语句默认按照<strong>升序</strong>对记录进行排序。</p>
<p>实例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 以Company字母顺序排序</span></span><br><span class="line"><span class="keyword">SELECT</span> Company, OrderNumber <span class="keyword">FROM</span> Orders <span class="keyword">ORDER</span> <span class="keyword">BY</span> Company</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 以字母顺序显示公司名称（Company），公司名相同时，按OrderNumber的大小排序</span></span><br><span class="line"><span class="keyword">SELECT</span> Company, OrderNumber <span class="keyword">FROM</span> Orders <span class="keyword">ORDER</span> <span class="keyword">BY</span> Company, OrderNumber</span><br></pre></td></tr></table></figure>

<h3 id="DESC"><a href="#DESC" class="headerlink" title="DESC"></a>DESC</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 以逆字母顺序显示公司名称：</span></span><br><span class="line"><span class="keyword">SELECT</span> Company, OrderNumber <span class="keyword">FROM</span> Orders <span class="keyword">ORDER</span> <span class="keyword">BY</span> Company <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure>

<h3 id="ASC"><a href="#ASC" class="headerlink" title="ASC"></a>ASC</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 以逆字母顺序显示公司名称，公司名相同的时候，按OrderNumber排序</span></span><br><span class="line"><span class="keyword">SELECT</span> Company, OrderNumber <span class="keyword">FROM</span> Orders <span class="keyword">ORDER</span> <span class="keyword">BY</span> Company <span class="keyword">DESC</span>, OrderNumber <span class="keyword">ASC</span></span><br></pre></td></tr></table></figure>

<h2 id="insert-into"><a href="#insert-into" class="headerlink" title="insert into"></a>insert into</h2><p>INSERT INTO 语句用于向表格中插入新的行。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> &lt;表名称&gt; <span class="keyword">VALUES</span> (&lt;值<span class="number">1</span>&gt;,&lt;值<span class="number">2</span>&gt;,...)</span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Persons <span class="keyword">VALUES</span> (<span class="string">'Gates'</span>, <span class="string">'Bill'</span>, <span class="string">'Xuanwumen 10'</span>, <span class="string">'Beijing'</span>)</span><br></pre></td></tr></table></figure>

<p>我们也可以指定所要插入数据的列：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> &lt;标名称&gt; (&lt;列<span class="number">1</span>&gt;,&lt;列<span class="number">2</span>&gt;,...) <span class="keyword">VALUES</span> (&lt;值<span class="number">1</span>&gt;,&lt;值<span class="number">2</span>&gt;,...)</span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Persons (LastName, Address) <span class="keyword">VALUES</span> (<span class="string">'Wilson'</span>, <span class="string">'Champs-Elysees'</span>)</span><br></pre></td></tr></table></figure>

<h2 id="update"><a href="#update" class="headerlink" title="update"></a>update</h2><p>Update 语句用于修改表中的数据。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> &lt;表名称&gt; <span class="keyword">SET</span> &lt;列名称&gt; = &lt;新值&gt; <span class="keyword">WHERE</span> &lt;列名称&gt; = &lt;某值&gt;</span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 更新某一行的某一列</span></span><br><span class="line"><span class="keyword">UPDATE</span> Person <span class="keyword">SET</span> FirstName = <span class="string">'Fred'</span> <span class="keyword">WHERE</span> LastName = <span class="string">'Wilson'</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 更新一行中的若干列</span></span><br><span class="line"><span class="keyword">UPDATE</span> Person <span class="keyword">SET</span> Address = <span class="string">'Zhongshan 23'</span>, City = <span class="string">'Nanjing'</span></span><br><span class="line"><span class="keyword">WHERE</span> LastName = <span class="string">'Wilson'</span></span><br></pre></td></tr></table></figure>

<h2 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h2><p>DELETE 语句用于删除表中的行。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> &lt;表名称&gt; <span class="keyword">WHERE</span> &lt;列名称&gt; = &lt;值&gt;</span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 删除某行</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> Person <span class="keyword">WHERE</span> LastName = <span class="string">'Wilson'</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除所有行</span></span><br><span class="line"><span class="comment">-- 可以在不删除表的情况下删除所有的行。这意味着表的结构、属性和索引都是完整的：</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="comment">-- 或者：</span></span><br><span class="line"><span class="keyword">DELETE</span> * <span class="keyword">FROM</span> table_name</span><br></pre></td></tr></table></figure>

<!-- # 高级进阶 -->
<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><p>参考<a href="https://www.cnblogs.com/bchjazh/p/5997728.html" target="_blank" rel="noopener">mysql sql语句大全</a></p>
]]></content>
      <categories>
        <category>sql</category>
      </categories>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>require和import的区别</title>
    <url>/webpack/require-import/</url>
    <content><![CDATA[<p>node编程中最重要的思想就是模块化，import和require都是被模块化所使用。</p>
<p>遵循规范<br>–require 是 AMD规范引入方式<br>–import是es6的一个语法标准，如果要兼容浏览器的话必须转化成es5的语法</p>
<p>调用时间<br>–require是运行时调用，所以require理论上可以运用在代码的任何地方<br>–import是编译时调用，所以必须放在文件开头</p>
<p>本质<br>–require是赋值过程，其实require的结果就是对象、数字、字符串、函数等，再把require的结果赋值给某个变量<br>–import是解构过程，但是目前所有的引擎都还没有实现import，我们在node中使用babel支持ES6，也仅仅是将ES6转码为ES5再执行，import语法会被转码为require</p>
<p>require时代的模块<br>node编程中最重要的思想之一就是模块，而正是这个思想，让JavaScript的大规模工程成为可能。模块化编程在js界流行，也是基于此，随后在浏览器端，requirejs和seajs之类的工具包也出现了，可以说在对应规范下，require统治了ES6之前的所有模块化编程，即使现在，在ES6 module被完全实现之前，还是这样。</p>
<p>node的module遵循CommonJS规范，requirejs遵循AMD，seajs遵循CMD，虽各有不同，但总之还是希望保持较为统一的代码风格。</p>
<p>参考自<a href="https://blog.csdn.net/weixin_42966484/article/details/82889608" target="_blank" rel="noopener">归小超https://blog.csdn.net/weixin_42966484/article/details/82889608</a>的CSDN</p>
]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>webpack</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>HLS - 基于Http的视频流协议</title>
    <url>/hls/hls/</url>
    <content><![CDATA[<p>HLS（HTTP Live Streaming全称）是一个基于HTTP的视频流协议，由Apple公司实现，Mac OS上的QuickTime、Safari 以及iOS上的 Safari都能很好的支持 HLS，高版本 Android 也增加了对 HLS 的支持。</p>
<p>一些常见的客户端如：MPlayerX、VLC 也都支持HLS协议，如果需要在chrome上播放，需要使用 <a href="https://github.com/videojs/videojs-contrib-hls" target="_blank" rel="noopener">videojs-contrib-hls.js</a> 解析。</p>


<p>Server服务器<br>HLS的服务器组件负责获取的媒体输入流 , 然后Media编码后 MPEG-4（H.264 video 和 AAC audio）格式然后用硬件打包到 MPEG-2 (MPEG-2 transport stream)的传输流中。图中显示,传输流会经过stream segmenter, 这里的工作是MPEG-2传输流会被分散为小片段然后保存为一个或多个系列的 .ts 格式的媒体文件。这个过程需要借助编码工具来完成，比如 Apple stream segmenter。<br>(视频类是.ts文件,纯音频会被编码为一些音频小片段，通常为 ADTS头的AAC、MP3、或者 AC-3格式。)<br>服务端可以采用硬件编码和软件编码两种形式，其功能都是按照上文描述的规则对现有的媒体文件进行切片并使用索引文件进行管理。而软件切片通常会使用 Apple 公司提供的工具或者第三方的集成工具。</p>
<p>Distribution分配组件<br>同时上面提到的那个切片器（segmenter）也会创建一个索引文件，通常会包含这些媒体文件的一个列表，也能包含元数据。它一般都是一个个.M38U的列表。列表元素会关联一个 URL 用于客户端访问。然后按序去请求这些 URL。</p>


<p>主索引文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#EXTM3U</span><br><span class="line">#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=409037,RESOLUTION=416x234,CODECS=&quot;mp4a.40.2, avc1.42001e&quot;</span><br><span class="line">Gear1/prog_index.m3u8</span><br></pre></td></tr></table></figure>

<p>复制代码第一行：#EXTM3U<br>每个M3U文件第一行必须是这个tag，起标示作用<br>第二行：#EXT-X-STREAM-INF<br>标签的属性列表中直接指明当前流是VIDEO还是AUDIO</p>
<p>包含属性 :</p>
<ul>
<li>BANDWIDTH 指定码率</li>
<li>PROGRAM-ID 唯一ID (这个属性在后面的协议版本废除了)</li>
<li>CODECS 指定流的编码类型</li>
<li>RESOLUTION：分辨率</li>
</ul>
<p>子索引文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#EXTM3U</span><br><span class="line">#EXT-X-TARGETDURATION:11</span><br><span class="line">#EXT-X-VERSION:3</span><br><span class="line">#EXT-X-MEDIA-SEQUENCE:0</span><br><span class="line">#EXT-X-PLAYLIST-TYPE:VOD</span><br><span class="line">#EXTINF:10.133333,</span><br><span class="line">fileSequence0.ts</span><br><span class="line">#EXTINF:10.000666,</span><br><span class="line">fileSequence1.ts</span><br><span class="line">#EXTINF:10.667334,</span><br><span class="line">fileSequence2.ts</span><br><span class="line">#EXTINF:9.686001,</span><br><span class="line">fileSequence3.ts</span><br><span class="line">#EXTINF:9.768665,</span><br><span class="line">fileSequence4.ts</span><br><span class="line">#EXTINF:10.000000,</span><br><span class="line">fileSequence5.ts</span><br><span class="line">#EXT-X-ENDLIST</span><br></pre></td></tr></table></figure>

<p>#EXTM3U m3u文件头，必须放在第一行。</p>
<p>#EXT-X-TARGETDURATION 每个分片TS的最大的时长。</p>
<p>#EXT-X-VERSION 用以标示协议版本。</p>
<p>#EXT-X-MEDIA-SEQUENCE TS分片的序列号。</p>
<p>#EXT-X-PLAYLIST-TYPE 提供关于PlayList的可变性的信息， 这个对整个PlayList文件有效，是可选的。</p>
<p>#EXTINF extra info，分片TS的信息，如时长，带宽等。<br>主索引文件与子索引文件的区别</p>
<p>主索引文件和子索引文件都是.M3U8的playlist<br>主索引文件只需下载一次，但对于直播节目子索引文件定期重新加载</p>
<p>client客户端<br>分配组件由标准的网络服务器。他们负责接受Client客户端请求并提供相关联的资源给客户端。<br>videojs-contrib-hls.js组件解析过程</p>


<p>HLS简单讲就是把整个流分成一个个小的片段，基于 HTTP 的文件来下载，每次只下载一小部分。<br>前面提到了用于 H5 播放直播视频时引入的一个 .m3u8 的文件，这个文件就是基于 HLS 协议，存放视频流元数据的文件。<br>每一个 .m3u8 文件，分别对应若干个 ts 文件，这些 ts 文件才是真正存放视频的数据，m3u8 文件只是存放了一些 ts 文件的配置信息和相关路径，当视频播放时，.m3u8 是动态改变的，再通过解析器（videojs-contrib-hls.js）解析这个文件，并找到对应的 ts 文件来播放，所以一般为了加快速度，.m3u8 放在 web 服务器上，ts 文件放在 cdn 上。</p>
<p>摘自<a href="https://juejin.im/post/5ab851b6f265da23826df601" target="_blank" rel="noopener">富途web开发团队https://juejin.im/post/5ab851b6f265da23826df601</a></p>
]]></content>
      <categories>
        <category>hls</category>
      </categories>
      <tags>
        <tag>基于Http的视频流协议</tag>
      </tags>
  </entry>
  <entry>
    <title>vue调用摄像头显示</title>
    <url>/uncategorized/capture-pic/</url>
    <content><![CDATA[<p>在<code>src/app.vue</code>中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">video</span> <span class="attr">ref</span>=<span class="string">"video"</span> <span class="attr">id</span>=<span class="string">"video"</span> <span class="attr">width</span>=<span class="string">"160"</span> <span class="attr">height</span>=<span class="string">"12"</span> <span class="attr">autoplay</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;div&gt;&lt;video ref="video" id="video" width="640" height="480" autoplay&gt;&lt;/video&gt;&lt;/div&gt; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"snap"</span> <span class="attr">v-on:click</span>=<span class="string">"capture()"</span>&gt;</span>Snap Photo<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">ref</span>=<span class="string">"canvas"</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">width</span>=<span class="string">"640"</span> <span class="attr">height</span>=<span class="string">"480"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"c in captures"</span> <span class="attr">:key</span>=<span class="string">"c"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">"c"</span> <span class="attr">height</span>=<span class="string">"50"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">      name: <span class="string">'app'</span>,</span></span><br><span class="line">      data() &#123;</span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line">            video: &#123;&#125;,</span><br><span class="line">            canvas: &#123;&#125;,</span><br><span class="line">            captures: []</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      mounted() &#123; </span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.video = <span class="keyword">this</span>.$refs.video;</span></span><br><span class="line">        if(navigator.mediaDevices &amp;&amp; navigator.mediaDevices.getUserMedia) &#123;</span><br><span class="line"><span class="javascript">            navigator.mediaDevices.getUserMedia(&#123; <span class="attr">video</span>: <span class="literal">true</span> &#125;).then(<span class="function"><span class="params">stream</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.video.srcObject = stream</span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.video.play();</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123; </span><br><span class="line">        capture() &#123;</span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.canvas = <span class="keyword">this</span>.$refs.canvas;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> context = <span class="keyword">this</span>.canvas.getContext(<span class="string">"2d"</span>).drawImage(<span class="keyword">this</span>.video, <span class="number">0</span>, <span class="number">0</span>, <span class="number">640</span>, <span class="number">480</span>);</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.captures.push(canvas.toDataURL(<span class="string">"image/png"</span>));</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  body&#123;</span><br><span class="line"><span class="css">      <span class="selector-tag">background-color</span>: <span class="selector-id">#F0F0F0</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-id">#app</span> &#123;</span></span><br><span class="line">      text-align: center;</span><br><span class="line"><span class="css">      <span class="selector-tag">color</span>: <span class="selector-id">#2c3e50</span>;</span></span><br><span class="line">      margin-top: 60px;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-id">#video</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background-color</span>: <span class="selector-id">#000000</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-id">#canvas</span> &#123;</span></span><br><span class="line">      display: none;</span><br><span class="line">  &#125;</span><br><span class="line">  li &#123;</span><br><span class="line">      display: inline;</span><br><span class="line">      padding: 5px;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><a href="https://www.cnblogs.com/GeniusLyzh/p/10589938.html" target="_blank" rel="noopener">原文链接:https://www.cnblogs.com/GeniusLyzh/p/10589938.html</a></p>
<p><strong>注：</strong>原文<code>this.video.src = window.URL.createObjectURL(stream);</code>会报错，<br>错误：<code>Failed to execute &#39;createObjectURL&#39; on &#39;URL&#39;</code><br>原因：Chrome升级后，新版本的Chrome不再支持该用法。其他主流浏览器也是如此。<br>改成<code>this.video.srcObject = stream</code>就好了。<br>一个兼容的写法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.srcObject = stream;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="keyword">this</span>.src = <span class="built_in">window</span>.URL.createObjectURL(stream);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac下的一些命令行操作</title>
    <url>/mac/mac-new-file/</url>
    <content><![CDATA[<p><code>mkdir [选项] &lt;文件夹名&gt;</code><br>创建文件夹</p>
<p><code>cd &lt;文件夹名&gt;</code><br>命令行进入文件夹</p>
<p><code>clear</code><br>清屏</p>
<p><code>pwd</code><br>显示当前操作的路径(绝对路径)</p>
<p>tab键<br>自动补全文件夹名</p>
<p><code>touch &lt;文件名&gt;</code><br>创建文件</p>
<p>持续更新，欢迎补充～</p>
]]></content>
      <categories>
        <category>mac</category>
      </categories>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>消息提示之this.$message</title>
    <url>/elementUI/eleme-message/</url>
    <content><![CDATA[<p><code>this.$message</code>需要引入相应的包ElementUI</p>
<h1 id="elementUI"><a href="#elementUI" class="headerlink" title="elementUI"></a>elementUI</h1><p>  关于<a href="https://element.eleme.io/#/zh-CN/component/installation" target="_blank" rel="noopener">ElementUI</a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h3><p>  推荐使用 npm 的方式安装，它能更好地和 webpack 打包工具配合使用。</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install element-ui -S</span><br></pre></td></tr></table></figure>

<p>  (<code>-S</code> 等同于 <code>--save</code>)</p>
<p>  关于<a href="http://glooo.fun/npm/npm-install-save/">为什么要使用–save</a></p>
<h3 id="CDN引入"><a href="#CDN引入" class="headerlink" title="CDN引入"></a>CDN引入</h3><p>  <a href="https://element.eleme.io/#/zh-CN/component/installation#cdn" target="_blank" rel="noopener">https://element.eleme.io/#/zh-CN/component/installation#cdn</a></p>
<h1 id="this-message"><a href="#this-message" class="headerlink" title="this.$message()"></a>this.$message()</h1><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>想要在页面上显示一些提示消息，可以用elementUI的<code>this.$message()</code>方法，下面介绍它的用法。</p>


<p>默认四种样式：成功，警告，普通消息，错误。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  open1() &#123;</span><br><span class="line">    <span class="keyword">this</span>.$message(&#123;</span><br><span class="line">      message: <span class="string">'恭喜你，这是一条成功消息'</span>,</span><br><span class="line">      type: <span class="string">'success'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  open2() &#123;</span><br><span class="line">    <span class="keyword">this</span>.$message(&#123;</span><br><span class="line">      message: <span class="string">'警告哦，这是一条警告消息'</span>,</span><br><span class="line">      type: <span class="string">'warning'</span></span><br><span class="line">    &#125;)  </span><br><span class="line">  &#125;,</span><br><span class="line">  open3() &#123;</span><br><span class="line">    <span class="keyword">this</span>.$message(<span class="string">'这是一条消息提示'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  open4() &#123;</span><br><span class="line">    <span class="keyword">this</span>.$message.error(<span class="string">'错了哦，这是一条错误消息'</span>);  </span><br><span class="line">    <span class="comment">// 以上都可以用这种形式，</span></span><br><span class="line">    <span class="comment">// 如this.$message.warning </span></span><br><span class="line">    <span class="comment">// 或 this.$message.info(默认) </span></span><br><span class="line">    <span class="comment">// 或this.$message.success</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="VNode"><a href="#VNode" class="headerlink" title="VNode"></a>VNode</h2>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">openVn() &#123;</span><br><span class="line">  <span class="keyword">const</span> h = <span class="keyword">this</span>.$createElement;</span><br><span class="line">  <span class="keyword">this</span>.$message(&#123;</span><br><span class="line">    message: h(<span class="string">'p'</span>, <span class="literal">null</span>, [</span><br><span class="line">      h(<span class="string">'span'</span>, <span class="literal">null</span>, <span class="string">'内容可以是 '</span>),</span><br><span class="line">      h(<span class="string">'i'</span>, &#123; <span class="attr">style</span>: <span class="string">'color: teal'</span> &#125;, <span class="string">'VNode'</span>)</span><br><span class="line">    ])</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="可关闭按钮"><a href="#可关闭按钮" class="headerlink" title="可关闭按钮"></a>可关闭按钮</h2>
<p>默认的 Message 是不可以被人工关闭的，如果需要可手动关闭的 Message，可以使用<code>showClose</code>字段。此外，和 <code>Notification</code> 一样，Message 拥有可控的<code>duration</code>，设置<code>0</code>为不会被自动关闭，默认为 <code>3000</code> 毫秒。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  open1() &#123;</span><br><span class="line">    <span class="keyword">this</span>.$message(&#123;</span><br><span class="line">      message: <span class="string">'恭喜你，这是一条成功消息'</span>,</span><br><span class="line">      type: <span class="string">'success'</span>,</span><br><span class="line">      showClose: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h2 id="居中框内文字"><a href="#居中框内文字" class="headerlink" title="居中框内文字"></a>居中框内文字</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  open1() &#123;</span><br><span class="line">    <span class="keyword">this</span>.$message(&#123;</span><br><span class="line">      message: <span class="string">'这是一条消息提示'</span>,</span><br><span class="line">      type: <span class="string">'info'</span>,</span><br><span class="line">      center: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<h2 id="HTML片段"><a href="#HTML片段" class="headerlink" title="HTML片段"></a>HTML片段</h2><p>将<code>dangerouslyUseHTMLString</code>属性设置为 <code>true</code>（默认为<code>false</code>），message 就会被当作 HTML 片段处理。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">:plain</span>=<span class="string">"true"</span> @<span class="attr">click</span>=<span class="string">"openHTML"</span>&gt;</span>使用 HTML 片段<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    methods: &#123;</span><br><span class="line">      openHTML() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$message(&#123;</span></span><br><span class="line"><span class="javascript">          dangerouslyUseHTMLString: <span class="literal">true</span>,</span></span><br><span class="line"><span class="xml">          message: '<span class="tag">&lt;<span class="name">strong</span>&gt;</span>这是 <span class="tag">&lt;<span class="name">i</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">i</span>&gt;</span> 片段<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>'</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p><strong>message 属性虽然支持传入 HTML 片段，但是在网站上动态渲染任意 HTML 是非常危险的，因为容易导致 XSS 攻击。因此在 <code>dangerouslyUseHTMLString</code> 打开的情况下，请确保 message 的内容是可信的，永远不要将用户提交的内容赋值给 message 属性。</strong></p>
<h2 id="补充Options及方法"><a href="#补充Options及方法" class="headerlink" title="补充Options及方法"></a>补充Options及方法</h2><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
<th>类型</th>
<th>可选值</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td><code>iconClass</code></td>
<td>自定义图标的类名，会覆盖<code>type</code></td>
<td>string</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td><code>customClass</code></td>
<td>自定义类名</td>
<td>string</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td><code>duration</code></td>
<td>显示时间, 毫秒。设为<code>0</code>则不会自动关闭</td>
<td>number</td>
<td>—</td>
<td>3000</td>
</tr>
<tr>
<td><code>onClose</code></td>
<td>关闭时的回调函数, 参数为被关闭的<code>message</code>实例</td>
<td>function</td>
<td>—</td>
<td>—</td>
</tr>
<tr>
<td><code>offset</code></td>
<td>Message 距离窗口顶部的偏移量</td>
<td>number</td>
<td>—</td>
<td>20</td>
</tr>
</tbody></table>
<p><strong>方法</strong><br>调用<code>Message</code>或 <code>this.$message</code>会返回当前<code>Message</code>的实例。如果需要手动关闭实例，可以调用它的<code>close</code>方法。</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>close</code></td>
<td>关闭当前的 <code>Message</code></td>
</tr>
</tbody></table>
<h2 id="全局方法"><a href="#全局方法" class="headerlink" title="全局方法"></a>全局方法</h2><p>Element 为 Vue.prototype 添加了全局方法 $message。因此在 vue instance 中可以采用本页面中的方式调用 Message。</p>
<h2 id="单独引用"><a href="#单独引用" class="headerlink" title="单独引用"></a>单独引用</h2><p>单独引入 Message：</p>
<p><code>import { Message } from &#39;element-ui&#39;;</code><br>此时调用方法为 <code>Message(options)</code>。我们也为每个 type 定义了各自的方法，如 <code>Message.success(options)</code>。并且可以调用 <code>Message.closeAll()</code> 手动关闭所有实例。</p>
]]></content>
      <categories>
        <category>elementUI</category>
      </categories>
      <tags>
        <tag>elementUI</tag>
      </tags>
  </entry>
  <entry>
    <title>npm install 时--save与否</title>
    <url>/npm/npm-install-save/</url>
    <content><![CDATA[<p>node.js的npm建好项目后，<br>通常需要执行<code>npm install</code>来安装依赖包</p>
<p><code>npm install</code> 、 <code>npm install --save</code> 和 <code>npm install -g</code></p>
<h1 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h1><p>当我们创建了一个Node.js项目，意味着创建了一个模块，这个模块的描述文件，被称为package.json。</p>
<h1 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h1><p>npm 是一个包管理器，它让 JavaScript 开发者分享、复用代码更方便。</p>
<p>在程序开发中我们常常需要依赖别人提供的框架，或者是方法库,写 JS 也不例外。这些可以重复使用的框架代码被称作包（package）或者模块（module），一个包可以是一个文件夹里放着几个文件，而这些文件就存放在<code>package.json</code>。</p>
<h1 id="package-json的生成"><a href="#package-json的生成" class="headerlink" title="package.json的生成"></a><code>package.json</code>的生成</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm init //项目初始化</span><br><span class="line">$ npm init -y //快速生成package.json</span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// （此处为快速搭建，有兴趣可以了解一下package的属性）</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"vue-cli"</span>,    <span class="comment">// 包名</span></span><br><span class="line">      <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,   <span class="comment">// 包的版本号</span></span><br><span class="line">      <span class="attr">"description"</span>: <span class="string">""</span>,    <span class="comment">// 描述</span></span><br><span class="line">      <span class="attr">"main"</span>: <span class="string">"index.js"</span>,   <span class="comment">// 主入口文件</span></span><br><span class="line">      <span class="attr">"dependencies"</span>: &#123;     <span class="comment">// dependencies / devDependencies : 生产/开发环境依赖包列表。它们将会被安装在 node_module 目录下</span></span><br><span class="line">        <span class="attr">"vue"</span>: <span class="string">"^2.5.17"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"devDependencies"</span>: &#123;  <span class="comment">// dependencies / devDependencies : 生产/开发环境依赖包列表。它们将会被安装在 node_module 目录下</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">        <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"author"</span>: <span class="string">""</span>,        <span class="comment">// 作者</span></span><br><span class="line">      <span class="attr">"license"</span>: <span class="string">"ISC"</span>     <span class="comment">// 授权</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><h2 id="npm-install"><a href="#npm-install" class="headerlink" title="npm install"></a>npm install</h2><p>  <code>npm install</code> 等同于 <code>npm i</code><br>  <code>--save</code> 等同于<code>-S</code><br>  <code>--save-dev</code> 等同于 <code>-D</code><br>  <code>npm run start</code> 等同于 <code>npm start</code>   对应”scripts”里的”start”命令<br>  <strong>会安装在<code>node_modules</code>目录中，不会修改<code>package.json</code>文件。之后运行<code>npm install</code>时不会自动安装。</strong></p>
<p><strong>关于package.json和package-lock.json：</strong><br>  <code>package.json</code>：主要用来定义项目中需要依赖的包<br>  <code>package-lock.json</code>：在 <code>npm install</code>时候生成一份文件，用以<strong>记录当前状态下</strong>实际安装的各个<code>npm package</code>的<strong>具体来源</strong>和<strong>版本号</strong>。<br>  每次执行完<code>npm install</code>之后会对应生成<code>package-lock</code>文件，该文件记录了上一次安装的具体的版本号，相当于是提供了一个参考，在出现版本兼容性问题的时候，就可以参考这个文件来修改版本号即可。</p>
<h2 id="npm-install-–save"><a href="#npm-install-–save" class="headerlink" title="npm install –save"></a>npm install –save</h2><p>  会在<code>package.json</code>的 <strong><code>dependencies</code></strong> 属性下添加<code>webpack</code></p>
<p>  通常，项目（<strong>运行</strong>时、发布到生产环境时）依赖，例如：<code>antd</code>, <code>element</code>, <code>react</code>…</p>
<h2 id="npm-install-–save-dev"><a href="#npm-install-–save-dev" class="headerlink" title="npm install –save-dev"></a>npm install –save-dev</h2><p>  在<code>package.json</code>的 <strong><code>devDependencies</code></strong> 属性下添加</p>
<p>  通常，工程构建（<strong>开发</strong>时、“打包”时）依赖，例如：<code>xxx-cli</code>, <code>less-loader</code>, <code>babel-loader</code>…</p>
  

<h2 id="dependencies-amp-devDependencies"><a href="#dependencies-amp-devDependencies" class="headerlink" title="dependencies &amp; devDependencies"></a>dependencies &amp; devDependencies</h2><p><code>devDependencies</code> 节点下的模块是我们在开发时需要用的，比如项目中使用的 <code>gulp</code> ，压缩<code>css</code>、<code>js</code>的模块。这些模块在我们的项目部署后是不需要的，所以我们可以使用 <code>--save-dev</code> 的形式安装。像 <code>express</code> 这些模块是项目运行必备的，应该安装在 <code>dependencies</code> 节点下，所以我们应该使用 <code>--save</code> 的形式安装。</p>
<p><strong>关于<code>package.json</code>的<code>dependencies</code>和<code>devDependencies</code></strong>:即前者为项目所必须的，后者为开发所需的依赖</p>
<p>参考<a href="https://www.jianshu.com/p/e10f981972ff" target="_blank" rel="noopener">感觉不错哦</a>大佬的简书。</p>
]]></content>
      <categories>
        <category>npm</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 函数Function</title>
    <url>/css/css-function/</url>
    <content><![CDATA[<h1 id="CSS函数"><a href="#CSS函数" class="headerlink" title="CSS函数"></a>CSS函数</h1><h2 id="calc"><a href="#calc" class="headerlink" title="calc()"></a>calc()</h2><ul>
<li>支持CSS3</li>
<li>任何长度值都可用calc()函数进行计算</li>
<li>支持 “+”、“-”、“*”、“/” 运算</li>
<li>使用标准的数学运算优先级规则</li>
<li><strong>运算符前后都需要保留一个空格</strong>，例如width: calc(100%-10px)</li>
</ul>
<h2 id="attr"><a href="#attr" class="headerlink" title="attr()"></a>attr()</h2><p>  返回选择元素的属性值<br>  在css2.1中attr()返回一个字符串；而在CSS3中attr()可以返回多种不同的类型。<br>例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">a</span><span class="selector-pseudo">:after</span> &#123;<span class="attribute">content</span>: <span class="string">" ("</span> <span class="built_in">attr</span>(href) <span class="string">")"</span>;&#125;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://github.com/Glooo"</span>&gt;</span>Github<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://glooo.fun/"</span>&gt;</span>我的博客<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>以上例子在每个链接后面插入内容</p>


<h2 id="linear-gradient"><a href="#linear-gradient" class="headerlink" title="linear-gradient()"></a>linear-gradient()</h2><ul>
<li><p>该函数用于创建一个线性渐变的“图像”。</p>
</li>
<li><p>为了创建一个线性渐变，你需要设置一个起始点和一个方向（指定为一个角度）的渐变效果。你还要定义终止色。终止色就是你想让Gecko去平滑的过渡，并且你必须指定至少两种，当然也会可以指定更多的颜色去创建更复杂的渐变效果。</p>
</li>
<li><p>CSS3</p>
<p>语法：background: linear-gradient(direction,color-stop1,color-stop2,…);<br><code>direction</code> 方向或角度（默认从上到下或180deg）。<br>to right (从左开始，到右)<br>to bottom right （从左上角到右下角）<br>90deg （顺时针为正）<br>0deg = to top<br>180deg = 不填方向（默认值）<br><code>color</code>可以是white等单词，也可以是<code>rgba()</code></p>
</li>
</ul>
<h2 id="CSS-radial-gradient-函数"><a href="#CSS-radial-gradient-函数" class="headerlink" title="CSS radial-gradient() 函数"></a>CSS radial-gradient() 函数</h2><p>  CSS3<br>  径向渐变<br>  必需设置两个终止色</p>
<p>  语法：<code>background: radial-gradient(shape size at position, start-color, ..., last-color);</code><br>    <code>shape</code> ellipse(默认)，椭圆<br>            circle 圆形<br>    <code>size</code>定义渐变的大小，可能值：<br>      farthest-corner (默认) : 指定径向渐变的半径长度为从圆心到离圆心最远的角<br>      closest-side ：指定径向渐变的半径长度为从圆心到离圆心最近的边<br>      closest-corner ： 指定径向渐变的半径长度为从圆心到离圆心最近的角<br>      farthest-side ：指定径向渐变的半径长度为从圆心到离圆心最远的边<br>    <code>position</code>定义渐变的位置。可能值：<br>      center（默认）：设置中间为径向渐变圆心的纵坐标值。<br>      top：设置顶部为径向渐变圆心的纵坐标值。<br>      bottom：设置底部为径向渐变圆心的纵坐标值。</p>
<h2 id="CSS-repeating-linear-gradient-函数"><a href="#CSS-repeating-linear-gradient-函数" class="headerlink" title="CSS repeating-linear-gradient() 函数"></a>CSS repeating-linear-gradient() 函数</h2><p>  CSS3<br>  多一个百分比（位置，100%为div高度或宽度）<br>  <code>background: repeating-linear-gradient(red, yellow 10%, green 20%);</code></p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue新建项目</title>
    <url>/vue/vuePro-init/</url>
    <content><![CDATA[<h1 id="Mac下搭建Vue环境"><a href="#Mac下搭建Vue环境" class="headerlink" title="Mac下搭建Vue环境"></a>Mac下搭建Vue环境</h1><h2 id="下载必需品"><a href="#下载必需品" class="headerlink" title="下载必需品"></a>下载必需品</h2><h3 id="Mac安装brew"><a href="#Mac安装brew" class="headerlink" title="Mac安装brew"></a>Mac安装brew</h3><p>  打开终端运行以下命令:<br>    <code>/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</code><br>  <code>brew -v</code>查看版本号<br>  <br>  当然，如果你已经是安装了homebrew的话，也是要更新下homebrew的，使用<code>brew update</code>。<br>  (更新这个，安装软件的时候也会先自动帮你更新homebrew)</p>
<h3 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h3><p>  下载地址：<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a>（选择mac os）<br>  <br>  选<code>LTS(Recomended For Most Users)</code>-<code>macOS Installer</code><br>  下载后直接点击安装<br>  安装完成后，<br>  <code>node -v</code>查看node.js版本号<br>  </p>
<h3 id="获取nodejs模块安装目录访问权限-（必须步骤）"><a href="#获取nodejs模块安装目录访问权限-（必须步骤）" class="headerlink" title="获取nodejs模块安装目录访问权限  （必须步骤）"></a>获取nodejs模块安装目录访问权限  （必须步骤）</h3><p>  <code>sudo chmod -R 777 /usr/local/lib/node_modules/</code></p>
<h3 id="安装npm"><a href="#安装npm" class="headerlink" title="安装npm"></a>安装npm</h3><p>npm是Nodejs下的包管理器。<br>安装好node.js就可以直接用npm了。<br>有的博客说要安装<strong>cnpm</strong>，用了国内的服务器，能加快下载速度。我建议大家用npm。</p>
<h3 id="安装webpack"><a href="#安装webpack" class="headerlink" title="安装webpack"></a>安装webpack</h3><p>命令行执行<code>npm install webpack -g</code><br>webpack: 它主要的用途是通过<code>CommonJS</code>的语法把所有浏览器端需要发布的静态资源做相应的准备，比如资源的<strong>合并</strong>和<strong>打包</strong>。</p>
<h3 id="安装vue-cli-（vue脚手架）"><a href="#安装vue-cli-（vue脚手架）" class="headerlink" title="安装vue-cli （vue脚手架）"></a>安装vue-cli （vue脚手架）</h3><p><code>sudo npm install vue-cli -g</code><br>用户生成Vue工程模板。（帮你快速开始一个vue的项目，也就是给你一套vue的结构，包含基础的依赖库，只需要 npm install就可以安装）。</p>
<p>以上如果安装过，则不需要再次安装。</p>
<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><h3 id="找一个文件目录"><a href="#找一个文件目录" class="headerlink" title="找一个文件目录"></a>找一个文件目录</h3><p>cd命令行进入要新建项目的目录，<br><code>cd 目录路径</code></p>
<h3 id="创建Vue项目"><a href="#创建Vue项目" class="headerlink" title="创建Vue项目"></a>创建Vue项目</h3><p>命令行输入<code>vue init webpack &lt;项目名&gt;</code> &lt;项目名&gt;必须为英文</p>



<p><code>Project name</code> 项目名称（必须为英文）<br><code>Project description</code> 项目描述（可填可不填）<br><code>Author</code> 作者（可填可不填）<br><code>Vue build</code> Runtime + Compiler / Runtime-only  </p>
<blockquote>
<p><code>Runtime Only</code>相比<code>Runtime+Compiler</code>更加轻量，但是缺点是不能够编译jsx，在vue源码中，无论是render函数，还是template最终都是编译成render函数进行渲染的，所以，使用<code>Runtime Only</code>有时需要自己手动配置<code>webpack</code>对模板语法进行编译。<br>常用的就是Runtime+Compiler，不需要自己手写render。<br>选Runtime + Compiler。</p>
</blockquote>

<p><code>Install vue-router?</code> Yes</p>


<p><code>Use ESlint to lint your code?</code> No<br>  注：Eslint 是规范代码格式的一种标准。例如 多人合作完成项目时，有人习惯于两个空格代表锁紧，有人习惯于四个空格代表缩进，Eslint做的就是统一标准。初学者可选择No。<br><code>Set up unit tests</code> No<br>  注：unit tests-单元测试。<br><code>Setup e2e tests with Nightwatch?</code> No<br>  注：e2e测试。<br><code>Should we run &#39;npm install&#39; for you after the project has been created? (recommended)</code> 选Yes, use NPM</p>
<p>接着</p>


<p>命令行进入vue-project文件夹<br><code>cd vue-project</code><br>执行命令<br><code>npm install</code><br>初始化项目，安装依赖。<br>下载好依赖的包后，执行<br><code>npm run dev</code><br>在浏览器输入相应地址，就可以出现以下界面：</p>

<p>查看代码<code>src/App.vue</code></p>


<p>此时，项目就搭建好了。</p>
<h3 id="新建页面"><a href="#新建页面" class="headerlink" title="新建页面"></a>新建页面</h3><p>添加路由并且新建页面<br>新建vue文件<br>我的在<code>/src/pages/index.vue</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 一个template里只能有一个div --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;&#123;data1&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  data()&#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;  <span class="comment">//记得data写在return&#123;&#125;中</span></span></span><br><span class="line"><span class="javascript">      data1: <span class="number">1</span>, <span class="comment">//注意是逗号','，不是分号';'</span></span></span><br><span class="line">      data2: [],</span><br><span class="line">      data3: &#123;a: 1,b: 2&#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">  &#125;, <span class="comment">//注意是逗号','，不是分号';'</span></span></span><br><span class="line">  methods: &#123;</span><br><span class="line">    fun1(params) &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.data1 = <span class="number">2</span> <span class="comment">//可以不写分号';'</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> data1 = <span class="number">5</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.data1)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(data1)</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted()&#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.fun1()</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>给页面添加路由：<br><code>/src/router/index.js</code></p>

<p>红圈里是我添加的代码。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="keyword">import</span> HelloWorld <span class="keyword">from</span> <span class="string">'@/components/HelloWorld'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> page2 = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/pages/index'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> page1 <span class="keyword">from</span> <span class="string">'@/pages/index'</span>  <span class="comment">// '@'代表src文件夹下,后缀'.vue'可以省略</span></span><br><span class="line"></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/'</span>,</span><br><span class="line">      name: <span class="string">'HelloWorld'</span>,</span><br><span class="line">      component: HelloWorld</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ,&#123;</span><br><span class="line">      path: <span class="string">'/index1'</span>,  <span class="comment">//浏览器地址栏拼接的路由地址</span></span><br><span class="line">      name: <span class="string">'Page1'</span>, <span class="comment">//注意是逗号分割</span></span><br><span class="line">      component: page1,</span><br><span class="line">      <span class="comment">// component: () =&gt; import('@/pages/index'),</span></span><br><span class="line">      <span class="comment">// component: page2</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>结果：</p>

<p>在.vue中写less(css预处理)<br>vue-cli 构建的项目默认是不支持 less 的，需要自己添加。</p>
<p>首选，安装 less 和 less-loader ，在项目目录下运行如下命令</p>
<p><code>npm install less less-loader --save-dev</code><br>然后再<code>npm run dev</code></p>
<h2 id="一些常用install命令"><a href="#一些常用install命令" class="headerlink" title="一些常用install命令"></a>一些常用install命令</h2><h3 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h3><p>  <code>npm install --save axios vue-axios</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js中添加一下代码</span></span><br><span class="line">  <span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line">  <span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line">  <span class="keyword">import</span> VueAxios <span class="keyword">from</span> <span class="string">'vue-axios'</span></span><br><span class="line"></span><br><span class="line">  Vue.use(VueAxios, axios)</span><br></pre></td></tr></table></figure>

<h3 id="less"><a href="#less" class="headerlink" title="less"></a>less</h3><p><code>npm install --save-dev less-loader less</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">'less'</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>在vue文件中的style标签上，有一个特殊的属性：scoped。当一个style标签拥有scoped属性时，它的CSS样式就只能作用于当前的组件，也就是说，该样式只能适用于当前组件元素。通过该属性，可以使得组件之间的样式不互相污染。如果一个项目中的所有style标签全部加上了scoped，相当于实现了样式的模块化。</p>
</blockquote>
<h3 id="elementUI"><a href="#elementUI" class="headerlink" title="elementUI"></a>elementUI</h3><p><code>npm i element-ui -S</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js中添加</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">'element-ui'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'element-ui/lib/theme-chalk/index.css'</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(ElementUI);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="vuex-状态管理"><a href="#vuex-状态管理" class="headerlink" title="vuex 状态管理"></a>vuex 状态管理</h3><p><code>npm install vuex --save</code></p>
<h1 id="Windows下搭建Vue环境"><a href="#Windows下搭建Vue环境" class="headerlink" title="Windows下搭建Vue环境"></a>Windows下搭建Vue环境</h1><p>命令行输入<code>vue init webpack &lt;项目名&gt;</code> &lt;项目名&gt;必须为英文</p>
<p>持续更新～</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue的Project</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 圣杯布局 &amp; 双飞翼布局</title>
    <url>/css/holy-doublewing/</url>
    <content><![CDATA[<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><p>圣杯布局和双飞翼布局是前端工程师需要日常掌握的重要布局方式。两者的功能相同，都是为了实现一个<strong>两侧宽度固定，中间宽度自适应的三栏布局</strong>。</p>


<p>圣杯布局来源于文章<a href="https://alistapart.com/article/holygrail/" target="_blank" rel="noopener">In Search of the Holy Grail</a>，而双飞翼布局来源于淘宝UED。虽然两者的实现方法略有差异，不过都遵循了以下要点：</p>
<ul>
<li>两侧宽度固定，中间宽度自适应</li>
<li>中间部分在DOM结构上优先，以便先行渲染</li>
<li>允许三列中的任意一列成为最高列</li>
<li>只需要使用一个额外的<code>&lt;div&gt;</code>标签</li>
</ul>
<p>下面我将依次介绍圣杯布局和双飞翼布局的实现方法，并在最后根据个人思考对原有方法做出一些修改，给出其它一些可行的方案。</p>
<h1 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h1><h2 id="DOM结构"><a href="#DOM结构" class="headerlink" title="DOM结构"></a>DOM结构</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"header"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"center"</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"left"</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"right"</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"footer"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>首先定义出整个布局的DOM结构，主体部分是由container包裹的center,left,right三列，其中center定义在最前面。</p>
<h2 id="CSS代码"><a href="#CSS代码" class="headerlink" title="CSS代码"></a>CSS代码</h2><p>假设左侧的固定宽度为200px，右侧的固定宽度为150px，则首先在container上设置：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#container</span> &#123;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">200px</span>; </span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="number">150px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为左右两列预留出相应的空间，得到如下示意图：</p>


<p>随后分别为三列设置宽度与浮动，同时对footer设置清除浮动：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#container</span> <span class="selector-class">.column</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#center</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#left</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#right</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">150px</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#footer</span> &#123;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>得到如下效果：</p>


<p>根据浮动的特性，由于<code>center</code>的宽度为100%，即占据了第一行的所有空间，所以<code>left</code>和<code>right</code>被“挤”到了第二行。</p>
<p>接下来的工作是将<code>left</code>放置到之前预留出的位置上，这里使用<strong>负外边距</strong>（nagetive margin）：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#left</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>; </span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>得到：</p>

<p>随后还需要使用定位(position)方法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#left</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>; </span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里使用<code>position: relative</code>和<code>right: 200px</code>将<code>left</code>的位置在原有位置基础上左移200px，以完成<code>left</code>的放置：</p>


<p>接下来放置right，只需添加一条声明即可：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#right</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">150px</span>; </span><br><span class="line">  <span class="attribute">margin-right</span>: -<span class="number">150px</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>得到最终的效果图：</p>


<p>至此，布局效果完成。不过还需要考虑最后一步，那就是页面的最小宽度：要想保证该布局效果正常显示，由于两侧都具有固定的宽度，所以需要给定页面一个最小的宽度，但这并不只是简单的200+150=350px。回想之前left使用了<code>position: relative</code>，所以就意味着在center开始的区域，还存在着一个left的宽度。所以页面的最小宽度应该设置为200+150+200=550px：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">550px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>综上所述，圣杯布局的CSS代码为：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">550px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#container</span> &#123;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">200px</span>; </span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="number">150px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#container</span> <span class="selector-class">.column</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#center</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#left</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>; </span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#right</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">150px</span>; </span><br><span class="line">  <span class="attribute">margin-right</span>: -<span class="number">150px</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#footer</span> &#123;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>关于圣杯布局的示例，可参考：<a href="https://litaooooo.github.io/page-examples/holy-grail.html" target="_blank" rel="noopener">圣杯布局</a></p>
<p>最后提醒一下很多朋友可能会忽略的小细节：在#center中，包含了一条声明width: 100%，这是中间栏能够做到自适应的关键。可能会有朋友认为不需要设置这条声明，因为觉得center在不设置宽度的情况下会默认将宽度设置为父元素(container)的100%宽度。但需要注意到，center是浮动元素，由于浮动具有包裹性，在不显式设置宽度的情况下会自动“收缩”到内容的尺寸大小。如果去掉width: 100%，则当中间栏不包含或者包含较少内容时，整个布局会“崩掉”，而达不到这样的效果：</p>


<h1 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h1><h2 id="DOM结构-1"><a href="#DOM结构-1" class="headerlink" title="DOM结构"></a>DOM结构</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"header"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"center"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"left"</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"right"</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"footer"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>双飞翼布局的DOM结构与圣杯布局的区别是用container仅包裹住center，另外将.column类从center移至container上。</p>
<h2 id="CSS代码-1"><a href="#CSS代码-1" class="headerlink" title="CSS代码"></a>CSS代码</h2><p>按照与圣杯布局相同的思路，首先设置各列的宽度与浮动，并且为左右两列预留出空间，以及为footer设置浮动清除：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.column</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#center</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">150px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#left</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#right</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">150px</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#footer</span> &#123;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>得到如下效果示意图：</p>


<p>以上代码将container,left,right设置为<code>float: left</code>，而在<code>container</code>内部，center由于没有设置浮动，所以其宽度默认为container的100%宽度，通过对其设置<code>margin-left</code>和<code>margin-right</code>为左右两列预留出了空间。</p>
<p>将left放置到预留位置：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#left</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>; </span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>得到：</p>

<p>将right放置到预留位置：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#right</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">150px</span>; </span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">150px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>得到最终效果：</p>

<p>最后计算最小页面宽度：由于双飞翼布局没有用到position:relative进行定位，所以最小页面宽度应该为200+150=350px。但是当页面宽度缩小到350px附近时，会挤占中间栏的宽度，使得其内容被右侧栏覆盖，如下所示：</p>

<p>因此在设置最小页面宽度时，应该适当增加一些宽度以供中间栏使用（假设为150px），则有：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">500px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>至此双飞翼布局大功告成！其布局整体代码为：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">500px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.column</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line"><span class="selector-id">#center</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">150px</span>;</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line"><span class="selector-id">#left</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>; </span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line"><span class="selector-id">#right</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">150px</span>; </span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">150px</span>;</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line"><span class="selector-id">#footer</span> &#123;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>关于双飞翼布局的示例，可参考：<a href="https://litaooooo.github.io/page-examples/double-wings.html" target="_blank" rel="noopener">双飞翼布局</a></p>
<h1 id="总结与思考"><a href="#总结与思考" class="headerlink" title="总结与思考"></a>总结与思考</h1><p>通过对圣杯布局和双飞翼布局的介绍可以看出，<br><strong>圣杯布局</strong>在DOM结构上显得更加直观和自然，且在日常开发过程中，更容易形成这样的DOM结构（通常<code>&lt;aside&gt;</code>和<code>&lt;article&gt;</code>,<code>&lt;section&gt;</code>一起被嵌套在<code>&lt;main&gt;</code>中）；<br>而<strong>双飞翼布局</strong>在实现上由于不需要使用定位，所以更加<strong>简洁</strong>，且<strong>允许的页面最小宽度通常比圣杯布局更小</strong>。</p>
<p>其实通过思考不难发现，两者在代码实现上都额外引入了一个<code>&lt;div&gt;</code>标签，其目的都是为了既能保证中间栏产生浮动（浮动后还必须显式设置宽度），又能限制自身宽度为两侧栏留出空间。</p>
<p>从这个角度出发，如果去掉额外添加的<code>&lt;div&gt;</code>标签，能否完成相同的布局呢？答案是肯定的，不过这需要在兼容性上做出牺牲：</p>
<p>DOM结构</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"header"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"center"</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"left"</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"right"</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"footer"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>去掉额外的<code>&lt;div&gt;</code>标签后，得到的DOM结构如上所示，基于双飞翼布局的实现思路，只需要在center上做出修改：</p>
<h2 id="使用calc"><a href="#使用calc" class="headerlink" title="使用calc()"></a>使用calc()</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.column</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="selector-id">#center</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">350px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过<code>calc()</code>可以十分方便地计算出center应该占据的自适应宽度，目前<code>calc()</code>支持到IE9。</p>
<h2 id="使用border-box"><a href="#使用border-box" class="headerlink" title="使用border-box"></a>使用border-box</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.column</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="selector-id">#center</span> &#123;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用border-box可以将center的整个盒模型宽度设置为父元素的100%宽度，此时再利用padding-left和padding-right可以自动得到中间栏的自适应宽度。不过需要注意的是，由于padding是盒子的一部分，所以padding部分会具有中间栏的背景色，当中间栏高于侧栏时，会出现这样的情况：</p>

<p>目前box-sizing支持到IE8。</p>
<h2 id="使用flex"><a href="#使用flex" class="headerlink" title="使用flex"></a>使用flex</h2><p>这里使用flex还是需要与圣杯布局相同的DOM结构，不过在实现上将更加简单：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- DOM结构 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"center"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>CSS代码如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#center</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#left</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">order</span>: -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#right</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">150px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>
<p>转载自：<a href="https://www.jianshu.com/p/81ef7e7094e8" target="_blank" rel="noopener">放羊的小桃桃</a>的简书</p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>前端技术</tag>
      </tags>
  </entry>
  <entry>
    <title>在Github仓库中创建文件夹</title>
    <url>/GitHub/github-newfolder/</url>
    <content><![CDATA[<p>很多时候，在GitHub仓库中创建文件夹都是在本地创建好，然后提交到GitHub仓库中，这里的操作很不方便而且还容易出错。<br>这里有一种方法直接用鼠标和<code>/</code>就可以在GitHub仓库创建文件夹啦。<br><strong>第一步：</strong><br>在创建好的仓库中点击<code>Create New File</code></p>

<p><strong>第二步：</strong><br>在输入框中输入你的<strong>文件夹名</strong></p>

<p><strong>在输入一个<code>/</code>，它自动就会为你生成一个文件夹。</strong></p>

<p><strong><em>注意</em></strong>：由于GitHub不允许创建空文件夹，所以需要在创建的文件夹下创建一个文件。</p>

<p><strong>第三步：</strong><br>拉到下面点击<code>Commit new file</code></p>

<p>创建成功！</p>



<p><strong><em>注意</em></strong>：如果删除了文件夹里的文件，文件夹也会消失（GitHub不允许存在空文件夹）。<br>这样是不是比命令行上传方便了很多^_^</p>
]]></content>
      <categories>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS,JS多余（超出）文本改省略号...</title>
    <url>/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/convert-ellipsis/</url>
    <content><![CDATA[<h2 id="CSS把超出文本改成省略号"><a href="#CSS把超出文本改成省略号" class="headerlink" title="CSS把超出文本改成省略号"></a>CSS把超出文本改成省略号</h2><p><strong>单行文本</strong><br>二话不说，先上代码</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.ellipsis</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;      <span class="comment">/* 固定宽度 */</span></span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis; <span class="comment">/* 超出部分显示省略号 */</span></span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;     <span class="comment">/* 不换行 */</span></span><br><span class="line">  <span class="attribute">background</span>: white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p><strong>多行文本</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.ellipsis-more</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;          <span class="comment">/* 必须是固定宽度值 */</span></span><br><span class="line">  <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">  <span class="attribute">-webkit-box-orient</span>: vertical;</span><br><span class="line">  <span class="attribute">-webkit-line-clamp</span>: <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">background</span>: white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>因使用了WebKit的CSS扩展属性，该方法适用于WebKit浏览器及移动端。</p>
<ul>
<li><p><code>-webkit-line-clamp</code> 用来限制在一个块元素显示的文本的行数,这是一个不规范的属性（unsupported WebKit property），它没有出现在 CSS 规范草案中。</p>
</li>
<li><p><code>display: -webkit-box</code> 将对象作为弹性伸缩盒子模型显示 。</p>
</li>
<li><p><code>-webkit-box-orient</code> 设置或检索伸缩盒对象的子元素的排列方式 。</p>
</li>
<li><p><code>text-overflow: ellipsis</code> 以用来多行文本的情况下，用省略号“…”隐藏超出范围的文本。</p>
</li>
</ul>
<p><strong>伪元素法</strong>：<br>用<code>::after</code>来做：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>WebKit Browsers will clamp the number of lines </span><br><span class="line">in this paragraph to 2. Lorem ipsum dolor sit amet, </span><br><span class="line">consectetur adipisicing elit, sed do eiusmod tempor </span><br><span class="line">incididunt ut labore et dolore magna aliqua. Ut enim </span><br><span class="line">ad minim veniam, quis nostrud exercitation ullamco </span><br><span class="line">laboris nisi ut aliquip ex ea commodo consequat. </span><br><span class="line">Duis aute irure dolor in reprehenderit in voluptate </span><br><span class="line">velit esse cillum dolore eu fugiat nulla pariatur. </span><br><span class="line">Excepteur sint occaecat cupidatat non proident, </span><br><span class="line">sunt in culpa qui officia deserunt mollit anim id est </span><br><span class="line">laborum.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line">    <span class="attribute">line-height</span>:<span class="number">1.4em</span>;</span><br><span class="line">    <span class="comment">/* 3 times the line-height to show 3 lines */</span></span><br><span class="line">    <span class="attribute">height</span>:<span class="number">4.2em</span>;</span><br><span class="line">    <span class="attribute">overflow</span>:hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">"..."</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>:bold;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">bottom</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>:<span class="number">0</span> <span class="number">20px</span> <span class="number">1px</span> <span class="number">45px</span>;</span><br><span class="line">    <span class="attribute">background</span>:<span class="built_in">url</span>(http://css88.b0.upaiyun.com/css88/<span class="number">2014</span>/<span class="number">09</span>/ellipsis_bg.png) repeat-y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="JS改省略号"><a href="#JS改省略号" class="headerlink" title="JS改省略号"></a>JS改省略号</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文本超长则...</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>str 需要处理的字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>length 中文或中文符号占两个字符长度，英文或英文符号占一个字符长度</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;*&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ellipsisText</span>(<span class="params">str, length</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> t = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> len = calcStrLen(str);</span><br><span class="line">  <span class="keyword">if</span> (len &gt; length) &#123;</span><br><span class="line">    t = <span class="string">`<span class="subst">$&#123;getPartStr(str, length - <span class="number">1</span>)&#125;</span>...`</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//计算字符串长度</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calcStrLen</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> len = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (!str || !str.length) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> c <span class="keyword">in</span> str) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isCn(str[c]) || isSymbol(str[c]) || (<span class="string">"A"</span> &lt;= c &amp;&amp; <span class="string">"Z"</span> &gt;= c)) &#123;</span><br><span class="line">      len += <span class="number">2</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      len++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 是否是中文</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isCn</span>(<span class="params">c</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> is_cn = <span class="regexp">/[\u4E00-\u9FA5\uF900-\uFA2D]/</span>;</span><br><span class="line">  <span class="keyword">return</span> is_cn.test(c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 是否标点符号</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isSymbol</span>(<span class="params">c</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> is_symbol = <span class="regexp">/[\u3002|\uff1f|\uff01|\uff0c|\u3001|\uff1b|\uff1a|\u201c|\u201d|\u2018|\u2019|\uff08|\uff09|\u300a|\u300b|\u3008|\u3009|\u3010|\u3011|\u300e|\u300f|\u300c|\u300d|\ufe43|\ufe44|\u3014|\u3015|\u2026|\u2014|\uff5e|\ufe4f|\uffe5]/</span>;</span><br><span class="line">  <span class="keyword">return</span> is_symbol.test(c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取有效部分字符串</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPartStr</span>(<span class="params">str, len, right = false</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!str) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">let</span> t = len;</span><br><span class="line">  <span class="keyword">let</span> s = str.split(<span class="string">""</span>);</span><br><span class="line">  <span class="keyword">let</span> result = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">while</span> (t &gt; <span class="number">0</span> &amp;&amp; s.length) &#123;</span><br><span class="line">    <span class="keyword">let</span> c;</span><br><span class="line">    <span class="keyword">if</span> (right) &#123;</span><br><span class="line">      c = s.pop();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      c = s.shift();</span><br><span class="line">    &#125;</span><br><span class="line">    t -= calcStrLen(c);</span><br><span class="line">    result += c;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> right</span><br><span class="line">    ? result</span><br><span class="line">      .split(<span class="string">""</span>)</span><br><span class="line">      .reverse()</span><br><span class="line">      .join(<span class="string">""</span>)</span><br><span class="line">    : result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<p>持续更新～</p>
<a id="more"></a>
<p>参考<a href="https://blog.csdn.net/lyt_angularjs/article/details/90635802#js_24" target="_blank" rel="noopener">漫疏狂</a>的Blog</p>
]]></content>
      <categories>
        <category>前端技术</category>
      </categories>
      <tags>
        <tag>前端技术</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-04 寻找两个有序数组的中位数</title>
    <url>/%E7%AE%97%E6%B3%95/leetcode-04/</url>
    <content><![CDATA[<p>给定两个大小为 m 和 n 的有序数组 nums1 和 nums2。</p>
<p>请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为 <code>O(log(m + n))</code>。</p>
<p>你可以假设 nums1 和 nums2 不会同时为空。</p>
<p>难度：困难</p>
<p>示例 1:</p>
<p>&emsp;<code>nums1 = [1, 3]</code><br>&emsp;<code>nums2 = [2]</code><br>&emsp;则中位数是 <code>2.0</code></p>
<p>示例 2:</p>
<p>&emsp;<code>nums1 = [1, 2]</code><br>&emsp;<code>nums2 = [3, 4]</code><br>&emsp;则中位数是 <code>(2 + 3)/2 = 2.5</code></p>
<p>简单思路：</p>
<ul>
<li>把两个数组<code>nums1</code>和<code>nums2</code>合并到<code>num数组</code>中</li>
<li>排序合并后的数组<code>num</code></li>
<li>分奇偶两种情况求出<code>num数组</code>的中位数<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums1</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums2</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findMedianSortedArrays = <span class="function"><span class="keyword">function</span>(<span class="params">nums1, nums2</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">let</span> num1 = [...nums1, ...nums2];</span><br><span class="line">        <span class="keyword">let</span> num = num1.sort(<span class="function">(<span class="params">a,b</span>) =&gt;</span> &#123;<span class="keyword">return</span> a-b;&#125;);</span><br><span class="line">        <span class="keyword">let</span> m = <span class="built_in">parseInt</span>((num.length) / <span class="number">2</span>);    </span><br><span class="line">        <span class="keyword">let</span> l =num.length;</span><br><span class="line">        <span class="keyword">if</span> (l % <span class="number">2</span> == <span class="number">0</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> (num[m] + num[m<span class="number">-1</span>])/<span class="number">2</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> num[m];</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>尝试用二分查找，分治算法解</strong></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>数组</tag>
        <tag>中位数</tag>
        <tag>数组合并</tag>
        <tag>ES6的扩展运算符(...)</tag>
        <tag>数组排序sort()</tag>
      </tags>
  </entry>
  <entry>
    <title>sudo nginx -s reload报错丢失nginx.pid</title>
    <url>/nginx/nginx-s-reload/</url>
    <content><![CDATA[<p>我的是MAC<br>安装nginx后，放假就把电脑关机了，重启电脑以后启动nginx(<code>sudo nginx -s reload</code>)发现nginx.pid被删除了:</p>


<p><code>nginx: [error] open() &quot;/usr/local/Cellar/nginx/1.17.2/logs/nginx.pid&quot; failed (2: No such file or directory)</code></p>
<p><strong>切换到<code>/usr/local/Cellar/nginx/1.17.2/logs</code>文件夹下创建nginx.pid文件</strong><br><strong>然后在<code>/usr/local/Cellar/nginx/1.17.2/logs</code>下执行<code>sudo nginx -c /usr/local/etc/nginx/nginx.conf</code></strong></p>
<p>然后发现<code>/usr/local/Cellar/nginx/1.17.2/logs/nginx.pid</code>中有了一行pid（我的是五位数字pid）</p>
<p><strong>接着，启动nginx<code>(sudo nginx -s reload)</code></strong><br>  注：password是开机密码</p>
<p>启动项目<code>npm run serve</code>，发现好使了</p>
]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-03 无重复字符的最长子串</title>
    <url>/%E7%AE%97%E6%B3%95/leetcode-03/</url>
    <content><![CDATA[<h3>题目</h3>
给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。

<p>示例 1:<br>输入: “abcabcbb”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “abc”，所以其长度为 3。</p>
<p>示例 2:<br>输入: “bbbbb”<br>输出: 1<br>解释: 因为无重复字符的最长子串是 “b”，所以其长度为 1。</p>
<p>示例 3:<br>输入: “pwwkew”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “wke”，所以其长度为 3。<br>     请注意，你的答案必须是 子串 的长度，”pwke” 是一个子序列，不是子串。</p>
<a id="more"></a>
<h3>子串和子序列</h3>
&emsp;子串：串中任意个**连续**的字符组成的子序列称为该串的子串。
&emsp;子序列：串中删除任意个字符的串组成的序列(它的顺序必须按照在原串中的顺序排列)。

<h3>滑动窗口法</h3>
**滑动窗口**就是在字符串内设置前面的索引i和后边的索引j，i和j组成了区间`[i,j)`(左闭右开)，代表滑块，在字符串中滑动，寻找出最合适的答案。
代码思路：
&emsp;设置str存储`滑动窗口字符串`；
&emsp;对母串进行遍历，如果字符没有在str中，就加到str中；如果存在，则i++，str相应变化；
&emsp;每次遍历，将str.length 与最大长度比较，留最大的长度。
&emsp;遍历一次后，将maxLength输出，最长子串也存在str中。
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> lengthOfLongestSubstring = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>,j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> n = s.length</span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">''</span></span><br><span class="line">    <span class="keyword">let</span> str1 = <span class="string">''</span></span><br><span class="line">    <span class="keyword">let</span> maxLength = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(j&lt;n) &#123; <span class="comment">//下面的if是可以保证i小于等于j</span></span><br><span class="line">        <span class="keyword">if</span>(str.indexOf(s[j]) === <span class="number">-1</span>) &#123;</span><br><span class="line">            str += s[j]</span><br><span class="line">            j++;</span><br><span class="line">            length++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            i++;</span><br><span class="line">            length--;</span><br><span class="line">            str1 = str.split(<span class="string">""</span>)</span><br><span class="line">            str1.splice(<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">            str = str1.join(<span class="string">''</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(length &gt; maxLength) &#123;</span><br><span class="line">            maxLength = length;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxLength</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3>优化的滑动窗口</h3>
思路：
&emsp;遍历同上，有点小改动
&emsp;遍历时，如果字符重复，直接让滑块前面的i跳到str中重复的那个子串的下一个，也就是`i=str.indexOf(s[j],i)+1`,也就是发现重复时的str区间为`[str.indexOf(s[j],i)+1 , j+1)`（`str.indexOf(s[j],i)`为原str中被发现重复字符的位置，`s[j]`为发现重复的字符），这样可以跳过重复的一些步骤（i本来每次++，这下一次就到了重复的那个字符的位置）

<p><strong>普及下<code>indexOf(String,index)</code></strong><br>第一个参数 必需，一个字符或者字符串；<br>第二个参数 可选，开始查找的位置；<br>返回值 查找到则返回下标，未找到则返回-1（从前往后找）。<br><strong><code>lastIndexOf(String,index)</code></strong><br>第一个参数 必需，一个字符或字符串，顺序是对的；<br>第二个参数 可选，<code>0</code>代表从第1个往前找，<code>1</code>代表从第2个往前找，找到了就返回下标；<br>返回值 和indexOf一样返回下标，未找到返回-1。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> lengthOfLongestSubstring = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>,j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> n = s.length</span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">''</span></span><br><span class="line">    <span class="keyword">let</span> maxLength = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(j&lt;n) &#123;</span><br><span class="line">        <span class="keyword">if</span>(str.indexOf(s[j]) === <span class="number">-1</span>) &#123;</span><br><span class="line">            str += s[j]</span><br><span class="line">            length++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            i = s.indexOf(s[j],i)+<span class="number">1</span></span><br><span class="line">            length = j-i+<span class="number">1</span></span><br><span class="line">            str = s.slice(i,j+<span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        j++;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(length &gt; maxLength) &#123;</span><br><span class="line">            maxLength = length;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxLength</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters" target="_blank" rel="noopener">https://leetcode-cn.com/problems/longest-substring-without-repeating-characters</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>滑动窗口</tag>
      </tags>
  </entry>
  <entry>
    <title>NexT的搜索错误Input is not proper UTF-8, indicate encoding</title>
    <url>/hexo/hexo-search-not-utf8/</url>
    <content><![CDATA[<p>hexo的NexT主题部署上去时点搜索，有时会出错</p>

<p>…</p>
<a id="more"></a>

<p>hexo的NexT主题，<br>点搜索时，</p>

<p>一直转圈，</p>

<p>一看Network，</p>



<p>没啥毛病，<br>点开一看，</p>

<p>报错了，<br>网页也没啥问题啊，<br>就是search.xml出毛病了，<br>一看Response，<br>也看不出啥异常，<br>网上一搜，<br>无疑，<br>是隐藏的编码错误了，</p>
<p><strong>用到的工具：</strong><br>可以进行正则替换的编辑器(以vscode为例)<br>上面错误提示处写着：<br><code>Bytes: 0x08 0x78 0x4E 0x20</code><br><strong>解决方法：</strong><br>输入<code>\x08</code><br>选中正则表达式搜索的按钮：</p>

<p>一回车，</p>


<p>发现有个隐藏空格，<br>删掉就好啦～<br>原因嘛，<br>\u0008 是退格键，而且应该是出现在 .md 文件里的。<br>可能跟编辑器或者输入法有关系，没有查明是什么原因。<br>最后，<br>也非常感谢大佬「lujjjh」<a href="https://www.v2ex.com/t/298727" target="_blank" rel="noopener">https://www.v2ex.com/t/298727</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-38 报数</title>
    <url>/%E7%AE%97%E6%B3%95/leetcode-38/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>报数序列是一个整数序列，按照其中的整数的顺序进行报数，得到下一个数。其前五项如下：</p>
<p>&emsp;1–1<br>&emsp;2–11<br>&emsp;3–21<br>&emsp;4–1211<br>&emsp;5–111221</p>
<p><code>1</code> 被读作  “one 1”  (“一个一”) , 即 11。<br><code>11</code> 被读作 “two 1s” (“两个一”）, 即 21。<br><code>21</code> 被读作 “one 2”,  “one 1” （”一个二” ,  “一个一”) , 即 1211。</p>
<p>给定一个正整数 n（1 ≤ n ≤ 30），输出报数序列的第 n 项。</p>
<p>注意：整数顺序将表示为一个字符串。</p>
<p>示例 1:<br>  &emsp;输入: <code>1</code><br>  &emsp;输出: <code>&quot;1&quot;</code></p>
<p>示例 2:<br>  &emsp;输入: <code>4</code><br>  &emsp;输出: <code>&quot;1211&quot;</code></p>
<h1 id="解法一-递归"><a href="#解法一-递归" class="headerlink" title="解法一 递归"></a>解法一 递归</h1><p>从n=1算n=2的输出，从n=2算n=3的输出…<br>必然用递归可解。<br>每次递归都对前一个的字符串做处理，然后得到新的字符串，然后循环遍历该字符串计算得出结果。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> countAndSay = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n===<span class="number">1</span>) <span class="keyword">return</span> <span class="string">"1"</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> str =  countAndSay(n<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">var</span> temp = str[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">var</span> ans = <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;str.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (str[i]===temp) count++;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                ans += <span class="string">''</span> + count + temp;</span><br><span class="line">                temp = str[i];</span><br><span class="line">                count = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i===str.length<span class="number">-1</span>) ans += <span class="string">''</span> + count + temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h1><p>递归都有了，<br>那就是循环-&gt;判断-&gt;组合-&gt;push呗</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">n</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> countAndSay = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [<span class="string">'1'</span>]</span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">let</span> str3 = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">let</span> number = <span class="number">-1</span>;<span class="comment">//数字</span></span><br><span class="line">    <span class="keyword">let</span> num = <span class="number">0</span>;<span class="comment">//数量</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>;i &lt; <span class="number">30</span>;i++) &#123;</span><br><span class="line">        str = arr[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>;j&lt;str.length;j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(str.length === <span class="number">1</span>) &#123;</span><br><span class="line">                str3 = <span class="string">'11'</span></span><br><span class="line">            &#125;         </span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(j === <span class="number">0</span>) &#123;</span><br><span class="line">                    num ++;</span><br><span class="line">                    number = str[<span class="number">0</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(str[j] == number) &#123;</span><br><span class="line">                        num ++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        str3 += num + number;</span><br><span class="line">                        number = str[j];</span><br><span class="line">                        num = <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(num != <span class="number">0</span>) &#123;</span><br><span class="line">            str3 +=  num + number;</span><br><span class="line">            num = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        arr.push(str3);</span><br><span class="line">        str3 = <span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr[n<span class="number">-1</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="解法三：简单粗暴"><a href="#解法三：简单粗暴" class="headerlink" title="解法三：简单粗暴"></a>解法三：简单粗暴</h1><p>不用说，一看就懂了～</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> countAndSay = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> count = &#123;</span><br><span class="line">		<span class="number">1</span>:<span class="string">"1"</span>,</span><br><span class="line">		<span class="number">2</span>:<span class="string">"11"</span>,</span><br><span class="line">		<span class="number">3</span>:<span class="string">"21"</span>,</span><br><span class="line">		<span class="number">4</span>:<span class="string">"1211"</span>,</span><br><span class="line">		<span class="number">5</span>:<span class="string">"111221"</span>,</span><br><span class="line">		<span class="number">6</span>:<span class="string">"312211"</span>,</span><br><span class="line">		<span class="number">7</span>:<span class="string">"13112221"</span>,</span><br><span class="line">		<span class="number">8</span>:<span class="string">"1113213211"</span>,</span><br><span class="line">		<span class="number">9</span>:<span class="string">"31131211131221"</span>,</span><br><span class="line">		<span class="number">10</span>:<span class="string">"13211311123113112211"</span>,</span><br><span class="line">		<span class="number">11</span>:<span class="string">"11131221133112132113212221"</span>,</span><br><span class="line">		<span class="number">12</span>:<span class="string">"3113112221232112111312211312113211"</span>,</span><br><span class="line">		<span class="number">13</span>:<span class="string">"1321132132111213122112311311222113111221131221"</span>,</span><br><span class="line">		<span class="number">14</span>:<span class="string">"11131221131211131231121113112221121321132132211331222113112211"</span>,</span><br><span class="line">		<span class="number">15</span>:<span class="string">"311311222113111231131112132112311321322112111312211312111322212311322113212221"</span>,</span><br><span class="line">		<span class="number">16</span>:<span class="string">"132113213221133112132113311211131221121321131211132221123113112221131112311332111213211322211312113211"</span>,</span><br><span class="line">		<span class="number">17</span>:<span class="string">"11131221131211132221232112111312212321123113112221121113122113111231133221121321132132211331121321231231121113122113322113111221131221"</span>,</span><br><span class="line">		<span class="number">18</span>:<span class="string">"31131122211311123113321112131221123113112211121312211213211321322112311311222113311213212322211211131221131211132221232112111312111213111213211231131122212322211331222113112211"</span>,</span><br><span class="line">		<span class="number">19</span>:<span class="string">"1321132132211331121321231231121113112221121321132122311211131122211211131221131211132221121321132132212321121113121112133221123113112221131112311332111213122112311311123112111331121113122112132113213211121332212311322113212221"</span>,</span><br><span class="line">		<span class="number">20</span>:<span class="string">"11131221131211132221232112111312111213111213211231132132211211131221131211221321123113213221123113112221131112311332211211131221131211132211121312211231131112311211232221121321132132211331121321231231121113112221121321133112132112312321123113112221121113122113121113123112112322111213211322211312113211"</span>,</span><br><span class="line">		<span class="number">21</span>:<span class="string">"311311222113111231133211121312211231131112311211133112111312211213211312111322211231131122211311122122111312211213211312111322211213211321322113311213212322211231131122211311123113223112111311222112132113311213211221121332211211131221131211132221232112111312111213111213211231132132211211131221232112111312211213111213122112132113213221123113112221131112311311121321122112132231121113122113322113111221131221"</span>,</span><br><span class="line">		<span class="number">22</span>:<span class="string">"132113213221133112132123123112111311222112132113311213211231232112311311222112111312211311123113322112132113213221133122112231131122211211131221131112311332211211131221131211132221232112111312111213322112132113213221133112132113221321123113213221121113122123211211131221222112112322211231131122211311123113321112131221123113111231121113311211131221121321131211132221123113112211121312211231131122211211133112111311222112111312211312111322211213211321322113311213211331121113122122211211132213211231131122212322211331222113112211"</span>,</span><br><span class="line">		<span class="number">23</span>:<span class="string">"111312211312111322212321121113121112131112132112311321322112111312212321121113122112131112131221121321132132211231131122211331121321232221121113122113121113222123112221221321132132211231131122211331121321232221123113112221131112311332111213122112311311123112112322211211131221131211132221232112111312211322111312211213211312111322211231131122111213122112311311221132211221121332211213211321322113311213212312311211131122211213211331121321123123211231131122211211131221131112311332211213211321223112111311222112132113213221123123211231132132211231131122211311123113322112111312211312111322212321121113122123211231131122113221123113221113122112132113213211121332212311322113212221"</span>,</span><br><span class="line">		<span class="number">24</span>:<span class="string">"3113112221131112311332111213122112311311123112111331121113122112132113121113222112311311221112131221123113112221121113311211131122211211131221131211132221121321132132212321121113121112133221123113112221131112311332111213213211221113122113121113222112132113213221232112111312111213322112132113213221133112132123123112111311222112132113311213211221121332211231131122211311123113321112131221123113112221132231131122211211131221131112311332211213211321223112111311222112132113212221132221222112112322211211131221131211132221232112111312111213111213211231132132211211131221232112111312211213111213122112132113213221123113112221133112132123222112111312211312112213211231132132211211131221131211132221121311121312211213211312111322211213211321322113311213212322211231131122211311123113321112131221123113112211121312211213211321222113222112132113223113112221121113122113121113123112112322111213211322211312113211"</span>,</span><br><span class="line">		<span class="number">25</span>:<span class="string">"132113213221133112132123123112111311222112132113311213211231232112311311222112111312211311123113322112132113212231121113112221121321132132211231232112311321322112311311222113111231133221121113122113121113221112131221123113111231121123222112132113213221133112132123123112111312111312212231131122211311123113322112111312211312111322111213122112311311123112112322211211131221131211132221232112111312111213111213211231132132211211131221232112111312212221121123222112132113213221133112132123123112111311222112132113213221132213211321322112311311222113311213212322211211131221131211221321123113213221121113122113121132211332113221122112133221123113112221131112311332111213122112311311123112111331121113122112132113121113222112311311221112131221123113112221121113311211131122211211131221131211132221121321132132212321121113121112133221123113112221131112212211131221121321131211132221123113112221131112311332211211133112111311222112111312211311123113322112111312211312111322212321121113121112133221121321132132211331121321231231121113112221121321132122311211131122211211131221131211322113322112111312211322132113213221123113112221131112311311121321122112132231121113122113322113111221131221"</span>,</span><br><span class="line">		<span class="number">26</span>:<span class="stringspan>,</span><br><span class="line">		<span class="number">27</span>:<span class="stringspan>,</span><br><span class="line">		<span class="number">28</span>:<span class="stringspan>,</span><br><span class="line">		<span class="number">29</span>:<span class="stringspan>,</span><br><span class="line">		<span class="number">30</span>:<span class="stringspan>,</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> count[n]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>提示：</p>
<ol>
<li>The following are the terms from n=1 to n=10 of the count-and-say sequence:</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> 1.     1</span><br><span class="line"> 2.     11</span><br><span class="line"> 3.     21</span><br><span class="line"> 4.     1211</span><br><span class="line"> 5.     111221 </span><br><span class="line"> 6.     312211</span><br><span class="line"> 7.     13112221</span><br><span class="line"> 8.     1113213211</span><br><span class="line"> 9.     31131211131221</span><br><span class="line">10.     13211311123113112211</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>To generate the nth term, just count and say the n-1th term.</li>
</ol>
<a id="more"></a>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/count-and-say" target="_blank" rel="noopener">https://leetcode-cn.com/problems/count-and-say</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>顺时针遍历同阶二维数组(腾讯笔试)</title>
    <url>/%E7%AE%97%E6%B3%95/clockTraversal/</url>
    <content><![CDATA[<p>顺时针从外向内遍历一个 NxN 的二维数组<br>例如:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [</span><br><span class="line">  [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">  [ <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>],</span><br><span class="line">  [ <span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>],</span><br><span class="line">  [<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>&emsp;遍历后数组为:<br>&emsp;<code>[1, 2, 3, 4, 8, 12, 16, 15, 14, 13, 9, 5, 6, 7, 11, 10]</code></p>
<p><strong><em>思路</em></strong>：</p>
<ol>
<li>数组不存在返回false；</li>
<li>每一圈循环的条件是起始坐标(把圈的左上角的位置当作每一圈起始位置)i和j分别乘以2均小于数组行列数(arr.length);</li>
<li>向四个方向遍历，分四种情况，每种情况各自一个for循环。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clockTraversal</span>(<span class="params">matrix</span>)</span>&#123;  </span><br><span class="line"><span class="keyword">if</span>(!matrix)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> row=matrix.length;</span><br><span class="line">    <span class="keyword">let</span> col=matrix[<span class="number">0</span>].length;</span><br><span class="line">    <span class="keyword">let</span> start=<span class="number">0</span>,arr=[]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(row&gt;start*<span class="number">2</span>&amp;&amp;col&gt;start*<span class="number">2</span>)&#123;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">let</span> row1 = matrix.length;</span><br><span class="line">      <span class="keyword">let</span> col1 = matrix[<span class="number">0</span>].length;</span><br><span class="line">      <span class="keyword">let</span> topS = start,topE = col1 -start;</span><br><span class="line">      <span class="comment">//top</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> i = topS;i&lt;topE;i++) &#123;</span><br><span class="line">        arr.push(matrix[topS][i])</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> rightS = start + <span class="number">1</span></span><br><span class="line">      <span class="keyword">let</span> rightE = row1 - start;</span><br><span class="line">      <span class="comment">//right</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> i = rightS;i&lt;rightE;i++) &#123;</span><br><span class="line">        arr.push(matrix[i][topE<span class="number">-1</span>])</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">let</span> bottomS = topE <span class="number">-2</span>;</span><br><span class="line">      <span class="keyword">let</span> bottomE = topS;</span><br><span class="line">      <span class="comment">//bottom</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> i = bottomS;i &gt;= bottomE&amp;&amp;rightS!=rightE;i--) &#123;</span><br><span class="line">        arr.push(matrix[rightE<span class="number">-1</span>][i])</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">let</span> leftS = rightE<span class="number">-2</span>,leftE = start + <span class="number">1</span>;</span><br><span class="line">      <span class="comment">//left</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> i = leftS;i&gt;=leftE&amp;&amp;bottomS!=bottomE<span class="number">-1</span>;i--) &#123;</span><br><span class="line">        arr.push(matrix[i][topS])</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      start++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>腾讯笔试</tag>
      </tags>
  </entry>
  <entry>
    <title>“==”和“===”的恨(区别)与爱(类型转换)</title>
    <url>/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/equal2-3/</url>
    <content><![CDATA[<h1 id><a href="#" class="headerlink" title="=="></a><code>==</code></h1><p><code>==</code>比较松散，进行类型转换之后判断。 <code>10 == &quot;10&quot;</code>，结果肯定是<code>true</code>，因为这个过程”10”会被转换为一个数字类型再与10进行判断，<code>null == undefined</code>  <code>&quot;&quot; == 0</code> 等等。<br>但是 <code>&quot;&quot; == null</code> 是false的  因为<code>&quot;&quot;</code>是一个空字符串基本类型， <code>null</code>代表空对象，<code>&quot;&quot;</code>空字符串是String类型，存放于栈中已经分配内存空间，内存空间里面的值是一个空字符串。null代表是一个空对象还没有分配内存空间。有空间也会存放于堆中，所以无论怎么转换也不会相等。</p>
<h1 id="-1"><a href="#-1" class="headerlink" title="==="></a><code>===</code></h1><p><code>===</code> 是指严格等于，在判断时不会做任何类型转换。实际逻辑中建议使用严格等于，减少类型转换判断比较准确。 </p>
<h1 id="强制类型转换-amp-隐式类型转换"><a href="#强制类型转换-amp-隐式类型转换" class="headerlink" title="强制类型转换 &amp; 隐式类型转换"></a>强制类型转换 &amp; 隐式类型转换</h1><p>所谓类型转换，分为强制类型转换和隐式类型转换：</p>
<h2 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h2><p>强制类型转换也就是使用代码强制地把一种类型的数据转换成另一种类型的数据，比如<code>parseInt</code>,<code>parseFloat</code>,<code>Number()</code>,<code>String()</code>,<code>Boolean()</code>等等…</p>
<h2 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h2><p>隐式类型转换也就是执行的时候解析器自己帮我们转换的</p>
<p>if语句内的判断，逻辑运算符，比如 <code>10 &amp;&amp; 0</code> 就等于<code>0</code>，<code>&amp;&amp;</code>运算符两边要不是布尔型的就会将先两边转换为布尔型的值，只有都是真的返回前面的值，有一个为假就返回后面的值，<code>||</code>则不一样，有真的就返回真的，都是假就返回后面的，也就是判断下第一个值是真是假，为真就返回，不为真就返回后面的数，也会进行类型转换。<br><strong>小技巧</strong>：判断一个值强制转换为Boolean类型时是真是假，就用<code>!!</code>来判断即可。</p>
<p><strong>一些类型转换的小用法</strong>：</p>
<ol>
<li>把一个数字转换为字符串类型，<code>100+&quot;&quot;</code>，让数字加上一个空字符串就会隐式转换为字符串。<code>parseInt</code>转换字符串时会在第一个不是数字的字符时停止将前面的字符串转换为数字，忽略后面的信息。</li>
<li>将数字样式的字符串转换为数字类型，例：<code>&quot;100&quot; - 0</code>就可以完成转换。</li>
</ol>
<p>在if语句中，判断条件的值为 <code>0</code>,<code>&quot;&quot;</code>,<code>NaN</code>,<code>false</code>为假。</p>
<a id="more"></a>
<p> 转载自<b>LLLMX</b>大佬的Blog<br> 原文链接：<br> <a href="https://www.cnblogs.com/lllmx/p/8144954.html" target="_blank" rel="noopener">https://www.cnblogs.com/lllmx/p/8144954.html</a></p>
]]></content>
      <categories>
        <category>前端技术</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>Git branch &amp;&amp; Git checkout常见用法</title>
    <url>/Git/git-br-co/</url>
    <content><![CDATA[<ul>
<li><p><strong>Git branch</strong></p>
<p>  一般用于分支的操作，比如创建分支，查看分支等等，</p>
<ul>
<li><code>git branch</code><br>　　不带参数：列出本地已经存在的分支，并且在当前分支的前面用”*”标记</li>
<li><code>git branch -r</code><br>　　查看远程版本库分支列表</li>
<li><code>git branch -a</code><br>　　查看所有分支列表，包括本地和远程</li>
<li><code>git branch dev</code><br>　　创建名为dev的分支，创建分支时需要是最新的环境，创建分支但依然停留在当前分支</li>
<li><code>git branch -d dev</code><br>　　删除dev分支，如果在分支中有一些未merge的提交，那么会删除分支失败，此时可以使用 git branch -D dev：强制删除dev分支，</li>
<li><code>git branch -vv</code><br>　　可以查看本地分支对应的远程分支</li>
<li><code>git branch -m oldName newName</code><br>　　给分支重命名</li>
</ul>
</li>
<li><p><strong>Git checkout</strong></p>
<ul>
<li>操作文件<br><code>git checkout filename</code> 放弃单个文件的修改<br><code>git checkout .</code> 放弃当前目录下的修改</li>
<li>操作分支<br><code>git checkout master</code> 将分支切换到master<br><code>git checkout -b master</code> 如果分支存在则只切换分支，若不存在则创建并切换到master分支，<code>repo start</code>是对<code>git checkout -b</code>这个命令的封装，将所有仓库的分支都切换到master，master是分支名，</li>
<li>查看帮助<br><code>git checkout --help</code><a id="more"></a>

</li>
</ul>
</li>
</ul>
<p>转载自「浅浅念」大佬的Blog<br>原文链接:<br><a href="https://www.cnblogs.com/qianqiannian/p/6011404.html" target="_blank" rel="noopener">https://www.cnblogs.com/qianqiannian/p/6011404.html</a></p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git删除本地分支和删除远程分支</title>
    <url>/Git/git-del-br/</url>
    <content><![CDATA[<h1 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h1><p>　　切换分支的时候命令打错了，git checkout 后面没有跟分支名，结果git status，很多delete的文件，直接冒冷汗，git add ,commit 之后发现本地与远程确实是删除了很多文件，之前也有过一次，当时是从新换了一个目录重新拉代码。。。麻烦的很</p>
<p>　　把情况告诉了同事，给了我建议，删除这个分支，重新拉，于是开始了此操作。</p>
<h1 id="具体操作："><a href="#具体操作：" class="headerlink" title="具体操作："></a>具体操作：</h1><p>　　我现在在dev1分支上，想删除dev1分支</p>
<ol>
<li><p>先切换到别的分支:<code>git checkout dev2</code></p>
</li>
<li><p><strong>删除本地分支</strong>:<code>git branch -d dev1</code></p>
</li>
<li><p>如果删除不了可以<strong>强制删除</strong>:<code>git branch -D dev1</code></p>
</li>
<li><p>有必要的情况下，<strong>删除远程分支</strong>:<code>git push origin --delete dev1</code></p>
</li>
<li><p>在从公用的仓库fetch代码:<code>git fetch origin dev1:dev1</code></p>
</li>
<li><p>然后切换分支即可:<code>git checkout dev1</code></p>
</li>
</ol>
<p>注：上述操作是删除个人本地分支和个人远程分支，如果只删除个人本地分支，请忽略第4步。</p>
<a id="more"></a>
<p>转载自「李勇888」大佬的Blog<br>原文链接：<a href="https://www.cnblogs.com/liyong888/p/9822410.html" target="_blank" rel="noopener">https://www.cnblogs.com/liyong888/p/9822410.html</a></p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>43道检验基础的JavaScript面试题</title>
    <url>/js/43-jsBaseT/</url>
    <content><![CDATA[<ol>
<li>下面代码的输出是什么？<br>function sayHi() {<br>console.log(name);<br>console.log(age);<br>var name = “Lydia”;<br>let age = 21;<br>}</li>
</ol>
<p>A: Lydia 和 undefined<br>B: Lydia 和 ReferenceError<br>C: ReferenceError 和 21<br>D: undefined 和 ReferenceError<br>答案: D<br>在函数中，我们首先使用var关键字声明了name变量。 这意味着变量在创建阶段会被提升（JavaScript会在创建变量创建阶段为其分配内存空间），默认值为undefined，直到我们实际执行到使用该变量的行。 我们还没有为name变量赋值，所以它仍然保持undefined的值。</p>
<p>使用let关键字（和const）声明的变量也会存在变量提升，但与var不同，初始化没有被提升。 在我们声明（初始化）它们之前，它们是不可访问的。 这被称为“暂时死区”。 当我们在声明变量之前尝试访问变量时，JavaScript会抛出一个ReferenceError。</p>
<p>译者注：</p>
<p>关于let的是否存在变量提升，我们何以用下面的例子来验证：</p>
<p>let name = ‘ConardLi’<br>{<br>  console.log(name) // Uncaught ReferenceError: name is not defined<br>  let name = ‘code秘密花园’<br>}<br>let变量如果不存在变量提升，console.log(name)就会输出ConardLi，结果却抛出了ReferenceError，那么这很好的说明了，let也存在变量提升，但是它存在一个“暂时死区”，在变量未初始化或赋值前不允许访问。</p>
<p>变量的赋值可以分为三个阶段：</p>
<p>创建变量，在内存中开辟空间<br>初始化变量，将变量初始化为undefined<br>真正赋值<br>关于let、var和function：</p>
<p>let 的「创建」过程被提升了，但是初始化没有提升。<br>var 的「创建」和「初始化」都被提升了。<br>function 的「创建」「初始化」和「赋值」都被提升了。</p>
<a id="more"></a>
<ol start="2">
<li>下面代码的输出是什么?<br>for (var i = 0; i &lt; 3; i++) {<br>setTimeout(() =&gt; console.log(i), 1);<br>}</li>
</ol>
<p>for (let i = 0; i &lt; 3; i++) {<br>  setTimeout(() =&gt; console.log(i), 1);<br>}<br>A: 0 1 2 and 0 1 2<br>B: 0 1 2 and 3 3 3<br>C: 3 3 3 and 0 1 2<br>答案: C<br>由于JavaScript中的事件执行机制，setTimeout函数真正被执行时，循环已经走完。 由于第一个循环中的变量i是使用var关键字声明的，因此该值是全局的。 在循环期间，我们每次使用一元运算符++都会将i的值增加1。 因此在第一个例子中，当调用setTimeout函数时，i已经被赋值为3。</p>
<p>在第二个循环中，使用let关键字声明变量i：使用let（和const）关键字声明的变量是具有块作用域的（块是{}之间的任何东西）。 在每次迭代期间，i将被创建为一个新值，并且每个值都会存在于循环内的块级作用域。</p>
<ol start="3">
<li>下面代码的输出是什么?<br>const shape = {<br>radius: 10,<br>diameter() {<br> return this.radius * 2;<br>},<br>perimeter: () =&gt; 2 * Math.PI * this.radius<br>};</li>
</ol>
<p>shape.diameter();<br>shape.perimeter();<br>A: 20 and 62.83185307179586<br>B: 20 and NaN<br>C: 20 and 63<br>D: NaN and 63<br>答案: B<br>请注意，diameter是普通函数，而perimeter是箭头函数。</p>
<p>对于箭头函数，this关键字指向是它所在上下文（定义时的位置）的环境，与普通函数不同！ 这意味着当我们调用perimeter时，它不是指向shape对象，而是指其定义时的环境（window）。没有值radius属性，返回undefined。</p>
<ol start="4">
<li>下面代码的输出是什么?</li>
</ol>
<p>+true;<br>!”Lydia”;<br>A: 1 and false<br>B: false and NaN<br>C: false and false<br>答案: A<br>一元加号会尝试将boolean类型转换为数字类型。 true被转换为1，false被转换为0。</p>
<p>字符串’Lydia’是一个真值。 我们实际上要问的是“这个真值是假的吗？”。 这会返回false。</p>
<ol start="5">
<li>哪个选项是不正确的?<br>const bird = {<br>size: “small”<br>};</li>
</ol>
<p>const mouse = {<br>  name: “Mickey”,<br>  small: true<br>};<br>A: mouse.bird.size<br>B: mouse[bird.size]<br>C: mouse[bird[“size”]]<br>D: All of them are valid<br>答案: A<br>在JavaScript中，所有对象键都是字符串（除了Symbol）。尽管有时我们可能不会给定字符串类型，但它们总是被转换为字符串。</p>
<p>JavaScript解释语句。当我们使用方括号表示法时，它会看到第一个左括号[，然后继续，直到找到右括号]。只有在那个时候，它才会对这个语句求值。</p>
<p>mouse [bird.size]：首先它会对bird.size求值，得到small。 mouse [“small”]返回true。</p>
<p>但是，使用点表示法，这不会发生。 mouse没有名为bird的键，这意味着mouse.bird是undefined。 然后，我们使用点符号来询问size：mouse.bird.size。 由于mouse.bird是undefined，我们实际上是在询问undefined.size。 这是无效的，并将抛出Cannot read property “size” of undefined。</p>
<ol start="6">
<li>下面代码的输出是什么?<br>let c = { greeting: “Hey!” };<br>let d;</li>
</ol>
<p>d = c;<br>c.greeting = “Hello”;<br>console.log(d.greeting);<br>A: Hello<br>B: undefined<br>C: ReferenceError<br>D: TypeError<br>答案: A<br>在JavaScript中，当设置它们彼此相等时，所有对象都通过引用进行交互。</p>
<p>首先，变量c为对象保存一个值。 之后，我们将d指定为c与对象相同的引用。</p>
<p>更改一个对象时，可以更改所有对象。</p>
<ol start="7">
<li>下面代码的输出是什么?<br>let a = 3;<br>let b = new Number(3);<br>let c = 3;</li>
</ol>
<p>console.log(a == b);<br>console.log(a === b);<br>console.log(b === c);<br>A: truefalsetrue<br>B: falsefalsetrue<br>C: truefalsefalse<br>D: falsetruetrue<br>答案: C<br>new Number（）是一个内置的函数构造函数。 虽然它看起来像一个数字，但它并不是一个真正的数字：它有一堆额外的功能，是一个对象。</p>
<p>当我们使用==运算符时，它只检查它是否具有相同的值。 他们都有3的值，所以它返回true。</p>
<p>译者注：==会引发隐式类型转换，右侧的对象类型会自动拆箱为Number类型。<br>然而，当我们使用===操作符时，类型和值都需要相等，new Number()不是一个数字，是一个对象类型。两者都返回 false。</p>
<ol start="8">
<li><p>下面代码的输出是什么?<br>class Chameleon {<br>static colorChange(newColor) {<br> this.newColor = newColor;<br>}</p>
<p>constructor({ newColor = “green” } = {}) {<br> this.newColor = newColor;<br>}<br>}</p>
</li>
</ol>
<p>const freddie = new Chameleon({ newColor: “purple” });<br>freddie.colorChange(“orange”);<br>A: orange<br>B: purple<br>C: green<br>D: TypeError<br>答案: D<br>colorChange方法是静态的。 静态方法仅在创建它们的构造函数中存在，并且不能传递给任何子级。 由于freddie是一个子级对象，函数不会传递，所以在freddie实例上不存在freddie方法：抛出TypeError。</p>
<ol start="9">
<li>下面代码的输出是什么?<br>let greeting;<br>greetign = {}; // Typo!<br>console.log(greetign);<br>A: {}<br>B: ReferenceError: greetign is not defined<br>C: undefined<br>答案: A<br>控制台会输出空对象，因为我们刚刚在全局对象上创建了一个空对象！ 当我们错误地将greeting输入为greetign时，JS解释器实际上在浏览器中将其视为global.greetign = {}（或window.greetign = {}）。</li>
</ol>
<p>为了避免这种情况，我们可以使用“use strict”。 这可以确保在将变量赋值之前必须声明变量。</p>
<ol start="10">
<li>当我们这样做时会发生什么?<br>function bark() {<br>console.log(“Woof!”);<br>}</li>
</ol>
<p>bark.animal = “dog”;<br>A: Nothing, this is totally fine!<br>B: SyntaxError. You cannot add properties to a function this way.<br>C: undefined<br>D: ReferenceError<br>答案: A<br>这在JavaScript中是可能的，因为函数也是对象！（原始类型之外的所有东西都是对象）</p>
<p>函数是一种特殊类型的对象。您自己编写的代码并不是实际的函数。 该函数是具有属性的对象，此属性是可调用的。</p>
<ol start="11">
<li>下面代码的输出是什么?<br>function Person(firstName, lastName) {<br>this.firstName = firstName;<br>this.lastName = lastName;<br>}</li>
</ol>
<p>const member = new Person(“Lydia”, “Hallie”);<br>Person.getFullName = () =&gt; this.firstName + this.lastName;</p>
<p>console.log(member.getFullName());<br>A: TypeError<br>B: SyntaxError<br>C: Lydia Hallie<br>D: undefinedundefined<br>答案: A<br>您不能像使用常规对象那样向构造函数添加属性。 如果要一次向所有对象添加功能，则必须使用原型。 所以在这种情况下应该这样写：</p>
<p>Person.prototype.getFullName = function () {<br>  return <code>${this.firstName} ${this.lastName}</code>;<br>}<br>这样会使member.getFullName()是可用的，为什么样做是对的？ 假设我们将此方法添加到构造函数本身。 也许不是每个Person实例都需要这种方法。这会浪费大量内存空间，因为它们仍然具有该属性，这占用了每个实例的内存空间。 相反，如果我们只将它添加到原型中，我们只需将它放在内存中的一个位置，但它们都可以访问它！</p>
<ol start="12">
<li>下面代码的输出是什么?<br>function Person(firstName, lastName) {<br>this.firstName = firstName;<br>this.lastName = lastName;<br>}</li>
</ol>
<p>const lydia = new Person(“Lydia”, “Hallie”);<br>const sarah = Person(“Sarah”, “Smith”);</p>
<p>console.log(lydia);<br>console.log(sarah);<br>A: Person {firstName: “Lydia”, lastName: “Hallie”} and undefined<br>B: Person {firstName: “Lydia”, lastName: “Hallie”} and Person {firstName: “Sarah”, lastName: “Smith”}<br>C: Person {firstName: “Lydia”, lastName: “Hallie”} and {}<br>D:Person {firstName: “Lydia”, lastName: “Hallie”} and ReferenceError<br>答案: A<br>对于sarah，我们没有使用new关键字。 使用new时，它指的是我们创建的新空对象。 但是，如果你不添加new它指的是全局对象！</p>
<p>我们指定了this.firstName等于’Sarah和this.lastName等于Smith。 我们实际做的是定义global.firstName =’Sarah’和global.lastName =’Smith。 sarah本身的返回值是undefined。</p>
<ol start="12">
<li>事件传播的三个阶段是什么？?<br>A: 目标 &gt; 捕获 &gt; 冒泡<br>B: 冒泡 &gt; 目标 &gt; 捕获<br>C: 目标 &gt; 冒泡 &gt; 捕获<br>D: 捕获 &gt; 目标 &gt; 冒泡<br>答案: D<br>在捕获阶段，事件通过父元素向下传递到目标元素。 然后它到达目标元素，冒泡开始。</li>
</ol>
<ol start="13">
<li>所有对象都有原型.<br>A: 对<br>B: 错误<br>答案: B<br>除基础对象外，所有对象都有原型。 基础对象可以访问某些方法和属性，例如.toString。 这就是您可以使用内置JavaScript方法的原因！ 所有这些方法都可以在原型上找到。 虽然JavaScript无法直接在您的对象上找到它，但它会沿着原型链向下寻找并在那里找到它，这使您可以访问它。</li>
</ol>
<p>译者注：基础对象指原型链终点的对象。基础对象的原型是null。</p>
<ol start="14">
<li>下面代码的输出是什么?<br>function sum(a, b) {<br>return a + b;<br>}</li>
</ol>
<p>sum(1, “2”);<br>A: NaN<br>B: TypeError<br>C: “12”<br>D: 3<br>答案: C<br>JavaScript是一种动态类型语言：我们没有指定某些变量的类型。 在您不知情的情况下，值可以自动转换为另一种类型，称为隐式类型转换。 强制从一种类型转换为另一种类型。</p>
<p>在此示例中，JavaScript将数字1转换为字符串，以使函数有意义并返回值。 在让数字类型（1）和字符串类型（’2’）相加时，该数字被视为字符串。 我们可以连接像“Hello”+“World”这样的字符串，所以这里发生的是“1”+“2”返回“12”。</p>
<ol start="15">
<li>下面代码的输出是什么?<br>let number = 0;<br>console.log(number++);<br>console.log(++number);<br>console.log(number);<br>A: 112<br>B: 122<br>C: 022<br>D: 012<br>答案: C<br>后缀一元运算符++：</li>
</ol>
<p>返回值（返回0）<br>增加值（数字现在是1）<br>前缀一元运算符++：</p>
<p>增加值（数字现在是2）<br>返回值（返回2）<br>所以返回0 2 2。</p>
<ol start="16">
<li>下面代码的输出是什么?<br>function getPersonInfo(one, two, three) {<br>console.log(one);<br>console.log(two);<br>console.log(three);<br>}</li>
</ol>
<p>const person = “Lydia”;<br>const age = 21;</p>
<p>getPersonInfo<code>${person} is ${age} years old</code>;<br>A: Lydia21[“”, “is”, “years old”]<br>B: [“”, “is”, “years old”]Lydia21<br>C: Lydia[“”, “is”, “years old”]21<br>答案: B<br>如果使用标记的模板字符串，则第一个参数的值始终是字符串值的数组。 其余参数获取传递到模板字符串中的表达式的值！</p>
<ol start="17">
<li>下面代码的输出是什么?<br>function checkAge(data) {<br>if (data === { age: 18 }) {<br>console.log(“You are an adult!”);<br>} else if (data == { age: 18 }) {<br>console.log(“You are still an adult.”);<br>} else {<br>console.log(<code>Hmm.. You don&#39;t have an age I guess</code>);<br>}<br>}</li>
</ol>
<p>checkAge({ age: 18 });<br>A: You are an adult!<br>B: You are still an adult.<br>C: Hmm.. You don’t have an age I guess<br>答案: C<br>在比较相等性，原始类型通过它们的值进行比较，而对象通过它们的引用进行比较。JavaScript检查对象是否具有对内存中相同位置的引用。</p>
<p>我们作为参数传递的对象和我们用于检查相等性的对象在内存中位于不同位置，所以它们的引用是不同的。</p>
<p>这就是为什么{ age: 18 } === { age: 18 }和 { age: 18 } == { age: 18 } 返回 false的原因。</p>
<ol start="18">
<li>下面代码的输出是什么?<br>function getAge(…args) {<br>console.log(typeof args);<br>}</li>
</ol>
<p>getAge(21);<br>A: “number”<br>B: “array”<br>C: “object”<br>D: “NaN”<br>答案: C<br>扩展运算符（… args）返回一个带参数的数组。 数组是一个对象，因此typeof args返回object。</p>
<ol start="20">
<li>下面代码的输出是什么?<br>function getAge() {<br>“use strict”;<br>age = 21;<br>console.log(age);<br>}</li>
</ol>
<p>getAge();<br>A: 21<br>B: undefined<br>C: ReferenceError<br>D: TypeError<br>答案: C<br>使用“use strict”，可以确保不会意外地声明全局变量。 我们从未声明变量age，因为我们使用`use strict’，它会引发一个ReferenceError。 如果我们不使用“use strict”，它就会起作用，因为属性age会被添加到全局对象中。</p>
<ol start="21">
<li><p>下面代码的输出是什么?<br>const sum = eval(“10<em>10+5”);<br>A: 105<br>B: “105”<br>C: TypeError<br>D: “10</em>10+5”<br>答案: A<br>eval会为字符串传递的代码求值。 如果它是一个表达式，就像在这种情况下一样，它会计算表达式。 表达式为10 * 10 + 5计算得到105。</p>
</li>
<li><p>cool_secret可以访问多长时间?<br>sessionStorage.setItem(“cool_secret”, 123);<br>A：永远，数据不会丢失。<br>B：用户关闭选项卡时。<br>C：当用户关闭整个浏览器时，不仅是选项卡。<br>D：用户关闭计算机时。<br>答案: B<br>关闭选项卡后，将删除存储在sessionStorage中的数据。</p>
</li>
</ol>
<p>如果使用localStorage，数据将永远存在，除非例如调用localStorage.clear()。</p>
<ol start="23">
<li>下面代码的输出是什么?<br>var num = 8;<br>var num = 10;</li>
</ol>
<p>console.log(num);<br>A: 8<br>B: 10<br>C: SyntaxError<br>D: ReferenceError<br>答案: B<br>使用var关键字，您可以用相同的名称声明多个变量。然后变量将保存最新的值。</p>
<p>您不能使用let或const来实现这一点，因为它们是块作用域的。</p>
<ol start="24">
<li>下面代码的输出是什么?<br>const obj = { 1: “a”, 2: “b”, 3: “c” };<br>const set = new Set([1, 2, 3, 4, 5]);</li>
</ol>
<p>obj.hasOwnProperty(“1”);<br>obj.hasOwnProperty(1);<br>set.has(“1”);<br>set.has(1);<br>A: falsetruefalsetrue<br>B: falsetruetruetrue<br>C: truetruefalsetrue<br>D: truetruetruetrue<br>答案: C<br>所有对象键（不包括Symbols）都会被存储为字符串，即使你没有给定字符串类型的键。 这就是为什么obj.hasOwnProperty（’1’）也返回true。</p>
<p>上面的说法不适用于Set。 在我们的Set中没有“1”：set.has（’1’）返回false。 它有数字类型1，set.has（1）返回true。</p>
<ol start="25">
<li><p>下面代码的输出是什么?<br>const obj = { a: “one”, b: “two”, a: “three” };<br>console.log(obj);<br>A: { a: “one”, b: “two” }<br>B: { b: “two”, a: “three” }<br>C: { a: “three”, b: “two” }<br>D: SyntaxError<br>答案: C<br>如果对象有两个具有相同名称的键，则将替前面的键。它仍将处于第一个位置，但具有最后指定的值。</p>
</li>
<li><p>JavaScript全局执行上下文为你创建了两个东西:全局对象和this关键字.<br>A: 对<br>B: 错误<br>C: 视情况而定<br>答案: A<br>基本执行上下文是全局执行上下文:它是代码中随处可访问的内容。</p>
</li>
<li><p>下面代码的输出是什么?<br>for (let i = 1; i &lt; 5; i++) {<br>if (i === 3) continue;<br>console.log(i);<br>}<br>A: 12<br>B: 123<br>C: 124<br>D: 134<br>答案: C<br>如果某个条件返回true，则continue语句跳过迭代。</p>
</li>
<li><p>下面代码的输出是什么?<br>String.prototype.giveLydiaPizza = () =&gt; {<br>return “Just give Lydia pizza already!”;<br>};</p>
</li>
</ol>
<p>const name = “Lydia”;</p>
<p>name.giveLydiaPizza();<br>A: “Just give Lydia pizza already!”<br>B: TypeError: not a function<br>C: SyntaxError<br>D: undefined<br>答案: A<br>String是一个内置的构造函数，我们可以为它添加属性。 我刚给它的原型添加了一个方法。 原始类型的字符串自动转换为字符串对象，由字符串原型函数生成。 因此，所有字符串（字符串对象）都可以访问该方法！</p>
<p>译者注：</p>
<p>当使用基本类型的字符串调用giveLydiaPizza时，实际上发生了下面的过程：</p>
<p>创建一个String的包装类型实例<br>在实例上调用substring方法<br>销毁实例</p>
<ol start="29">
<li>下面代码的输出是什么?<br>const a = {};<br>const b = { key: “b” };<br>const c = { key: “c” };</li>
</ol>
<p>a[b] = 123;<br>a[c] = 456;</p>
<p>console.log(a[b]);<br>A: 123<br>B: 456<br>C: undefined<br>D: ReferenceError<br>答案: B<br>对象键自动转换为字符串。我们试图将一个对象设置为对象a的键，其值为123。</p>
<p>但是，当对象自动转换为字符串化时，它变成了[Object object]。 所以我们在这里说的是a[“Object object”] = 123。 然后，我们可以尝试再次做同样的事情。 c对象同样会发生隐式类型转换。那么，a[“Object object”] = 456。</p>
<p>然后，我们打印a[b]，它实际上是a[“Object object”]。 我们将其设置为456，因此返回456。</p>
<ol start="30">
<li>下面代码的输出是什么?<br>const foo = () =&gt; console.log(“First”);<br>const bar = () =&gt; setTimeout(() =&gt; console.log(“Second”));<br>const baz = () =&gt; console.log(“Third”);</li>
</ol>
<p>bar();<br>foo();<br>baz();<br>A: FirstSecondThird<br>B: FirstThirdSecond<br>C: SecondFirstThird<br>D: SecondThirdFirst<br>答案: B<br>我们有一个setTimeout函数并首先调用它。 然而却最后打印了它。</p>
<p>这是因为在浏览器中，我们不只有运行时引擎，我们还有一个叫做WebAPI的东西。WebAPI为我们提供了setTimeout函数，例如DOM。</p>
<p>将callback推送到WebAPI后，setTimeout函数本身（但不是回调！）从堆栈中弹出。</p>
<p>现在，调用foo，并打印First。</p>
<p>foo从堆栈弹出，baz被调用，并打印Third。</p>
<p>WebAPI不能只是在准备就绪时将内容添加到堆栈中。 相反，它将回调函数推送到一个称为任务队列的东西。</p>
<p>这是事件循环开始工作的地方。 事件循环查看堆栈和任务队列。 如果堆栈为空，则会占用队列中的第一个内容并将其推送到堆栈中。</p>
<p>bar被调用，Second被打印，它从栈中弹出。</p>
<ol start="31">
<li><p>单击按钮时event.target是什么?</p>
<div onclick="console.log('first div')">
<div onclick="console.log('second div')">
<button onclick="console.log('button')">
  Click!
</button>
</div>
</div>
A: div外部
B: div内部
C: button
D: 所有嵌套元素的数组.
答案: C
导致事件的最深嵌套元素是事件的目标。 你可以通过event.stopPropagation停止冒泡
</li>
<li><p>单击下面的html片段打印的内容是什么?</p>
<div onclick="console.log('div')">
<p onclick="console.log('p')">
Click here!

</p></div></li>
</ol>

A: pdiv
B: divp
C: p
D: div
答案: A
如果我们单击p，我们会看到两个日志：p和div。在事件传播期间，有三个阶段：捕获，目标和冒泡。 默认情况下，事件处理程序在冒泡阶段执行（除非您将useCapture设置为true）。 它从最深的嵌套元素向外延伸。

<ol start="33">
<li>下面代码的输出是什么?<br>const person = { name: “Lydia” };</li>
</ol>
<p>function sayHi(age) {<br>  console.log(<code>${this.name} is ${age}</code>);<br>}</p>
<p>sayHi.call(person, 21);<br>sayHi.bind(person, 21);<br>A: undefined is 21Lydia is 21<br>B: functionfunction<br>C: Lydia is 21Lydia is 21<br>D: Lydia is 21function<br>答案: D<br>使用两者，我们可以传递我们想要this关键字引用的对象。 但是，.call方法会立即执行！</p>
<p>.bind方法会返回函数的拷贝值，但带有绑定的上下文！ 它不会立即执行。</p>
<ol start="34">
<li>下面代码的输出是什么?<br>function sayHi() {<br>return (() =&gt; 0)();<br>}</li>
</ol>
<p>typeof sayHi();<br>A: “object”<br>B: “number”<br>C: “function”<br>D: “undefined”<br>答案: B<br>sayHi函数返回立即调用的函数（IIFE）的返回值。 该函数返回0，类型为数字。</p>
<p>仅供参考：只有7种内置类型：null，undefined，boolean，number，string，object和symbol。 function不是一个类型，因为函数是对象，它的类型是object。</p>
<ol start="35">
<li>下面这些值哪些是假值?<br>0;<br>new Number(0);<br>(“”);<br>(“ “);<br>new Boolean(false);<br>undefined;<br>A: 0, ‘’, undefined<br>B: 0, new Number(0), ‘’, new Boolean(false), undefined<br>C: 0, ‘’, new Boolean(false), undefined<br>D: 所有都是假值<br>答案: A<br>JavaScript中只有6个假值：</li>
</ol>
<p>undefined<br>null<br>NaN<br>0<br>‘’ (empty string)<br>false<br>函数构造函数，如new Number和new Boolean都是真值。</p>
<ol start="36">
<li><p>下面代码的输出是什么?<br>console.log(typeof typeof 1);<br>A: “number”<br>B: “string”<br>C: “object”<br>D: “undefined”<br>答案: B<br>typeof 1 返回 “number”.<br>typeof “number” 返回 “string”</p>
</li>
<li><p>下面代码的输出是什么?<br>const numbers = [1, 2, 3];<br>numbers[10] = 11;<br>console.log(numbers);<br>A: [1, 2, 3, 7 x null, 11]<br>B: [1, 2, 3, 11]<br>C: [1, 2, 3, 7 x empty, 11]<br>D: SyntaxError<br>答案: C<br>When you set a value to an element in an array that exceeds the length of the array, JavaScript creates something called “empty slots”. These actually have the value of undefined, but you will see something like:</p>
</li>
</ol>
<p>当你为数组中的元素设置一个超过数组长度的值时，JavaScript会创建一个名为“空插槽”的东西。 这些位置的值实际上是undefined，但你会看到类似的东西：</p>
<p>[1, 2, 3, 7 x empty, 11]</p>
<p>这取决于你运行它的位置（每个浏览器有可能不同）。</p>
<ol start="38">
<li>下面代码的输出是什么?<br>(() =&gt; {<br>let x, y;<br>try {<br>throw new Error();<br>} catch (x) {<br>(x = 1), (y = 2);<br>console.log(x);<br>}<br>console.log(x);<br>console.log(y);<br>})();<br>A: 1undefined2<br>B: undefinedundefinedundefined<br>C: 112<br>D: 1undefinedundefined<br>答案: A<br>catch块接收参数x。当我们传递参数时，这与变量的x不同。这个变量x是属于catch作用域的。</li>
</ol>
<p>之后，我们将这个块级作用域的变量设置为1，并设置变量y的值。 现在，我们打印块级作用域的变量x，它等于1。</p>
<p>在catch块之外，x仍然是undefined，而y是2。 当我们想在catch块之外的console.log(x)时，它返回undefined，而y返回2。</p>
<ol start="39">
<li>JavaScript中的所有内容都是…<br>A：原始或对象<br>B：函数或对象<br>C：技巧问题！只有对象<br>D：数字或对象<br>答案: A<br>JavaScript只有原始类型和对象。</li>
</ol>
<p>原始类型是boolean，null，undefined，bigint，number，string和symbol。</p>
<ol start="40">
<li>下面代码的输出是什么?<br>[[0, 1], [2, 3]].reduce(<br>(acc, cur) =&gt; {<br>return acc.concat(cur);<br>},<br>[1, 2]<br>);<br>A: [0, 1, 2, 3, 1, 2]<br>B: [6, 1, 2]<br>C: [1, 2, 0, 1, 2, 3]<br>D: [1, 2, 6]<br>答案: C<br>[1,2]是我们的初始值。 这是我们开始执行reduce函数的初始值，以及第一个acc的值。 在第一轮中，acc是[1,2]，cur是[0,1]。 我们将它们连接起来，结果是[1,2,0,1]。</li>
</ol>
<p>然后，acc的值为[1,2,0,1]，cur的值为[2,3]。 我们将它们连接起来，得到[1,2,0,1,2,3]。</p>
<ol start="41">
<li>下面代码的输出是什么?<br>!!null;<br>!!””;<br>!!1;<br>A: falsetruefalse<br>B: falsefalsetrue<br>C: falsetruetrue<br>D: truetruefalse<br>答案: B<br>null是假值。 !null返回true。 !true返回false。</li>
</ol>
<p>“”是假值。 !””返回true。 !true返回false。</p>
<p>1是真值。 !1返回false。 !false返回true。</p>
<ol start="42">
<li><p><code>setInterval</code>方法的返回值什么?<br>setInterval(() =&gt; console.log(“Hi”), 1000);<br>A：一个唯一的id<br>B：指定的毫秒数<br>C：传递的函数<br>D：undefined<br>答案: A<br>它返回一个唯一的id。 此id可用于使用clearInterval()函数清除该定时器。</p>
</li>
<li><p>What does this return?</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[...&quot;Lydia&quot;];</span><br><span class="line">A: [&quot;L&quot;, &quot;y&quot;, &quot;d&quot;, &quot;i&quot;, &quot;a&quot;]</span><br><span class="line">B: [&quot;Lydia&quot;]</span><br><span class="line">C: [[], &quot;Lydia&quot;]</span><br><span class="line">D: [[&quot;L&quot;, &quot;y&quot;, &quot;d&quot;, &quot;i&quot;, &quot;a&quot;]]</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>答案: A<br>字符串是可迭代的。 扩展运算符将迭代的每个字符映射到一个元素。</p>
<p>转载自<b>ben大叔</b>的知乎，原文链接<a href="https://zhuanlan.zhihu.com/p/75359676?utm_source=wechat_session&amp;utm_medium=social&amp;utm_oi=974558471802363904&amp;from=groupmessage&amp;isappinstalled=0&amp;wechatShare=2&amp;s_s_i=pDpHHRCYQt21%2FVdcK%2BBDyPnpxlGjyBulBdeKJkTilCY%3D&amp;s_r=0" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/75359676?utm_source=wechat_session&amp;utm_medium=social&amp;utm_oi=974558471802363904&amp;from=groupmessage&amp;isappinstalled=0&amp;wechatShare=2&amp;s_s_i=pDpHHRCYQt21%2FVdcK%2BBDyPnpxlGjyBulBdeKJkTilCY%3D&amp;s_r=0</a></p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo next主题加载缓慢问题</title>
    <url>/hexo/hexoLoadJs/</url>
    <content><![CDATA[<h1 id="站点"><a href="#站点" class="headerlink" title="站点"></a>站点</h1><p>可双线部署</p>
<h1 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h1><p>默认是Google字体，加载比较慢<br>在next文件夹里的<code>_config.yml</code>里</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Uri of fonts host. E.g. //fonts.googleapis.com (Default)</span></span><br><span class="line"><span class="attr">host:</span></span><br></pre></td></tr></table></figure>

<p>  改为：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Uri of fonts host. E.g. //fonts.googleapis.com (Default)</span></span><br><span class="line"><span class="attr">host:</span> <span class="string">//fonts.lug.ustc.edu.cn</span> <span class="comment"># fonts.lug.ustc.edu.cn是中科大的源。</span></span><br></pre></td></tr></table></figure>

<h1 id="Js脚本尽量后置"><a href="#Js脚本尽量后置" class="headerlink" title="Js脚本尽量后置"></a>Js脚本尽量后置</h1><p>建议尽量放在<code>&lt;/body&gt;</code>之前，且能异步加载的尽量异步加载。</p>
<h1 id="配置主题自定义Js文件"><a href="#配置主题自定义Js文件" class="headerlink" title="配置主题自定义Js文件"></a>配置主题自定义Js文件</h1><h2 id="为什么要配置Hexo-next主题自定义Js文件呢？"><a href="#为什么要配置Hexo-next主题自定义Js文件呢？" class="headerlink" title="为什么要配置Hexo next主题自定义Js文件呢？"></a>为什么要配置Hexo next主题自定义Js文件呢？</h2><p>主要原因有两点：<br> 不可靠<br>  第三方站点的js依赖其站点的稳定性，如果第三方站点挂了或不维护了，那么加载地址就失效了。<br>  访问直接 404…比如最近就遇到 next 主题”不蒜子”文章<code>PV</code>统计功能用不了了，Chrome抓包发现 <a href="https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js" target="_blank" rel="noopener">https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js</a> 这个地址404了，看了”不蒜子”官方blog通知才发现原来换成了<a href="https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js" target="_blank" rel="noopener">https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js</a><br>  加载速度慢。<br>    比如gitalk功能用到的<a href="https://rawgit.com/qhh0205/78e9e0b1f3114db6737f3ed8cdd51d3a/raw/3894c5be5aa2378336b1f5ee0f296fa0b22d06e9/md5.min.js" target="_blank" rel="noopener">https://rawgit.com/qhh0205/78e9e0b1f3114db6737f3ed8cdd51d3a/raw/3894c5be5aa2378336b1f5ee0f296fa0b22d06e9/md5.min.js</a>文件嵌入到主题，发现每次打开blog网站都加载很慢，Chrome抓包发现是该文件加载缓慢，一直 pending很久(F12-&gt;Network-&gt;XHR)。</p>
<p><strong>解决上述问题的方法就是把上述js文件下载放到next主题的<code>/source/js/src/</code>目录下，让hexo生成静态网站时，加载生成静态站点本身的js</strong></p>
<h2 id="next主题gitalk评论功能加载自定义js"><a href="#next主题gitalk评论功能加载自定义js" class="headerlink" title="next主题gitalk评论功能加载自定义js"></a>next主题gitalk评论功能加载自定义js</h2><p>1.将 <a href="https://github.com/Glooo/shared/blob/master/md5.min.js" target="_blank" rel="noopener">https://github.com/Glooo/shared/blob/master/md5.min.js</a> 文件下载下来放到<code>themes/next/source/js/src/</code>路径下。</p>
<p>2.修改 <code>themes/next/layout/_third-party/comments/gitalk.swig</code>，加载<code>md5.min.js</code> 改为 <code>&lt;script src=&quot;/js/src/md5.min.js&quot;&gt;&lt;/script&gt;</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if page.comments &amp;&amp; theme.gitalk.enable %&#125;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/gitalk/dist/gitalk.css&quot;&gt;</span><br><span class="line">  &lt;script src=&quot;https://unpkg.com/gitalk/dist/gitalk.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  //修改前</span><br><span class="line">  //&lt;script src=&quot;https://rawgit.com/qhh0205/78e9e0b1f3114db6737f3ed8cdd51d3a/raw/3894c5be5aa2378336b1f5ee0f296fa0b22d06e9/md5.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  //  修改后</span><br><span class="line">  &lt;script src=&quot;/js/src/md5.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    var gitalk = new Gitalk(&#123;</span><br><span class="line">      clientID: &apos;&#123;&#123; theme.gitalk.ClientID &#125;&#125;&apos;,</span><br><span class="line">      clientSecret: &apos;&#123;&#123; theme.gitalk.ClientSecret &#125;&#125;&apos;,</span><br><span class="line">      repo: &apos;&#123;&#123; theme.gitalk.repo &#125;&#125;&apos;,</span><br><span class="line">      owner: &apos;&#123;&#123; theme.gitalk.githubID &#125;&#125;&apos;,</span><br><span class="line">      admin: [&apos;&#123;&#123; theme.gitalk.adminUser &#125;&#125;&apos;],</span><br><span class="line">      id: location.pathname,</span><br><span class="line">      distractionFreeMode: &apos;&#123;&#123; theme.gitalk.distractionFreeMode &#125;&#125;&apos;</span><br><span class="line">    &#125;)</span><br><span class="line">    gitalk.render(&apos;gitalk-container&apos;)           </span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<h2 id="next主题不蒜子PV统计功能记载自定义js"><a href="#next主题不蒜子PV统计功能记载自定义js" class="headerlink" title="next主题不蒜子PV统计功能记载自定义js"></a>next主题不蒜子PV统计功能记载自定义js</h2><ol>
<li>将 <a href="https://github.com/Glooo/shared/blob/master/busuanzi.pure.mini.js" target="_blank" rel="noopener">https://github.com/Glooo/shared/blob/master/busuanzi.pure.mini.js</a> 下载下来放到<code>themes/next/source/js/src/</code>路径下。</li>
</ol>
<p>2.修改 <code>themes/next/layout/_third-party/analytics/busuanzi-counter.swig</code>，将原先 <code>&lt;script async src=&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</code> 改为 <code>&lt;script async src=&quot;/js/src/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if theme.busuanzi_count.enable %&#125;</span><br><span class="line">&lt;div class=&quot;busuanzi-count&quot;&gt;</span><br><span class="line">// 修改前</span><br><span class="line">//&lt;script async src=&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">//修改后</span><br><span class="line">&lt;script async src=&quot;/js/src/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&#123;% if theme.busuanzi_count.site_uv %&#125;</span><br><span class="line">&lt;span class=&quot;site-uv&quot;&gt;</span><br><span class="line">&#123;&#123; theme.busuanzi_count.site_uv_header &#125;&#125;</span><br><span class="line">&lt;span class=&quot;busuanzi-value&quot; id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;</span><br><span class="line">&#123;&#123; theme.busuanzi_count.site_uv_footer &#125;&#125;</span><br><span class="line">&lt;/span&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% if theme.busuanzi_count.site_pv %&#125;</span><br><span class="line">&lt;span class=&quot;site-pv&quot;&gt;</span><br><span class="line">&#123;&#123; theme.busuanzi_count.site_pv_header &#125;&#125;</span><br><span class="line">&lt;span class=&quot;busuanzi-value&quot; id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;</span><br><span class="line">&#123;&#123; theme.busuanzi_count.site_pv_footer &#125;&#125;</span><br><span class="line">&lt;/span&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>配置完成后需要<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code>生效…</p>
<h2 id="在此也备份一下两个站点js文件"><a href="#在此也备份一下两个站点js文件" class="headerlink" title="在此也备份一下两个站点js文件~"></a><strong>在此也备份一下两个站点js文件~</strong></h2><p><strong>md5.min.js</strong><br><a href="https://github.com/Glooo/shared/blob/master/md5.min.js" target="_blank" rel="noopener">https://github.com/Glooo/shared/blob/master/md5.min.js</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;<span class="string">"use strict"</span>;<span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params">n,t</span>)</span>&#123;<span class="keyword">var</span> r=(<span class="number">65535</span>&amp;n)+(<span class="number">65535</span>&amp;t);<span class="keyword">return</span>(n&gt;&gt;<span class="number">16</span>)+(t&gt;&gt;<span class="number">16</span>)+(r&gt;&gt;<span class="number">16</span>)&lt;&lt;<span class="number">16</span>|<span class="number">65535</span>&amp;r&#125;<span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">n,t,r,e,o,u</span>)</span>&#123;<span class="keyword">return</span> d(<span class="function"><span class="keyword">function</span>(<span class="params">n,t</span>)</span>&#123;<span class="keyword">return</span> n&lt;&lt;t|n&gt;&gt;&gt;<span class="number">32</span>-t&#125;(d(d(t,n),d(e,u)),o),r)&#125;<span class="function"><span class="keyword">function</span> <span class="title">l</span>(<span class="params">n,t,r,e,o,u,c</span>)</span>&#123;<span class="keyword">return</span> f(t&amp;r|~t&amp;e,n,t,o,u,c)&#125;<span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params">n,t,r,e,o,u,c</span>)</span>&#123;<span class="keyword">return</span> f(t&amp;e|r&amp;~e,n,t,o,u,c)&#125;<span class="function"><span class="keyword">function</span> <span class="title">v</span>(<span class="params">n,t,r,e,o,u,c</span>)</span>&#123;<span class="keyword">return</span> f(t^r^e,n,t,o,u,c)&#125;<span class="function"><span class="keyword">function</span> <span class="title">m</span>(<span class="params">n,t,r,e,o,u,c</span>)</span>&#123;<span class="keyword">return</span> f(r^(t|~e),n,t,o,u,c)&#125;<span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">n,t</span>)</span>&#123;<span class="keyword">var</span> r,e,o,u,c;n[t&gt;&gt;<span class="number">5</span>]|=<span class="number">128</span>&lt;&lt;t%<span class="number">32</span>,n[<span class="number">14</span>+(t+<span class="number">64</span>&gt;&gt;&gt;<span class="number">9</span>&lt;&lt;<span class="number">4</span>)]=t;<span class="keyword">var</span> f=<span class="number">1732584193</span>,i=<span class="number">-271733879</span>,a=<span class="number">-1732584194</span>,h=<span class="number">271733878</span>;<span class="keyword">for</span>(r=<span class="number">0</span>;r&lt;n.length;r+=<span class="number">16</span>)i=m(i=m(i=m(i=m(i=v(i=v(i=v(i=v(i=g(i=g(i=g(i=g(i=l(i=l(i=l(i=l(o=i,a=l(u=a,h=l(c=h,f=l(e=f,i,a,h,n[r],<span class="number">7</span>,<span class="number">-680876936</span>),i,a,n[r+<span class="number">1</span>],<span class="number">12</span>,<span class="number">-389564586</span>),f,i,n[r+<span class="number">2</span>],<span class="number">17</span>,<span class="number">606105819</span>),h,f,n[r+<span class="number">3</span>],<span class="number">22</span>,<span class="number">-1044525330</span>),a=l(a,h=l(h,f=l(f,i,a,h,n[r+<span class="number">4</span>],<span class="number">7</span>,<span class="number">-176418897</span>),i,a,n[r+<span class="number">5</span>],<span class="number">12</span>,<span class="number">1200080426</span>),f,i,n[r+<span class="number">6</span>],<span class="number">17</span>,<span class="number">-1473231341</span>),h,f,n[r+<span class="number">7</span>],<span class="number">22</span>,<span class="number">-45705983</span>),a=l(a,h=l(h,f=l(f,i,a,h,n[r+<span class="number">8</span>],<span class="number">7</span>,<span class="number">1770035416</span>),i,a,n[r+<span class="number">9</span>],<span class="number">12</span>,<span class="number">-1958414417</span>),f,i,n[r+<span class="number">10</span>],<span class="number">17</span>,<span class="number">-42063</span>),h,f,n[r+<span class="number">11</span>],<span class="number">22</span>,<span class="number">-1990404162</span>),a=l(a,h=l(h,f=l(f,i,a,h,n[r+<span class="number">12</span>],<span class="number">7</span>,<span class="number">1804603682</span>),i,a,n[r+<span class="number">13</span>],<span class="number">12</span>,<span class="number">-40341101</span>),f,i,n[r+<span class="number">14</span>],<span class="number">17</span>,<span class="number">-1502002290</span>),h,f,n[r+<span class="number">15</span>],<span class="number">22</span>,<span class="number">1236535329</span>),a=g(a,h=g(h,f=g(f,i,a,h,n[r+<span class="number">1</span>],<span class="number">5</span>,<span class="number">-165796510</span>),i,a,n[r+<span class="number">6</span>],<span class="number">9</span>,<span class="number">-1069501632</span>),f,i,n[r+<span class="number">11</span>],<span class="number">14</span>,<span class="number">643717713</span>),h,f,n[r],<span class="number">20</span>,<span class="number">-373897302</span>),a=g(a,h=g(h,f=g(f,i,a,h,n[r+<span class="number">5</span>],<span class="number">5</span>,<span class="number">-701558691</span>),i,a,n[r+<span class="number">10</span>],<span class="number">9</span>,<span class="number">38016083</span>),f,i,n[r+<span class="number">15</span>],<span class="number">14</span>,<span class="number">-660478335</span>),h,f,n[r+<span class="number">4</span>],<span class="number">20</span>,<span class="number">-405537848</span>),a=g(a,h=g(h,f=g(f,i,a,h,n[r+<span class="number">9</span>],<span class="number">5</span>,<span class="number">568446438</span>),i,a,n[r+<span class="number">14</span>],<span class="number">9</span>,<span class="number">-1019803690</span>),f,i,n[r+<span class="number">3</span>],<span class="number">14</span>,<span class="number">-187363961</span>),h,f,n[r+<span class="number">8</span>],<span class="number">20</span>,<span class="number">1163531501</span>),a=g(a,h=g(h,f=g(f,i,a,h,n[r+<span class="number">13</span>],<span class="number">5</span>,<span class="number">-1444681467</span>),i,a,n[r+<span class="number">2</span>],<span class="number">9</span>,<span class="number">-51403784</span>),f,i,n[r+<span class="number">7</span>],<span class="number">14</span>,<span class="number">1735328473</span>),h,f,n[r+<span class="number">12</span>],<span class="number">20</span>,<span class="number">-1926607734</span>),a=v(a,h=v(h,f=v(f,i,a,h,n[r+<span class="number">5</span>],<span class="number">4</span>,<span class="number">-378558</span>),i,a,n[r+<span class="number">8</span>],<span class="number">11</span>,<span class="number">-2022574463</span>),f,i,n[r+<span class="number">11</span>],<span class="number">16</span>,<span class="number">1839030562</span>),h,f,n[r+<span class="number">14</span>],<span class="number">23</span>,<span class="number">-35309556</span>),a=v(a,h=v(h,f=v(f,i,a,h,n[r+<span class="number">1</span>],<span class="number">4</span>,<span class="number">-1530992060</span>),i,a,n[r+<span class="number">4</span>],<span class="number">11</span>,<span class="number">1272893353</span>),f,i,n[r+<span class="number">7</span>],<span class="number">16</span>,<span class="number">-155497632</span>),h,f,n[r+<span class="number">10</span>],<span class="number">23</span>,<span class="number">-1094730640</span>),a=v(a,h=v(h,f=v(f,i,a,h,n[r+<span class="number">13</span>],<span class="number">4</span>,<span class="number">681279174</span>),i,a,n[r],<span class="number">11</span>,<span class="number">-358537222</span>),f,i,n[r+<span class="number">3</span>],<span class="number">16</span>,<span class="number">-722521979</span>),h,f,n[r+<span class="number">6</span>],<span class="number">23</span>,<span class="number">76029189</span>),a=v(a,h=v(h,f=v(f,i,a,h,n[r+<span class="number">9</span>],<span class="number">4</span>,<span class="number">-640364487</span>),i,a,n[r+<span class="number">12</span>],<span class="number">11</span>,<span class="number">-421815835</span>),f,i,n[r+<span class="number">15</span>],<span class="number">16</span>,<span class="number">530742520</span>),h,f,n[r+<span class="number">2</span>],<span class="number">23</span>,<span class="number">-995338651</span>),a=m(a,h=m(h,f=m(f,i,a,h,n[r],<span class="number">6</span>,<span class="number">-198630844</span>),i,a,n[r+<span class="number">7</span>],<span class="number">10</span>,<span class="number">1126891415</span>),f,i,n[r+<span class="number">14</span>],<span class="number">15</span>,<span class="number">-1416354905</span>),h,f,n[r+<span class="number">5</span>],<span class="number">21</span>,<span class="number">-57434055</span>),a=m(a,h=m(h,f=m(f,i,a,h,n[r+<span class="number">12</span>],<span class="number">6</span>,<span class="number">1700485571</span>),i,a,n[r+<span class="number">3</span>],<span class="number">10</span>,<span class="number">-1894986606</span>),f,i,n[r+<span class="number">10</span>],<span class="number">15</span>,<span class="number">-1051523</span>),h,f,n[r+<span class="number">1</span>],<span class="number">21</span>,<span class="number">-2054922799</span>),a=m(a,h=m(h,f=m(f,i,a,h,n[r+<span class="number">8</span>],<span class="number">6</span>,<span class="number">1873313359</span>),i,a,n[r+<span class="number">15</span>],<span class="number">10</span>,<span class="number">-30611744</span>),f,i,n[r+<span class="number">6</span>],<span class="number">15</span>,<span class="number">-1560198380</span>),h,f,n[r+<span class="number">13</span>],<span class="number">21</span>,<span class="number">1309151649</span>),a=m(a,h=m(h,f=m(f,i,a,h,n[r+<span class="number">4</span>],<span class="number">6</span>,<span class="number">-145523070</span>),i,a,n[r+<span class="number">11</span>],<span class="number">10</span>,<span class="number">-1120210379</span>),f,i,n[r+<span class="number">2</span>],<span class="number">15</span>,<span class="number">718787259</span>),h,f,n[r+<span class="number">9</span>],<span class="number">21</span>,<span class="number">-343485551</span>),f=d(f,e),i=d(i,o),a=d(a,u),h=d(h,c);<span class="keyword">return</span>[f,i,a,h]&#125;<span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">n</span>)</span>&#123;<span class="keyword">var</span> t,r=<span class="string">""</span>,e=<span class="number">32</span>*n.length;<span class="keyword">for</span>(t=<span class="number">0</span>;t&lt;e;t+=<span class="number">8</span>)r+=<span class="built_in">String</span>.fromCharCode(n[t&gt;&gt;<span class="number">5</span>]&gt;&gt;&gt;t%<span class="number">32</span>&amp;<span class="number">255</span>);<span class="keyword">return</span> r&#125;<span class="function"><span class="keyword">function</span> <span class="title">h</span>(<span class="params">n</span>)</span>&#123;<span class="keyword">var</span> t,r=[];<span class="keyword">for</span>(r[(n.length&gt;&gt;<span class="number">2</span>)<span class="number">-1</span>]=<span class="keyword">void</span> <span class="number">0</span>,t=<span class="number">0</span>;t&lt;r.length;t+=<span class="number">1</span>)r[t]=<span class="number">0</span>;<span class="keyword">var</span> e=<span class="number">8</span>*n.length;<span class="keyword">for</span>(t=<span class="number">0</span>;t&lt;e;t+=<span class="number">8</span>)r[t&gt;&gt;<span class="number">5</span>]|=(<span class="number">255</span>&amp;n.charCodeAt(t/<span class="number">8</span>))&lt;&lt;t%<span class="number">32</span>;<span class="keyword">return</span> r&#125;<span class="function"><span class="keyword">function</span> <span class="title">e</span>(<span class="params">n</span>)</span>&#123;<span class="keyword">var</span> t,r,e=<span class="string">"0123456789abcdef"</span>,o=<span class="string">""</span>;<span class="keyword">for</span>(r=<span class="number">0</span>;r&lt;n.length;r+=<span class="number">1</span>)t=n.charCodeAt(r),o+=e.charAt(t&gt;&gt;&gt;<span class="number">4</span>&amp;<span class="number">15</span>)+e.charAt(<span class="number">15</span>&amp;t);<span class="keyword">return</span> o&#125;<span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params">n</span>)</span>&#123;<span class="keyword">return</span> <span class="built_in">unescape</span>(<span class="built_in">encodeURIComponent</span>(n))&#125;<span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params">n</span>)</span>&#123;<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;<span class="keyword">return</span> a(i(h(n),<span class="number">8</span>*n.length))&#125;(r(n))&#125;<span class="function"><span class="keyword">function</span> <span class="title">u</span>(<span class="params">n,t</span>)</span>&#123;<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">n,t</span>)</span>&#123;<span class="keyword">var</span> r,e,o=h(n),u=[],c=[];<span class="keyword">for</span>(u[<span class="number">15</span>]=c[<span class="number">15</span>]=<span class="keyword">void</span> <span class="number">0</span>,<span class="number">16</span>&lt;o.length&amp;&amp;(o=i(o,<span class="number">8</span>*n.length)),r=<span class="number">0</span>;r&lt;<span class="number">16</span>;r+=<span class="number">1</span>)u[r]=<span class="number">909522486</span>^o[r],c[r]=<span class="number">1549556828</span>^o[r];<span class="keyword">return</span> e=i(u.concat(h(t)),<span class="number">512</span>+<span class="number">8</span>*t.length),a(i(c.concat(e),<span class="number">640</span>))&#125;(r(n),r(t))&#125;<span class="function"><span class="keyword">function</span> <span class="title">t</span>(<span class="params">n,t,r</span>)</span>&#123;<span class="keyword">return</span> t?r?u(t,n):<span class="function"><span class="keyword">function</span>(<span class="params">n,t</span>)</span>&#123;<span class="keyword">return</span> e(u(n,t))&#125;(t,n):r?o(n):<span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;<span class="keyword">return</span> e(o(n))&#125;(n)&#125;<span class="string">"function"</span>==<span class="keyword">typeof</span> define&amp;&amp;define.amd?define(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> t&#125;):<span class="string">"object"</span>==<span class="keyword">typeof</span> <span class="built_in">module</span>&amp;&amp;<span class="built_in">module</span>.exports?<span class="built_in">module</span>.exports=t:n.md5=t&#125;(<span class="keyword">this</span>);</span><br><span class="line"><span class="comment">//# sourceMappingURL=md5.min.js.map</span></span><br></pre></td></tr></table></figure>

<p><strong>busuanzi.pure.mini.js</strong><br><a href="https://github.com/Glooo/shared/blob/master/busuanzi.pure.mini.js" target="_blank" rel="noopener">https://github.com/Glooo/shared/blob/master/busuanzi.pure.mini.js</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> bszCaller,bszTag;!<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> c,d,e,a=!<span class="number">1</span>,b=[];ready=<span class="function"><span class="keyword">function</span>(<span class="params">c</span>)</span>&#123;<span class="keyword">return</span> a||<span class="string">"interactive"</span>===<span class="built_in">document</span>.readyState||<span class="string">"complete"</span>===<span class="built_in">document</span>.readyState?c.call(<span class="built_in">document</span>):b.push(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> c.call(<span class="keyword">this</span>)&#125;),<span class="keyword">this</span>&#125;,d=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> a=<span class="number">0</span>,c=b.length;c&gt;a;a++)b[a].apply(<span class="built_in">document</span>);b=[]&#125;,e=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;a||(a=!<span class="number">0</span>,d.call(<span class="built_in">window</span>),<span class="built_in">document</span>.removeEventListener?<span class="built_in">document</span>.removeEventListener(<span class="string">"DOMContentLoaded"</span>,e,!<span class="number">1</span>):<span class="built_in">document</span>.attachEvent&amp;&amp;(<span class="built_in">document</span>.detachEvent(<span class="string">"onreadystatechange"</span>,e),<span class="built_in">window</span>==<span class="built_in">window</span>.top&amp;&amp;(clearInterval(c),c=<span class="literal">null</span>)))&#125;,<span class="built_in">document</span>.addEventListener?<span class="built_in">document</span>.addEventListener(<span class="string">"DOMContentLoaded"</span>,e,!<span class="number">1</span>):<span class="built_in">document</span>.attachEvent&amp;&amp;(<span class="built_in">document</span>.attachEvent(<span class="string">"onreadystatechange"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;/loaded|complete/.test(<span class="built_in">document</span>.readyState)&amp;&amp;e()&#125;),<span class="built_in">window</span>==<span class="built_in">window</span>.top&amp;&amp;(c=setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">try</span>&#123;a||<span class="built_in">document</span>.documentElement.doScroll(<span class="string">"left"</span>)&#125;<span class="keyword">catch</span>(b)&#123;<span class="keyword">return</span>&#125;e()&#125;,<span class="number">5</span>)))&#125;(),bszCaller=&#123;<span class="attr">fetch</span>:<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;<span class="keyword">var</span> c=<span class="string">"BusuanziCallback_"</span>+<span class="built_in">Math</span>.floor(<span class="number">1099511627776</span>*<span class="built_in">Math</span>.random());<span class="built_in">window</span>[c]=<span class="keyword">this</span>.evalCall(b),a=a.replace(<span class="string">"=BusuanziCallback"</span>,<span class="string">"="</span>+c),scriptTag=<span class="built_in">document</span>.createElement(<span class="string">"SCRIPT"</span>),scriptTag.type=<span class="string">"text/javascript"</span>,scriptTag.defer=!<span class="number">0</span>,scriptTag.src=a,<span class="built_in">document</span>.getElementsByTagName(<span class="string">"HEAD"</span>)[<span class="number">0</span>].appendChild(scriptTag)&#125;,<span class="attr">evalCall</span>:<span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">b</span>)</span>&#123;ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">try</span>&#123;a(b),scriptTag.parentElement.removeChild(scriptTag)&#125;<span class="keyword">catch</span>(c)&#123;bszTag.hides()&#125;&#125;)&#125;&#125;&#125;,bszCaller.fetch(<span class="string">"//busuanzi.ibruce.info/busuanzi?jsonpCallback=BusuanziCallback"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;bszTag.texts(a),bszTag.shows()&#125;),bszTag=&#123;<span class="attr">bszs</span>:[<span class="string">"site_pv"</span>,<span class="string">"page_pv"</span>,<span class="string">"site_uv"</span>],<span class="attr">texts</span>:<span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;<span class="keyword">this</span>.bszs.map(<span class="function"><span class="keyword">function</span>(<span class="params">b</span>)</span>&#123;<span class="keyword">var</span> c=<span class="built_in">document</span>.getElementById(<span class="string">"busuanzi_value_"</span>+b);c&amp;&amp;(c.innerHTML=a[b])&#125;)&#125;,<span class="attr">hides</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">this</span>.bszs.map(<span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;<span class="keyword">var</span> b=<span class="built_in">document</span>.getElementById(<span class="string">"busuanzi_container_"</span>+a);b&amp;&amp;(b.style.display=<span class="string">"none"</span>)&#125;)&#125;,<span class="attr">shows</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">this</span>.bszs.map(<span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;<span class="keyword">var</span> b=<span class="built_in">document</span>.getElementById(<span class="string">"busuanzi_container_"</span>+a);b&amp;&amp;(b.style.display=<span class="string">"inline"</span>)&#125;)&#125;&#125;;</span><br></pre></td></tr></table></figure>

<p>参考大佬<a href="https://blog.csdn.net/qianghaohao/article/details/90736310" target="_blank" rel="noopener">qhh0205</a>的文章</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>去除字符两边空格的方法trim()</title>
    <url>/uncategorized/trim/</url>
    <content><![CDATA[<h1 id="replace正则"><a href="#replace正则" class="headerlink" title="replace正则"></a>replace正则</h1><p>去除字符串内<strong>所有</strong>的空格：<code>str = str.replace(/\s*/g,&quot;&quot;);</code></p>
<p>去除字符串内<strong>两头</strong>的空格：<code>str = str.replace(/^\s*|\s*$/g,&quot;&quot;);</code></p>
<p>去除字符串内<strong>左侧</strong>的空格：<code>str = str.replace(/^\s*/,&quot;&quot;);</code></p>
<p>去除字符串内<strong>右侧</strong>的空格：<code>str = str.replace(/(\s*$)/g,&quot;&quot;);</code></p>
<h1 id="trim"><a href="#trim" class="headerlink" title="trim()"></a>trim()</h1><p><strong>删除字符串两端的空白字符并返回</strong><br>trim方法并不影响原来的字符串本身<br>它返回的是一个新的字符串。</p>
<p>缺陷：只能去除字符串两端的空格，不能去除中间的空格</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"   Hello world   "</span>;</span><br><span class="line"><span class="keyword">var</span> str1 = str.trim();</span><br><span class="line"><span class="built_in">console</span>.log(str1); <span class="comment">//Hello world//输出左右侧均无空格</span></span><br></pre></td></tr></table></figure>

<p>单独去除左侧空格则使用 <code>str.trimLeft();</code><br>例：<br><code>var str_1 = str.trimLeft();</code></p>
<p>单独去除右侧空格则使用 <code>str.trimRight();</code><br>例：<br><code>var str_1 = str.trimRight();</code></p>
<h1 id="JQuery的-trim-str-方法"><a href="#JQuery的-trim-str-方法" class="headerlink" title="JQuery的$.trim(str)方法"></a>JQuery的$.trim(str)方法</h1><p>注意：<code>$.trim()</code>函数会移除字符串开始和末尾处的所有换行符，空格(包括连续的空格)和制表符。如果这些空白字符在字符串中间时，它们将被保留，不会被移除。</p>
]]></content>
      <tags>
        <tag>字符串处理</tag>
      </tags>
  </entry>
  <entry>
    <title>split,splice,slice与join</title>
    <url>/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/split-ce-slice/</url>
    <content><![CDATA[<h1 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h1><p><strong>数组方法</strong></p>
<p>splice(index,deleteNum,addItem1,…)<br>参数：</p>
<ul>
<li>index 必需，整数，规定添加/删除的位置，负数（“数组length + 负数”的index）</li>
<li>deleteNum 必需，要删除的项目数量，0则不删除</li>
<li>addItem 可选，添加的新项目</li>
</ul>
<blockquote>
<p><font color="#1874CD"><strong>返回</strong>新数组（<strong>删除的item组成的新数组</strong>）</font><br><font color="#1874CD"><strong>会修改原始数组</strong></font></p>
</blockquote>
<p>数组对象用<code>splice()</code>删除后会导致原位置变为<code>undefined</code>，仍然存在与于数组中。</p>
<!-- 解决方法见我的另一篇文章[splice删除对象的方法]() -->


<h1 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h1><p><strong>数组方法</strong></p>
<p>slice(start,end)<br>参数：</p>
<ul>
<li>start 必需，开始位置，负数则从数组尾部开始算起</li>
<li>end 可选，结束的位置，负数则从数组尾部开始算起</li>
</ul>
<blockquote>
<p>包含start而不包含end(左闭右开)<br><font color="#1874CD"><strong>返回</strong>一个新的数组，包含<strong>从 start 到 end （不包括该元素）的 arrayObject 中的元素</strong>。</font><br><font color="#1874CD">该方法并<strong>不会修改原始数组</strong></font>，而是返回一个子数组。<br>如果想删除数组中的一段元素，应该使用方法 Array.splice()。</p>
</blockquote>
<h1 id="split"><a href="#split" class="headerlink" title="split()"></a>split()</h1><p><strong>字符串方法</strong></p>
<p>split(separator,howmany)<br>参数：</p>
<ul>
<li>separator 必需，从何处分割，<font color="#1874CD">字符串</font>或<font color="#1874CD">正则表达式</font></li>
<li>howmany 可选，指定返回的数组的最大长度</li>
</ul>
<blockquote>
<p>把一个字符串分割成字符串数组<br><font color="#1874CD"><strong>原字符串不改变</strong></font><br><font color="#1874CD"><strong>返回值</strong>是一个<strong>字符串数组</strong>。</font><strong>返回的数组中的字串不包括 separator(第一个参数) 自身。</strong><br><strong>但是，如果 separator 是包含子表达式的正则表达式，那么返回的数组中包括与这些子表达式匹配的字串（但不包括与整个正则表达式匹配的文本）。</strong></p>
</blockquote>
<p><font color="red" size="4"><strong>注意：</strong></font></p>

<p><code>array.split()</code>和<code>array.split(&#39;&#39;)</code>的结果是不同的。</p>
<p>与<code>Array.join()</code>操作相反</p>
<h1 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h1><p><strong>数组方法</strong><br>join(separator)</p>
<p>参数：</p>
<ul>
<li>separator 可选，分隔符，省略则使用逗号作分隔符。</li>
</ul>
<blockquote>
<p><font color="#1874CD"><strong>原数组不变</strong></font><br><font color="#1874CD"><strong>返回</strong>一个字符串</font></p>
</blockquote>
<p><font color="red" size="4"><strong>注意：</strong></font></p>

<p><code>array.join()</code>、<code>array.join(&#39;&#39;)</code>和<code>array.join(&#39;+&#39;)</code>结果不同。<br><code>array.join()</code> 等同于 <code>array.join(&#39;,&#39;)</code></p>
<p><strong>不适用于对象数组:</strong></p>

]]></content>
      <categories>
        <category>前端技术</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>提升“内涵”之webpack学习</title>
    <url>/webpack/webpack/</url>
    <content><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>webpack 安装前提<br>最新版nodejs，旧版本可能导致缺少webpack功能&amp;相关package包</p>
<p>安装</p>
<p><code>npm install --save-dev webpack</code>安装最新版本<br><code>npm install --save-dev webpack@&lt;version&gt;</code></p>
<p>如果使用webpack 4+版本，请安装CLI<br><code>npm install --save-dev webpack-cli</code></p>
<p>建议本地安装而不是全局安装，容易分别升级项目。<br>通常，webpack 通过运行一个或多个 npm scripts，会在本地 node_modules 目录中查找安装的 webpack：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"start"</span>: <span class="string">"webpack --config webpack.config.js"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>当你本地安装webpack时，你能够从node_modules/.bin/webpack访问它的bin版本。</em></p>
<p>全局安装</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install --global webpack</span><br></pre></td></tr></table></figure>

<p>不推荐全局安装 webpack。这会将你项目中的 webpack 锁定到指定版本，并且在使用不同的 webpack 版本的项目中，可能会导致构建失败。</p>
<p>最新版本的webpack</p>
<h1 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h1><p>webpack用于编译JavaScript模块。安装后可以通过CLI(命令行接口)和API与其配合交互。</p>
<h2 id="为什么要使用webpack"><a href="#为什么要使用webpack" class="headerlink" title="为什么要使用webpack"></a>为什么要使用webpack</h2><p>webpack是一个现代的JavaScript应用程序的<em>静态模块打包器（module bundler）</em>。它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle。</p>
<h3 id="入口entry"><a href="#入口entry" class="headerlink" title="入口entry"></a>入口entry</h3><p>入口起点有一个或多个，指示webpack应该使用哪个模块，作为构建其内部依赖图的开始（找依赖）。每个依赖被处理输出到bundles的文件中。</p>
<p>可以在webpack配置中配置entry属性，来指定入口起点。默认值为<code>./src</code>。<br>例子：<br>webpack.config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./path/to/my/entry/file.js'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="输出output"><a href="#输出output" class="headerlink" title="输出output"></a>输出output</h3><p>告诉webpack在哪里输出它所创建的bundles，以及如何命名这些文件，默认值为<code>./dist</code>。基本上，整个应用程序结构，都会被编译到你指定的输出路径的文件夹中。<br>webpack.config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="comment">// path是一个Node.js核心模块，用于操作文件路径</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./path/to/my/entry/file.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    filename: <span class="string">'my-first-webpack.bundle.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h3><p>loader 让 webpack 能够去处理那些非 JavaScript 文件（webpack 自身只理解 JavaScript）。loader 可以将所有类型的文件转换为 webpack 能够处理的有效模块，然后你就可以利用 webpack 的打包能力，对它们进行处理。<br>本质上，webpack loader把所有类型的文件都转换成按依赖图可以直接引用的模块。</p>
<p>loader是可以引入任何类型的模块的。</p>
<p>Mostly，webpack有两个目标：</p>
<ol>
<li>test 属性，用于标识出 应该被对应的loader 进行转换成webpack能处理的 的某个或某些文件。</li>
<li>use 属性，表示进行转换时，应该使用哪个loader。<br>webpack.config.js<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'my-first-webpack.bundle.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.txt$/</span>, <span class="attr">use</span>: <span class="string">'raw-loader'</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>以上配置中，对一个单独的 module 对象定义了 rules 属性，里面包含两个必须属性：test 和 use。这告诉 webpack 编译器(compiler) 如下信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">“嘿，webpack 编译器，</span><br><span class="line">当你碰到「在 require()/import 语句中被解析为 &apos;.txt&apos; 的路径」时，</span><br><span class="line">在你对它打包之前，先使用 raw-loader 转换一下。”</span><br></pre></td></tr></table></figure>

<p>在 webpack 配置中定义 loader 时，要定义在 module.rules 中，而不是 rules。<br>…</p>
<h3 id="插件plugins"><a href="#插件plugins" class="headerlink" title="插件plugins"></a>插件plugins</h3><p>插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量。<br>使用时，require()它，然后把它添加到plugins数组中。</p>
<p>可以在一个配置文件中因为不同目的而多次使用同一个插件，这时需要通过使用 new 操作符来创建它的一个实例。<br>webpack.config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>); <span class="comment">// 通过 npm 安装</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>); <span class="comment">// 用于访问内置插件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.txt$/</span>, <span class="attr">use</span>: <span class="string">'raw-loader'</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;<span class="attr">template</span>: <span class="string">'./src/index.html'</span>&#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br></pre></td></tr></table></figure>

<p>模式<br><code>mode: development/production</code><br>用于启用相应模式下的webpack内置的优化。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode: <span class="string">'production'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="入口entry-1"><a href="#入口entry-1" class="headerlink" title="入口entry"></a>入口entry</h2><h3 id="单个入口语法"><a href="#单个入口语法" class="headerlink" title="单个入口语法"></a>单个入口语法</h3><p>用法:<code>entry: string|Array&lt;string&gt;</code><br><em>webpack.config.js</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  entry: <span class="string">'./path/to/my/entry/file.js'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br></pre></td></tr></table></figure>

<p>entry 属性的单个入口语法，是下面的简写：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    main: <span class="string">'./path/to/my/entry/file.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如果传入的为数组(文件路径数组)，则创建多个主入口。<br>当你想要多个依赖文件一起注入，并且将它们的依赖导向到一个”chunk”时，传入数组的方式就很有用。</p>
<p>当你正在寻找为「只有一个入口起点的应用程序或工具（即 library）」快速设置 webpack 配置的时候，这会是个很不错的选择。然而，使用此语法在扩展配置时有失灵活性。</p>
<h3 id="对象语法"><a href="#对象语法" class="headerlink" title="对象语法"></a>对象语法</h3><p>用法:<br><code>entry: {[entryChunkName: string]: string|Array&lt;string&gt;}</code><br><em>webpack.config.js</em></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: <span class="string">'./src/app.js'</span>,</span><br><span class="line">    vendors: <span class="string">'./src/vendors.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>对象语法会比较繁琐。然而，这是应用程序中定义入口的最可扩展的方式。</p>
<p>“可扩展的webpack配置“是指，可重用也可以与其他配置组合使用。</p>
<h3 id="常见场景"><a href="#常见场景" class="headerlink" title="常见场景"></a>常见场景</h3><h4 id="分离-应用程序-app-和-第三方库-vendor-入口"><a href="#分离-应用程序-app-和-第三方库-vendor-入口" class="headerlink" title="分离 应用程序(app) 和 第三方库(vendor) 入口"></a>分离 应用程序(app) 和 第三方库(vendor) 入口</h4><h4 id="多页面应用程序"><a href="#多页面应用程序" class="headerlink" title="多页面应用程序"></a>多页面应用程序</h4><h2 id="出口-output"><a href="#出口-output" class="headerlink" title="出口 output"></a>出口 output</h2><p>output 属性告诉 webpack 在哪里输出它所创建的 bundles，以及如何命名这些文件，默认值为 <code>./dist</code>。基本上，整个应用程序结构，都会被编译到你指定的输出路径的文件夹中。你可以通过在配置中指定一个 output 字段，来配置这些处理过程：<br>webpack.config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./path/to/my/entry/file.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    filename: <span class="string">'my-first-webpack.bundle.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>在上面的示例中，我们通过 output.filename 和 output.path 属性，来告诉 webpack bundle 的名称，以及我们想要 bundle 生成(emit)到哪里。</p>
<p><em>配置 output 选项可以控制 webpack 如何向硬盘写入编译文件。注意，即使可以存在多个入口起点，但只指定一个输出配置。</em></p>
<h3 id="用法-Usage"><a href="#用法-Usage" class="headerlink" title="用法 Usage"></a>用法 Usage</h3><p>在 webpack 中配置 output 属性的最低要求是，将它的值设置为一个对象，包括以下两点：</p>
<ol>
<li><strong>filename</strong> 用于输出文件的文件名。</li>
<li>目标输出目录 <strong>path</strong> 的绝对路径。<br>webpack.config.js<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">    path: <span class="string">'/home/proj/public/assets'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>此配置将一个单独的 bundle.js 文件输出到 /home/proj/public/assets 目录中。</p>
<h3 id="多个入口起点"><a href="#多个入口起点" class="headerlink" title="多个入口起点"></a>多个入口起点</h3><p>如果配置创建了多个单独的 “chunk”（例如，使用多个入口起点或使用像 CommonsChunkPlugin 这样的插件），则应该使用占位符(substitutions)来确保每个文件具有唯一的名称。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: <span class="string">'./src/app.js'</span>,</span><br><span class="line">    search: <span class="string">'./src/search.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'[name].js'</span>,</span><br><span class="line">    path: __dirname + <span class="string">'/dist'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写入到硬盘：./dist/app.js, ./dist/search.js</span></span><br></pre></td></tr></table></figure>

<h3 id="高级进阶"><a href="#高级进阶" class="headerlink" title="高级进阶"></a>高级进阶</h3><p>以下是使用 CDN 和资源 hash 的复杂示例：</p>
<p>config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">  path: <span class="string">"/home/proj/cdn/assets/[hash]"</span>,</span><br><span class="line">  publicPath: <span class="string">"http://cdn.example.com/assets/[hash]/"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在编译时不知道最终输出文件的 publicPath 的情况下，publicPath 可以留空，并且在入口起点文件运行时动态设置。如果你在编译时不知道 publicPath，你可以先忽略它，并且在入口起点设置 <code>__webpack_public_path__</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">__webpack_public_path__ = myRuntimePublicPath</span><br><span class="line"></span><br><span class="line"><span class="comment">// 剩余的应用程序入口</span></span><br></pre></td></tr></table></figure>

<h2 id="模式-mode"><a href="#模式-mode" class="headerlink" title="模式 mode"></a>模式 mode</h2><p>提供mode配置选项，告知webpack使用相应模式的内置优化。<br>string</p>
<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>只在配置中提供mode选项：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode: <span class="string">'production'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或者从CLI参数中传递：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">webpack --mode=production</span><br></pre></td></tr></table></figure>

<p>支持以下字符串值：<br><code>development</code>:会将 <code>process.env.NODE_ENV</code> 的值设为 <code>development</code>。启用 <code>NamedChunksPlugin</code> 和 <code>NamedModulesPlugin</code>。<br><code>production</code>(默认):会将 <code>process.env.NODE_ENV</code> 的值设为 <code>production</code>。启用 <code>FlagDependencyUsagePlugin</code>, <code>FlagIncludedChunksPlugin</code>, <code>ModuleConcatenationPlugin</code>, <code>NoEmitOnErrorsPlugin</code>, <code>OccurrenceOrderPlugin</code>, <code>SideEffectsFlagPlugin</code> 和 <code>UglifyJsPlugin</code>.</p>
<p><em>记住，只设置 NODE_ENV，则不会自动设置 mode。</em><br><strong>mode: development</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.development.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">+ mode: <span class="string">'development'</span></span><br><span class="line">- plugins: [</span><br><span class="line">-   <span class="keyword">new</span> webpack.NamedModulesPlugin(),</span><br><span class="line">-   <span class="keyword">new</span> webpack.DefinePlugin(&#123; <span class="string">"process.env.NODE_ENV"</span>: <span class="built_in">JSON</span>.stringify(<span class="string">"development"</span>) &#125;),</span><br><span class="line">- ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>mode: production(默认)</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack.production.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">+  mode: <span class="string">'production'</span>,</span><br><span class="line">-  plugins: [</span><br><span class="line">-    <span class="keyword">new</span> UglifyJsPlugin(<span class="comment">/* ... */</span>),</span><br><span class="line">-    <span class="keyword">new</span> webpack.DefinePlugin(&#123; <span class="string">"process.env.NODE_ENV"</span>: <span class="built_in">JSON</span>.stringify(<span class="string">"production"</span>) &#125;),</span><br><span class="line">-    <span class="keyword">new</span> webpack.optimize.ModuleConcatenationPlugin(),</span><br><span class="line">-    <span class="keyword">new</span> webpack.NoEmitOnErrorsPlugin()</span><br><span class="line">-  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="loader-1"><a href="#loader-1" class="headerlink" title="loader"></a>loader</h2><h3 id="loader开始"><a href="#loader开始" class="headerlink" title="loader开始"></a>loader开始</h3><p>webpack自身只理解Javascript，所以loader让webpack能够处理那些非Javascript文件。<br>loader可以将所有类型的文件转换为webpack能够处理的有效模块，然后就可以利用webpack的打包能力，对它们进行处理。</p>
<p>其实，loader把所有类型的文件，转换为应用程序的依赖图（和最终的bundle）可以直接引用的模块。</p>
<p>注意，loader 能够 import 导入任何类型的模块（例如 .css 文件），这是 webpack 特有的功能，其他打包程序或任务执行器的可能并不支持。<br>loader 用于对模块的源代码进行转换。loader 可以使你在 import 或”加载”模块时预处理文件。loader 可以将文件从不同的语言（如 TypeScript）转换为 JavaScript，或将内联图像转换为 data URL。loader 甚至允许你直接在 JavaScript 模块中 import CSS文件！</p>
<p>在更高层面，在 webpack 的配置中 loader 有两个目标：<br>1.test 属性，用于标识出应该被对应的 loader 进行转换的某个或某些文件。<br>2.use 属性，表示进行转换时，应该使用哪个 loader。</p>
<p>webpack.config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'my-first-webpack.bundle.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.txt$/</span>, <span class="attr">use</span>: <span class="string">'raw-loader'</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br></pre></td></tr></table></figure>

<p>以上配置中，对一个单独的 module 对象定义了 rules 属性，里面包含两个必须属性：test 和 use。这告诉 webpack 编译器(compiler) 如下信息：</p>
<p>“嘿，webpack 编译器，当你碰到「在 require()/import 语句中被解析为 ‘.txt’ 的路径」时，在你对它打包之前，先使用 raw-loader 转换一下。”</p>
<p>重要的是要记得，在 webpack 配置中定义 loader 时，要定义在 module.rules 中，而不是 rules。然而，在定义错误时 webpack 会给出严重的警告。为了使你受益于此，如果没有按照正确方式去做，webpack 会“给出严重的警告”。</p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>例如，你可以使用 loader 告诉 webpack 加载 CSS 文件，或者将 TypeScript 转为 JavaScript。为此，首先安装相对应的 loader：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save-dev css-loader</span><br><span class="line">npm install --save-dev ts-loader</span><br></pre></td></tr></table></figure>

<p>然后指示webpack对每个<code>.css</code>使用<code>css-loader</code>，以及对所有<code>.ts</code>文件使用<code>ts-loader</code><br>webpack.config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="attr">use</span>: <span class="string">'css-loader'</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.ts$/</span>, <span class="attr">use</span>: <span class="string">'ts-loader'</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="使用loader"><a href="#使用loader" class="headerlink" title="使用loader"></a>使用loader</h3><p>在你的应用程序中，有三种使用loader的方式：</p>
<ol>
<li>配置(推荐):在<code>webpack.config.js</code>文件中指定loader；</li>
<li>内联:在每个<code>import</code>语句中显示指定loader；</li>
<li>CLI:在shell命令中指定他们。</li>
</ol>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>module.rules 允许你在 webpack 配置中指定多个 loader。 这是展示 loader 的一种简明方式，并且有助于使代码变得简洁。同时让你对各个 loader 有个全局概览：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">      use: [</span><br><span class="line">        &#123; <span class="attr">loader</span>: <span class="string">'style-loader'</span> &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          loader: <span class="string">'css-loader'</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            modules: <span class="literal">true</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="内联"><a href="#内联" class="headerlink" title="内联"></a>内联</h3><p>可以在 import 语句或任何等效于 “import” 的方式中指定 loader。使用 ! 将资源中的 loader 分开。分开的每个部分都相对于当前目录解析。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Styles <span class="keyword">from</span> <span class="string">'style-loader!css-loader?modules!./styles.css'</span>;</span><br></pre></td></tr></table></figure>

<p>通过前置所有规则及使用 !，可以对应覆盖到配置中的任意 loader。</p>
<p>选项可以传递查询参数，例如 <code>?key=value&amp;foo=bar</code>，或者一个 JSON 对象，例如 <code>?{&quot;key&quot;:&quot;value&quot;,&quot;foo&quot;:&quot;bar&quot;}</code>。</p>
<p>尽可能使用 module.rules，因为这样可以减少源码中的代码量，并且可以在出错时，更快地调试和定位 loader 中的问题。</p>
<h3 id="CLI"><a href="#CLI" class="headerlink" title="CLI"></a>CLI</h3><p>你也可以通过 CLI 使用 loader：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">webpack --module-bind jade-loader --module-bind &apos;css=style-loader!css-loader&apos;</span><br></pre></td></tr></table></figure>

<p>这会对 <code>.jade</code> 文件使用 <code>jade-loader</code>，对 <code>.css</code> 文件使用 <code>style-loader</code> 和 <code>css-loader</code>。</p>
<h3 id="loader-特性"><a href="#loader-特性" class="headerlink" title="loader 特性"></a>loader 特性</h3><h3 id="解析-loader"><a href="#解析-loader" class="headerlink" title="解析 loader"></a>解析 loader</h3><ul>
<li>loader支持链式传递。能够对资源使用流水线(pipeline)。一组链式的 loader 将按照相反的顺序执行。loader 链中的第一个 loader 返回值给下一个 loader。在最后一个 loader，返回 webpack 所预期的 JavaScript。</li>
<li>loader可以是同步的，也可以是异步的。</li>
<li>loader可以运行在Node.js中，并且能够执行任何可能的操作。</li>
<li>loader接收查询参数。用于对loader传递配置。</li>
<li>loader也能够使用options对象进行配置。</li>
<li>除了使用 package.json 常见的 main 属性，还可以将普通的 npm 模块导出为 loader，做法是在 package.json 里定义一个 loader 字段。</li>
<li>插件(plugin)可以为 loader 带来更多特性。</li>
<li>loader 能够产生额外的任意文件。</li>
</ul>
<p>loader 通过loader预处理函数，为 JavaScript 生态系统提供了更多能力。 用户现在可以更加灵活地引入细粒度逻辑，例如压缩、打包、语言翻译和其他更多。</p>
<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>loader被用于转换某些类型的模块，而插件则可以执行范围更广的任务。<br>从打包优化和压缩，一直到重新定义环境中的变量。<br>使用插件，只要<code>require()</code>它，然后把它添加到<code>plugins</code>数组中。多数插件可以通过选项(option)自定义。你也可以在一个配置文件中因为不同目的而多次使用同一个插件，这时需要通过使用 new 操作符来创建它的一个实例。</p>
<p>webpack.config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>); <span class="comment">// 通过 npm 安装</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>); <span class="comment">// 用于访问内置插件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.txt$/</span>, <span class="attr">use</span>: <span class="string">'raw-loader'</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;<span class="attr">template</span>: <span class="string">'./src/index.html'</span>&#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br></pre></td></tr></table></figure>

<p>插件目的在于解决loader无法实现的其他事。</p>
<h3 id="剖析"><a href="#剖析" class="headerlink" title="剖析"></a>剖析</h3><p>webpack插件是一个具有apply属性的JavaScript对象。apply属性会被webpack compiler调用，并且compiler对象可在整个编译生命周期访问。<br>ConsoleLogOnBuildWebpackPlugin.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> pluginName = <span class="string">'ConsoleLogOnBuildWebpackPlugin'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConsoleLogOnBuildWebpackPlugin</span> </span>&#123;</span><br><span class="line">    apply(compiler) &#123;</span><br><span class="line">        compiler.hooks.run.tap(pluginName, compilation =&gt; &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"webpack 构建过程开始！"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>要开始好好培养培养自己的前端内涵了</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>vue外部链接跳转</title>
    <url>/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/vue-a/</url>
    <content><![CDATA[<p>在vue中跳转外部链接，直接写<code>&lt;a href=&quot;glooo.fun&quot;&gt;&lt;/a&gt;</code>或<code>window.location.href=&quot;glooo.fun&quot;</code><br>会跳转到<code>http://localhost:8000/glooo.fun</code></p>
<p>需要在链接加上<code>http://</code><br>即：<br><code>&lt;a href=&quot;http://glooo.fun&quot;&gt;&lt;/a&gt;</code><br><code>window.location.href=&quot;http://glooo.fun&quot;</code><br>搞定</p>
]]></content>
      <categories>
        <category>前端技术</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络学习小结</title>
    <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/computerNet/</url>
    <content><![CDATA[<h1 id="计算机网络分为哪几层"><a href="#计算机网络分为哪几层" class="headerlink" title="计算机网络分为哪几层"></a>计算机网络分为哪几层</h1><h2 id="七层（五层）协议-YYWSW-应运网数物"><a href="#七层（五层）协议-YYWSW-应运网数物" class="headerlink" title="七层（五层）协议 YYWSW 应运网数物"></a>七层（五层）协议 YYWSW 应运网数物</h2><table>
<thead>
<tr>
<th>序号</th>
<th>OSI</th>
<th>TCP/IP</th>
<th>序号</th>
<th>五层协议</th>
</tr>
</thead>
<tbody><tr>
<td>7</td>
<td>应用层</td>
<td></td>
<td>5</td>
<td></td>
</tr>
<tr>
<td>6</td>
<td>表示层</td>
<td></td>
<td>5</td>
<td></td>
</tr>
<tr>
<td>5</td>
<td>会话层</td>
<td>应用层（各种应用层协议如TELNET,FTP,SMTP等）</td>
<td>5</td>
<td>应用层</td>
</tr>
<tr>
<td>4</td>
<td>运输层</td>
<td>运输层(TCP/UDP)</td>
<td>4</td>
<td>运输层</td>
</tr>
<tr>
<td>3</td>
<td>网络层</td>
<td>网络层IP</td>
<td>3</td>
<td>网络层</td>
</tr>
<tr>
<td>2</td>
<td>数据链路层</td>
<td></td>
<td>2</td>
<td>数据链路层</td>
</tr>
<tr>
<td>1</td>
<td>物理层</td>
<td>网络接口层</td>
<td>1</td>
<td>物理层</td>
</tr>
</tbody></table>
<h2 id="第五层-应用层-application-layer"><a href="#第五层-应用层-application-layer" class="headerlink" title="第五层 应用层(application layer)"></a>第五层 应用层(application layer)</h2><p>数据单元：报文</p>
<h2 id="第四层-运输层-transport-layer"><a href="#第四层-运输层-transport-layer" class="headerlink" title="第四层 运输层(transport layer)"></a>第四层 运输层(transport layer)</h2><p>向两台主机进程间通信提供通用的数据传输服务。</p>
<h3 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h3><ol>
<li>面向连接（建立连接，释放连接）</li>
<li>可靠（的数据传输服务）</li>
<li>只支持点对点（一对一）的连接</li>
<li>通信双方均可发送数据，连接两端均有发送接收<strong>缓存</strong>，可以临时存放双方通信数据。</li>
<li>面向字节流。发送的是无结构的字节流（不是数据块）。<h3 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h3></li>
<li>无连接的</li>
<li>不保证数据传输的可靠性</li>
<li>面向报文</li>
<li>没用到阻塞控制，因此网络出现阻塞时不会导致原主机发送速率降低（实际应用中如电话视频等）。</li>
<li>支持一对一，一对多，多对一和多对多的交互通信。</li>
<li>首部开销小，只需要8字节，比TCP 20字节首部短很多。<h2 id="第三层-网络层-newwork-layer"><a href="#第三层-网络层-newwork-layer" class="headerlink" title="第三层 网络层(newwork layer)"></a>第三层 网络层(newwork layer)</h2>网络层负责为分组交换网上不同主机提供通信服务。<br>网络层把运输层产生的报文段或用户数据报封装成分组和包进行传送。<br>IP数据报或数据报<br>网络层通过<strong>路由器</strong>将运输层传输的数据报传给目标主机。<h2 id="第二层-数据链路层-data-link-layer"><a href="#第二层-数据链路层-data-link-layer" class="headerlink" title="第二层 数据链路层(data link layer)"></a>第二层 数据链路层(data link layer)</h2>两台主机间数据传输，总是在一段一段链路上传送的，这就需要使用专门的数据链路层协议。<br>两个相邻节点间传送数据时，数据链路层将网络层传输来的IP数据报封装成帧，在两个相邻节点间链路传送帧。每一帧包括数据和必要的控制信息（同步信息，地址信息，差错控制等）。</li>
</ol>
<p>通过控制信息，接收端可知道具体的始末比特位，提取出数据部分，上交网络层。<br>通过差错控制，如果监测到收到的帧有误差，数据链路层丢掉这个出差错帧，避免浪费资源。</p>
<p>单位：帧</p>
<h2 id="第一层-物理层-physical-layer"><a href="#第一层-物理层-physical-layer" class="headerlink" title="第一层 物理层(physical layer)"></a>第一层 物理层(physical layer)</h2><p>传送单位：比特</p>
<p>实现相邻计算机节点间比特流的透明传送，尽可能屏蔽具体传输介质和物理设备差异。<br>透明传送是指经过电路传送后，比特流没有发生变化。</p>
<h2 id="表示层"><a href="#表示层" class="headerlink" title="表示层"></a>表示层</h2><p>网络层与应用层之间的翻译官，进行语言编码转换。</p>
<h2 id="会话层"><a href="#会话层" class="headerlink" title="会话层"></a>会话层</h2><p>利用传输层服务，建立和维持会话。<br>存档点，大文件传输时，如果会话中断，通过会话层可以从校验点重新开始会话。</p>
<h1 id="TCP和UDP"><a href="#TCP和UDP" class="headerlink" title="TCP和UDP"></a>TCP和UDP</h1><h2 id="差异"><a href="#差异" class="headerlink" title="差异"></a>差异</h2><table>
  <tr>
    <td></td>
    <td></td>
    <td>TCP</td>
    <td>UDP</td>
  </tr>
  <tr>
    <td>1</td>
    <td>连接</td>
    <td>面向连接</td>
    <td>无连接</td>
  </tr>
  <tr>
    <td>2</td>
    <td>可靠性</td>
    <td>可靠，无重复无丢失无差错按序到达</td>
    <td>尽可能传送</td>
  </tr>
  <tr>
    <td>3</td>
    <td>传输内容</td>
    <td>面向字节流</td>
    <td>面向报文</td>
  </tr>
  <tr>
    <td>4</td>
    <td>连接个数</td>
    <td>点对点</td>
    <td>一对一<br>一对多<br>多对一<br>多对多</td>
  </tr>
  <tr>
    <td>5</td>
    <td>首部</td>
    <td>20字节</td>
    <td>8字节</td>
  </tr>
  <tr>
      <td>6</td>
      <td>逻辑通信信道</td>
      <td>全双工可靠</td>
      <td>不可靠</td>
  </tr>
  <tr>
    <td>7</td>
    <td>传输效率</td>
    <td>慢</td>
    <td>快</td>
  </tr>
</table>


<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><table>
<thead>
<tr>
<th></th>
<th>TCP</th>
<th>UDP</th>
</tr>
</thead>
<tbody><tr>
<td>特点</td>
<td>完整性&gt;实时性</td>
<td>完整性&lt;实时性</td>
</tr>
<tr>
<td>举例</td>
<td>文件传输，重要状态更新</td>
<td>实时通信，视频通话</td>
</tr>
</tbody></table>
<h2 id="哪些应用层协议使用"><a href="#哪些应用层协议使用" class="headerlink" title="哪些应用层协议使用"></a>哪些应用层协议使用</h2><table>
<thead>
<tr>
<th></th>
<th>TCP</th>
<th>UDP</th>
</tr>
</thead>
<tbody><tr>
<td>FTP</td>
<td>文件传输协议</td>
<td></td>
</tr>
<tr>
<td>Telnet</td>
<td>远程登录端口</td>
<td></td>
</tr>
<tr>
<td>SMTP</td>
<td>邮件传输协议</td>
<td></td>
</tr>
<tr>
<td>POP3</td>
<td>与SMTP相关，接收邮件</td>
<td></td>
</tr>
<tr>
<td>HTTP</td>
<td>从web服务器传输超文本到本地浏览器</td>
<td></td>
</tr>
<tr>
<td>DNS</td>
<td></td>
<td>将域名解析为IP地址</td>
</tr>
<tr>
<td>SNMP</td>
<td></td>
<td>管理网络设备，由于设备多，所以用UDP</td>
</tr>
<tr>
<td>TFTP</td>
<td></td>
<td>简单文件传输协议</td>
</tr>
</tbody></table>
<h1 id="窗口滑动协议，快速重传，拥塞避免，慢启动"><a href="#窗口滑动协议，快速重传，拥塞避免，慢启动" class="headerlink" title="窗口滑动协议，快速重传，拥塞避免，慢启动"></a>窗口滑动协议，快速重传，拥塞避免，慢启动</h1><h2 id="窗口滑动协议"><a href="#窗口滑动协议" class="headerlink" title="窗口滑动协议"></a>窗口滑动协议</h2><ol>
<li>停止等待协议<br>发送方发送一个数据帧后，等待确认消息，若收到ACK，则继续传，否则超时或收到NAK，重传数据帧</li>
<li>后退N帧协议（GBN）<br>发送方连续发送W个数据帧，等待确认消息，如果收到ACK，继续传，否则从错误位置，重新传送W个数据帧（无论是否发送过）。</li>
<li>选择重传协议（SR）<br>发送方连续发送W个数据帧，等待确认消息，如果出现错误，将后续正确的帧在缓存中储存，发送方从错误位置，重新发送，接收方将缓存中正确帧和新收到正确帧组合，发送对应ACK信息，如果该问题已经修复，发送方根据ACK信息，确定新的发送起始位置</li>
</ol>
<h2 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h2><h2 id="慢启动"><a href="#慢启动" class="headerlink" title="慢启动"></a>慢启动</h2><h2 id="拥塞避免"><a href="#拥塞避免" class="headerlink" title="拥塞避免"></a>拥塞避免</h2><h2 id="网络拥塞"><a href="#网络拥塞" class="headerlink" title="网络拥塞"></a>网络拥塞</h2><h2 id="快速重传"><a href="#快速重传" class="headerlink" title="快速重传"></a>快速重传</h2><p>#TCP三次握手，四次挥手</p>
<h2 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h2><ol>
<li>客户端发送SYN包到服务器，SYN = X，进入SYN_SEND状态</li>
<li>服务器收到SYN包，返回确认包ACK与新的SYN包。ACK = X + 1；SYN = Y。进入SYN_RECV状态</li>
<li>客户端收到SYN+ACK包，返回确认包ACK，ACK = Y + 1。进入ESTABLISHED状态。服务器收到ACK包，也进入ESTABLISHED状态<h2 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h2></li>
<li>客户端发送SYN+FIN报文段，SYN = X，客户端进入FINISH_WAIT_1状态，意味着不需要再传信息了</li>
<li>服务器收到FIN报文段，返回确认包ACK = X + 1，客户端进入FINISH_WAIT_2状态，此时就是等待服务器传最后的消息</li>
<li>服务器传送完毕后，发送SYN+FIN报文段，说明他也做好了关闭准备，SYN = Y。然后进入LAST_ACK阶段，等待客户端确认</li>
<li>客户端收到后，返回ACK = Y + 1，进入TIME_WAIT阶段。服务器收到ACK包，正常关闭。如果2MSL后仍未有新消息，说明服务器正常关闭，客户端也关闭。<h2 id="为什么3，又为什么4"><a href="#为什么3，又为什么4" class="headerlink" title="为什么3，又为什么4"></a>为什么3，又为什么4</h2>3: 发起人先发一次，然后互相确认听得到<br>4: 客户端说完了，但是服务器可能还想叨叨一会儿。2次用来反馈客户端离开请求。2次用来反馈服务器离开请求。</li>
</ol>
<h1 id="输入域名点击回车访问的过程中发生了什么"><a href="#输入域名点击回车访问的过程中发生了什么" class="headerlink" title="输入域名点击回车访问的过程中发生了什么"></a>输入域名点击回车访问的过程中发生了什么</h1><ol>
<li><strong>浏览器查找域名的IP地址</strong><br>DNS解析</li>
<li><strong>使用TCP协议，建立TCP连接</strong></li>
<li><strong>用HTTP协议请求网页内容</strong></li>
<li><strong>服务器收到HTTP请求，进行处理</strong></li>
<li><strong>服务器发回一个HTML响应</strong></li>
<li><strong>显示</strong></li>
</ol>
<h1 id="https"><a href="#https" class="headerlink" title="https"></a>https</h1><p>https = http + ssl/tls<br>http协议具有明文发送的特点，容易被窃听，篡改，劫持<br>tls/ssl具有信息加密，身份验证，完整性验证等特点，可以解决上述问题</p>
<h2 id="socket"><a href="#socket" class="headerlink" title="socket"></a>socket</h2><p>socket是对TCP/IP协议的封装，是应用层和TCP/IP协议族通信的中间抽象层</p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-router</title>
    <url>/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/vue-router/</url>
    <content><![CDATA[<p>通过注入路由器，我们可以在任何组件内通过 this.$router 访问路由器，也可以通过 this.$route 访问当前路由。</p>
<p>this.$router 和 router 使用起来完全一样。我们使用 this.$router 的原因是我们并不想在每个独立需要封装路由的组件中都导入路由。</p>
<p>要注意，当 <code>&lt;router-link&gt;</code> 对应的路由匹配成功，将自动设置 class 属性值 <code>.router-link-active</code>。</p>
<h1 id="动态路由匹配"><a href="#动态路由匹配" class="headerlink" title="动态路由匹配"></a>动态路由匹配</h1><p>动态路径参数 以冒号开头</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> User = &#123;</span><br><span class="line">  template: <span class="string">'&lt;div&gt;User&lt;/div&gt;'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    <span class="comment">// 动态路径参数 以冒号开头</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'/user/:id'</span>, <span class="attr">component</span>: User &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>像 /user/foo 和 /user/bar 都将映射到相同的路由。<br>一个“路径参数”使用冒号 : 标记。当匹配到一个路由时，参数值会被设置到 this.$route.params，可以在每个组件内使用。于是，我们可以更新 User 的模板，输出当前用户的 ID：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> User = &#123;</span><br><span class="line">  template: <span class="string">'&lt;div&gt;User &#123;&#123; $route.params.id &#125;&#125;&lt;/div&gt;'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>你可以在一个路由中设置多段“路径参数”，对应的值都会设置到 $route.params 中。例如：</p>
<table>
<thead>
<tr>
<th>模式</th>
<th>匹配路径</th>
<th>$route.params</th>
</tr>
</thead>
<tbody><tr>
<td>/user/:username</td>
<td>/user/evan</td>
<td>{ username: ‘evan’ }</td>
</tr>
<tr>
<td>/user/:username/post/:post_id</td>
<td>/user/evan/post/123</td>
<td>{ username: ‘evan’, post_id: ‘123’ }</td>
</tr>
</tbody></table>
<p>除了 $route.params 外，$route 对象还提供了其它有用的信息，例如，$route.query (如果 URL 中有查询参数)、$route.hash 等等。</p>
<h2 id="响应路由参数的变化"><a href="#响应路由参数的变化" class="headerlink" title="响应路由参数的变化"></a>响应路由参数的变化</h2><p>提醒一下，当使用路由参数时，例如从 /user/foo 导航到 /user/bar，原来的组件实例会被复用。因为两个路由都渲染同个组件，比起销毁再创建，复用则显得更加高效。不过，这也意味着组件的生命周期钩子不会再被调用。<br>复用组件时，想对路由参数的变化作出响应的话，你可以简单地 watch (监测变化) $route 对象：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">  <span class="string">'$route'</span>(to,<span class="keyword">from</span>) &#123;</span><br><span class="line">    <span class="comment">// 对路由变化作出响应</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或者用导航守卫</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> User = &#123;</span><br><span class="line">  template: <span class="string">'...'</span>,</span><br><span class="line">  beforeRouteUpdate (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="comment">// react to route changes...路由改变时作出响应</span></span><br><span class="line">    <span class="comment">// don't forget to call next() 别忘了call next()</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="捕获所有路由或-404-Not-found-路由"><a href="#捕获所有路由或-404-Not-found-路由" class="headerlink" title="捕获所有路由或 404 Not found 路由"></a>捕获所有路由或 404 Not found 路由</h2><p>常规参数只会匹配被 / 分隔的 URL 片段中的字符。如果想匹配任意路径，我们可以使用通配符 (*)：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 会匹配所有路径</span></span><br><span class="line">  path: <span class="string">'*'</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 会匹配以 `/user-` 开头的任意路径</span></span><br><span class="line">  path: <span class="string">'/user-*'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当使用通配符路由时，请确保路由的顺序是正确的，也就是说含有通配符的路由应该放在最后。路由 { path: ‘*’ } 通常用于客户端 404 错误。如果你使用了History 模式，请确保正确配置你的服务器。</p>
<p>当使用一个通配符时，$route.params 内会自动添加一个名为 pathMatch 参数。它包含了 URL 通过通配符被匹配的部分：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 给出一个路由 &#123; path: '/user-*' &#125;</span></span><br><span class="line"><span class="keyword">this</span>.$router.push(<span class="string">'/user-admin'</span>)</span><br><span class="line"><span class="keyword">this</span>.$route.params.pathMatch <span class="comment">// 'admin'</span></span><br><span class="line"><span class="comment">// 给出一个路由 &#123; path: '*' &#125;</span></span><br><span class="line"><span class="keyword">this</span>.$router.push(<span class="string">'/non-existing'</span>)</span><br><span class="line"><span class="keyword">this</span>.$route.params.pathMatch <span class="comment">// '/non-existing'</span></span><br></pre></td></tr></table></figure>

<h2 id="高级匹配模式"><a href="#高级匹配模式" class="headerlink" title="高级匹配模式"></a>高级匹配模式</h2><p>path-to-regexp<br><a href="https://github.com/pillarjs/path-to-regexp#parameters" target="_blank" rel="noopener">https://github.com/pillarjs/path-to-regexp#parameters</a></p>
<h2 id="匹配优先级"><a href="#匹配优先级" class="headerlink" title="匹配优先级"></a>匹配优先级</h2><p>有时候，同一个路径可以匹配多个路由，此时，匹配的优先级就按照路由的定义顺序：谁先定义的，谁的优先级就最高。</p>
<h1 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h1>]]></content>
      <categories>
        <category>前端技术</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>typescript</title>
    <url>/uncategorized/typescript/</url>
    <content><![CDATA[<p>好处：<br>1.模块管理更佳 2.类型检查更严格3.它使我的开发严谨而自由。</p>
]]></content>
  </entry>
  <entry>
    <title>leetcode-303 区域和检索 - 数组不可变</title>
    <url>/%E7%AE%97%E6%B3%95/leetcode-303/</url>
    <content><![CDATA[<p>给定一个整数数组  nums，求出数组从索引 i 到 j  (i ≤ j) 范围内元素的总和，包含 i,  j 两点。</p>
<p>示例：</p>
<p>给定 nums = [-2, 0, 3, -5, 2, -1]，求和函数为 sumRange()</p>
<p>sumRange(0, 2) -&gt; 1<br>sumRange(2, 5) -&gt; -1<br>sumRange(0, 5) -&gt; -3<br>说明:</p>
<ol>
<li>你可以假设数组不可变。</li>
<li>会多次调用 sumRange 方法。</li>
</ol>
<ul>
<li><p>暴力解决</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//  this.arr是原数组的复制不是引用</span></span><br><span class="line"><span class="keyword">var</span> NumArray = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.arr = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">        <span class="keyword">this</span>.arr[i] = nums[i]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> </span>i </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">j</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">NumArray.prototype.sumRange = <span class="function"><span class="keyword">function</span>(<span class="params">i, j</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> k = i;k&lt;=j;k++)&#123;</span><br><span class="line">        sum += <span class="keyword">this</span>.arr[k]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * Your NumArray object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * var obj = new NumArray(nums)</span></span><br><span class="line"><span class="comment"> * var param_1 = obj.sumRange(i,j)</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>n&sup2;-缓存法<br>如果需要千万次运用这个和，每次都得重复执行一次循环计算，所以，可以计算一次，时间复杂度o(n&sup2;)，用缓存存储结果到hash表中，需要的时候直接用。当需要计算的次数多时，该方法节省了时间。<br>空间复杂度：o(n&sup2;)，所需的额外空间为o(n&sup2;)，因为i和j都有n个候选空间。<br>时间复杂度：每次查询的时间o(1)，o(n&sup2;)时间用来预计算。在构造函数中完成的预计算需要o(n&sup2;)时间。每个 sumrange 查询的时间复杂性是o(1)，因为哈希表的查找操作是常量时间。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Map&lt;Pair&lt;Integer, Integer&gt;, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">NumArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; nums.length; j++) &#123;</span><br><span class="line">            sum += nums[j];</span><br><span class="line">            map.put(Pair.create(i, j), sum);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sumRange</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> map.get(Pair.create(i, j));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 作者：LeetCode</span></span><br><span class="line"><span class="comment">// 链接：https://leetcode-cn.com/problems/range-sum-query-immutable/solution/qu-yu-he-jian-suo-shu-zu-bu-ke-bian-by-leetcode/</span></span><br><span class="line"><span class="comment">// 来源：力扣（LeetCode）</span></span><br><span class="line"><span class="comment">// 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span></span><br></pre></td></tr></table></figure>

<ul>
<li>n-缓存法<br>&emsp;上面方法空间复杂度o(n&sup2;)，我们有更好的方法优化它嘛？<br>&emsp;我们计算一次o(n)的累计和，从这个一维的累计和中怎么求出sumrange(i,j)？<br>&emsp;<code>sumrange（i，j）=sum[j+1]-sum[i]</code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] sum;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">NumArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    sum = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        sum[i + <span class="number">1</span>] = sum[i] + nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sumRange</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sum[j + <span class="number">1</span>] - sum[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 作者：LeetCode</span></span><br><span class="line"><span class="comment">// 链接：https://leetcode-cn.com/problems/range-sum-query-immutable/solution/qu-yu-he-jian-suo-shu-zu-bu-ke-bian-by-leetcode/</span></span><br><span class="line"><span class="comment">// 来源：力扣（LeetCode）</span></span><br><span class="line"><span class="comment">// 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>注意，在上面的代码中，我们插入了一个虚拟 0 作为 sum 数组中的第一个元素。这个技巧可以避免在 sumrange 函数中进行额外的条件检查。</p>
<p>&emsp;时间复杂度：每次查询的时间 o(1)，o(n)预计算时间。由于累积和被缓存，每个sumrange查询都可以用o(1)时间计算。<br>&emsp;空间复杂度：o(n)。</p>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/range-sum-query-immutable" target="_blank" rel="noopener">https://leetcode-cn.com/problems/range-sum-query-immutable</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>原型链</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-17 电话号码的字母组合</title>
    <url>/uncategorized/leetcode-17/</url>
    <content><![CDATA[<p>给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。</p>
<p>给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。</p>

<p>示例:</p>
<p>&emsp;输入：<code>&quot;23&quot;</code><br>&emsp;输出：<code>[&quot;ad&quot;, &quot;ae&quot;, &quot;af&quot;, &quot;bd&quot;, &quot;be&quot;, &quot;bf&quot;, &quot;cd&quot;, &quot;ce&quot;, &quot;cf&quot;]</code></p>
<p>说明:<br>&emsp;尽管上面的答案是按字典序排列的，但是你可以任意选择答案输出的顺序。</p>
<p>难度：中等</p>
<p>一开始要判断一下如果输入的<code>digit</code>为空时，返回一个空数组。<br>要注意递归函数的返回值，最后要返回两次，遇到最后一个(i === arr.length)时，else需要return，否则需要递归调用函数，并把拼接好的arr3数组传进去，而接收时要用另外的arr2数组接收，for循环arr2数组再给arr3数组赋值，返回的值每轮循环再给arr3，最后让返回总的arr3，在主函数<code>letterCombinations</code>中返回。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">digits</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> letterCombinations = <span class="function"><span class="keyword">function</span>(<span class="params">digits</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(digits === <span class="string">""</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> arr = digits.split(<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">return</span> res(arr,<span class="number">0</span>,[])</span><br><span class="line">&#125;;</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">res</span>(<span class="params">arr,i,arr2</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> arr1;</span><br><span class="line">        <span class="keyword">let</span> arr3 = []</span><br><span class="line">        <span class="keyword">switch</span>(arr[i])&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">`2`</span>:</span><br><span class="line">                arr1 = [<span class="string">`a`</span>,<span class="string">`b`</span>,<span class="string">`c`</span>]</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">`3`</span>:</span><br><span class="line">                arr1 = [<span class="string">`d`</span>,<span class="string">`e`</span>,<span class="string">`f`</span>]</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">`4`</span>:</span><br><span class="line">                arr1 = [<span class="string">`g`</span>,<span class="string">`h`</span>,<span class="string">`i`</span>]</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">`5`</span>:</span><br><span class="line">                arr1 = [<span class="string">`j`</span>,<span class="string">`k`</span>,<span class="string">`l`</span>]</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">`6`</span>:</span><br><span class="line">                arr1 = [<span class="string">`m`</span>,<span class="string">`n`</span>,<span class="string">`o`</span>]</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">`7`</span>:</span><br><span class="line">                arr1 = [<span class="string">`p`</span>,<span class="string">`q`</span>,<span class="string">`r`</span>,<span class="string">`s`</span>]</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">`8`</span>:</span><br><span class="line">                arr1 = [<span class="string">`t`</span>,<span class="string">`u`</span>,<span class="string">`v`</span>]</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">`9`</span>:</span><br><span class="line">                arr1 = [<span class="string">`w`</span>,<span class="string">`x`</span>,<span class="string">`y`</span>,<span class="string">`z`</span>]</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                arr1 = [arr[i]]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i === <span class="number">0</span>)&#123;</span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>;j&lt;arr1.length;j++)&#123;</span><br><span class="line">                arr3.push(arr1[j])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> k = <span class="number">0</span>;k&lt;arr2.length;k++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>;j&lt;arr1.length;j++)&#123;</span><br><span class="line">                    arr3.push(arr2[k]+<span class="string">``</span>+arr1[j])</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        i++</span><br><span class="line">        <span class="keyword">if</span>(i&lt;arr.length)&#123;</span><br><span class="line">            arr3 = res(arr,i,arr3)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> arr3</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr3</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number" target="_blank" rel="noopener">https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number</a></p>
]]></content>
      <tags>
        <tag>算法</tag>
        <tag>递归</tag>
        <tag>字符串递归拼接</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-11 盛最多水的容器</title>
    <url>/%E7%AE%97%E6%B3%95/leetcode-11/</url>
    <content><![CDATA[<p>给定 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p>
<p>说明：你不能倾斜容器，且 n 的值至少为 2。</p>
<!--  -->
<p><img src="https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/07/25/question_11.jpg" alt="图片加载失败"><br>图中垂直线代表输入数组 <code>[1,8,6,2,5,4,8,3,7]</code>。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。</p>
<p>示例:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [1,8,6,2,5,4,8,3,7]</span><br><span class="line">输出: 49</span><br></pre></td></tr></table></figure>

<p>难度：中等</p>
<ol>
<li>暴力解法<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">height</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxArea = <span class="function"><span class="keyword">function</span>(<span class="params">height</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> maxArea = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; height.length<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j = i+<span class="number">1</span>;j &lt; height.length;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(maxArea &lt; (j-i)*(height[j]&gt;height[i]?height[i]:height[j]))&#123;</span><br><span class="line">                maxArea = (j-i)*(height[j]&gt;height[i]?height[i]:height[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxArea</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>时间复杂度：o(n&sup2;)<br>空间复杂度：o(1)，使用恒定的额外空间。</p>
<ol start="2">
<li>双指针<br>头和尾设置双指针，只扫描一次，每次将短的那端指针（下标）往它的下一个移动，长的那端指针（下标）不移动，计算移动后的面积大小和原来最大的面积并比较，直到头尾指针相遇。可以有效避免暴力解法中的无效比较次数。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">height</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxArea = <span class="function"><span class="keyword">function</span>(<span class="params">height</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>,right = height.length<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">let</span> maxArea = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">        <span class="keyword">if</span>(maxArea &lt; (right-left) * <span class="built_in">Math</span>.min(height[left],height[right]))&#123;</span><br><span class="line">            maxArea = (right-left)*(height[left]&gt;height[right]?height[right]:height[left])</span><br><span class="line">        &#125;</span><br><span class="line">        height[left] &gt; height[right] ? right--:left++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxArea</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>时间复杂度：o(n)，扫描一次。<br>空间复杂度：o(1)</p>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/container-with-most-water" target="_blank" rel="noopener">https://leetcode-cn.com/problems/container-with-most-water</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>双指针</tag>
      </tags>
  </entry>
  <entry>
    <title>elementUI upload上传功能的使用</title>
    <url>/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/upload/</url>
    <content><![CDATA[<p><code>URL.createObjectURL()</code>静态方法会创建一个 DOMString，其中包含一个表示参数中给出的对象的URL。这个 URL 的生命周期和创建它的窗口中的 document 绑定。这个新的URL 对象表示指定的 File 对象或 Blob 对象。</p>
<p>Blob 对象表示一个不可变、原始数据的类文件对象。Blob 表示的不一定是JavaScript原生格式的数据。File 接口基于Blob，继承了 blob 的功能并将其扩展使其支持用户系统上的文件。</p>
]]></content>
      <categories>
        <category>前端技术</category>
      </categories>
  </entry>
  <entry>
    <title>Vuex</title>
    <url>/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/vuex/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>前端技术</category>
      </categories>
      <tags>
        <tag>前端技术</tag>
      </tags>
  </entry>
  <entry>
    <title>JS判断空对象</title>
    <url>/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/isNullObject/</url>
    <content><![CDATA[<ol>
<li><p><code>for...in...</code>遍历</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">judgeObj</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> attr <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    <span class="keyword">return</span>  <span class="built_in">console</span>.log(<span class="string">'非空对象'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">'空对象'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>JSON.stringify()</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">JSON</span>.stringify(c)==<span class="string">'&#123;&#125;'</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'空对象'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>ES6的<code>Object.keys()</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">Object</span>.keys(obj).length === <span class="number">0</span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'空对象'</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'非空对象'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p><code>Object.keys()</code><br>遍历对象属性。</p>
<p>传入的参数是一个对象，返回的是一个数组，数组中包含的是该对象所有的属性名。</p>
]]></content>
      <categories>
        <category>前端技术</category>
      </categories>
      <tags>
        <tag>前端技术</tag>
      </tags>
  </entry>
  <entry>
    <title>WEB引用CSS文件</title>
    <url>/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/link-impoCss/</url>
    <content><![CDATA[<p>使用不同的方法来引用CSS样式表，最终到达的效果相同，但是使用不同方法应用的CSS文件将影响到SEO及网页打开速度效率。</p>
<ol>
<li><code>&lt;div style=&quot;&quot;&gt;</code></li>
<li><code>class</code> <code>&lt;style&gt;&lt;/style&gt;</code> </li>
<li><code>@import</code><br>head中放置<br><code>&lt;style&gt; @import url(style.css);&lt;/style&gt;</code></li>
<li><code>link</code><br>head中放置<br><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot; type=&quot;text/css&quot; /&gt;</code></li>
</ol>
<p><strong>link和@import区别与选择</strong><br>首页link和import语法结构不同，前者<link>是html标签，只能放入html源代码中使用，后者可看作为css样式，作用是引入css样式功能。import在html使用时候需要<code>&lt;style type=&quot;text/css&quot;&gt;</code>标签，同时可以直接<code>@import url(CSS文件路径地址);</code>放如css文件或css代码里引入其它css文件。</p>
<p>本质上两者使用选择区别不大，但为了软件中编辑布局网页html代码，一般使用link较多，也推荐使用link。</p>
<p>参考<a href="http://www.divcss5.com/rumen/r56.shtml" target="_blank" rel="noopener">http://www.divcss5.com/rumen/r56.shtml</a>,<a href="http://www.divcss5.com/rumen/r431.shtml" target="_blank" rel="noopener">http://www.divcss5.com/rumen/r431.shtml</a></p>
]]></content>
      <categories>
        <category>前端技术</category>
      </categories>
      <tags>
        <tag>前端技术</tag>
      </tags>
  </entry>
  <entry>
    <title>排列组合与握手</title>
    <url>/uncategorized/pailiezuhe-shakeh/</url>
    <content><![CDATA[<p>做leetcode算法题突然遇到了排列组合…</p>
<p>两两握手问题  C(n,m)<br>相当于组合的C(3,2) <em>数学写法上面2下面3</em><br>C(3,2) = C(3,1) = 3<br>C(3,3) = 1  从三个中取出三个数，无需排列顺序<br>C(n,m) = C(n,n-m) (n&ge;m)<br><code>C(n,m) = A(n,m)/m! = n!/[m!*(n-m)!]</code></p>
<p>排列<br>从n个数中取出m个数 A(n,m)  <em>数学写法上面m下面n</em></p>
<p><code>A(n,m) = n!/(n-m)!</code></p>
<p>0! = 1</p>
<p>从n个元素取出n个元素的一个排列，称为一个全排列。全排列的排列数公式为<code>n!</code>。<br>从n个元素中取m个元素的所有排列的个数，称为排列数。</p>
]]></content>
  </entry>
  <entry>
    <title>leetcode-46 全排列</title>
    <url>/%E7%AE%97%E6%B3%95/leetcode-46/</url>
    <content><![CDATA[<p>给定一个没有重复数字的序列，返回其所有可能的全排列。</p>
<p>示例:</p>
<p>&emsp;输入: <code>[1,2,3]</code><br>&emsp;输出:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  [1,2,3],</span><br><span class="line">  [1,3,2],</span><br><span class="line">  [2,1,3],</span><br><span class="line">  [2,3,1],</span><br><span class="line">  [3,1,2],</span><br><span class="line">  [3,2,1]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>递归解法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[][]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> permute = <span class="function"><span class="keyword">function</span> (<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    result = []</span><br><span class="line">    nums.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a - b</span><br><span class="line">    &#125;)</span><br><span class="line">    find(nums, [])</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = []</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">find</span>(<span class="params">nums, templateList</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">        result.push(templateList.slice())</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        templateList.push(nums[i])</span><br><span class="line">        <span class="keyword">let</span> copy = nums.slice()</span><br><span class="line">        copy.splice(i, <span class="number">1</span>)</span><br><span class="line">        find(copy, templateList)</span><br><span class="line">        templateList.pop()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>另一种递归：<br>先判断数组length，length === 1 则返回该数；<br>length === 2 时，返回两种情况<code>[[1,2],[2,1]]</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> permute = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> len = nums.length;</span><br><span class="line">    <span class="keyword">return</span> perm(len - <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">perm</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> [[nums[<span class="number">0</span>]]];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> [[nums[<span class="number">0</span>], nums[<span class="number">1</span>]], [nums[<span class="number">1</span>], nums[<span class="number">0</span>]]]; <span class="comment">// 代码运行到此处跳出递归</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> ans1 = perm(i <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">var</span> size = ans1.length;</span><br><span class="line">        <span class="keyword">var</span> ans2 = [];</span><br><span class="line">        <span class="keyword">var</span> fixNum = nums[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> k = <span class="number">0</span>; k &lt; size; k++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> l = <span class="number">0</span>; l &lt;= i; l++) &#123;</span><br><span class="line">                <span class="keyword">var</span> arr = ans1[k].slice(); <span class="comment">// 复制数组</span></span><br><span class="line">                arr.splice(l, <span class="number">0</span>, fixNum); <span class="comment">// 在这个数组每一个位置添加fixNum</span></span><br><span class="line">                ans2.push(arr);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans2;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/permutations" target="_blank" rel="noopener">https://leetcode-cn.com/problems/permutations</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>全排列</tag>
        <tag>中等难度</tag>
      </tags>
  </entry>
  <entry>
    <title>WebSocket</title>
    <url>/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/web-socket/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>前端技术</category>
      </categories>
      <tags>
        <tag>前端技术</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-27 移除元素(JS/JAVA)</title>
    <url>/%E7%AE%97%E6%B3%95/leetcode-27/</url>
    <content><![CDATA[<p>给定一个数组 nums 和一个值 val，你需要原地移除所有数值等于 val 的元素，返回移除后数组的新长度。</p>
<p>不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。</p>
<p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p>
<p>示例 1:</p>
<p>给定 nums = <code>[3,2,2,3]</code>, val = 3,</p>
<p>函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。</p>
<p>你不需要考虑数组中超出新长度后面的元素。<br>示例 2:</p>
<p>给定 nums = <code>[0,1,2,2,3,0,4,2]</code>, val = 2,</p>
<p>函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。</p>
<p>注意这五个元素可为任意顺序。</p>
<p>你不需要考虑数组中超出新长度后面的元素。<br>说明:</p>
<p>为什么返回数值是整数，但输出的答案是数组呢?</p>
<p>请注意，输入数组是以“引用”方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p>
<p>你可以想象内部操作如下:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// nums 是以“引用”方式传递的。也就是说，不对实参作任何拷贝</span></span><br><span class="line">int len = removeElement(nums, val);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在函数里修改输入数组对于调用者是可见的。</span></span><br><span class="line"><span class="comment">// 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。</span></span><br><span class="line"><span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    print(nums[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>提示:</strong></p>
<ul>
<li>尝试双指针法。</li>
<li>你是否使用“元素顺序可以更改”这一属性？</li>
<li>当要删除的元素很少时会发生什么？</li>
</ul>
<p><code>splice()</code>法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">val</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> removeElement = <span class="function"><span class="keyword">function</span>(<span class="params">nums, val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> mid = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; nums.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i] === val)&#123;</span><br><span class="line">            nums.filter(i,<span class="number">1</span>)</span><br><span class="line">            i-- <span class="comment">//这个地方用i--而不用i = i - 1，后者空间复杂度大</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">return</span> nums.length</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>（不推荐）另一种解法：<br>时间复杂度和空间复杂度都很大</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">val</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> removeElement = <span class="function"><span class="keyword">function</span>(<span class="params">nums, val</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">var</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">var</span> temp=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">var</span> res=<span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//j永远比i走的快一步</span></span><br><span class="line">        <span class="keyword">while</span>(j&lt;nums.length)&#123;</span><br><span class="line">            <span class="comment">//只有当i和j所指元素不相同的时候，才进行交换</span></span><br><span class="line">            <span class="keyword">if</span>(nums[i]!==nums[j])&#123;</span><br><span class="line">                temp=nums[i];</span><br><span class="line">                nums[i]=nums[j];</span><br><span class="line">                nums[j]=temp;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span>(j&lt;=i ||  nums[j]==val)</span><br><span class="line">                j++; </span><br><span class="line">            <span class="keyword">if</span>(nums[i]!=val)</span><br><span class="line">                i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>JAVA双指针解法：<br>参考<a href="https://leetcode-cn.com/problems/remove-element/solution/yi-chu-yuan-su-by-leetcode/" target="_blank" rel="noopener">leetcode官方解法</a></p>
<ol>
<li><p>双指针<br>时间复杂度：o(n)<br>假设数组总共有 n 个元素，i 和 j 至少遍历 2n 步。<br>空间复杂度：o(1)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeElement</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nums.length; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[j] != val) &#123;</span><br><span class="line">            nums[i] = nums[j];</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>双指针(当要删除的元素很少时)<br>时间复杂度:o(n)<br>i 和 n 最多遍历 n 步。在这个方法中，赋值操作的次数等于要删除的元素的数量。因此，如果要移除的元素很少，效率会更高。<br>空间复杂度:o(1)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeElement</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> n = nums.length;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] == val) &#123;</span><br><span class="line">            nums[i] = nums[n - <span class="number">1</span>];</span><br><span class="line">            n--;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/remove-element" target="_blank" rel="noopener">https://leetcode-cn.com/problems/remove-element</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>数组</tag>
        <tag>原地</tag>
      </tags>
  </entry>
  <entry>
    <title>前端分页实践</title>
    <url>/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/pageination/</url>
    <content><![CDATA[<p>组件调用的html部分：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">page-ination</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:current-page</span>=<span class="string">"currentPage"</span>  </span></span><br><span class="line"><span class="tag">  <span class="attr">:total</span>=<span class="string">"totalElements"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:page-sizes</span>=<span class="string">"pageSizes"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:page-size</span>=<span class="string">"pageSize"</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">size-change</span>=<span class="string">"sizeChange"</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">current-change</span>=<span class="string">"currentChange"</span>&gt;</span><span class="tag">&lt;/<span class="name">page-ination</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>current-page</code>-数字——当前页<br><code>totalElements</code>-数字——全部数据总量<br><code>page-sizes</code>-数组——（可以选择）每页显示数据量<br><code>page-size</code>-数字——当前每页显示的数据量<br><code>size-change</code>-方法——每页数据量改变时调用该方法<br><code>current-change</code>-方法——切换页面时调用该方法</p>
<p><strong>思路：</strong><br>前端获取后台所有的数据</p>
<p>判断 (数据总数) &ge; (当前页*页容量) 的大小，判断当前页是不是最后一页（前面比较是true时，当前页不是最后一页 或者 当前页是最后一页 但最后一页正好放满，比较是false时，当前页是最后一页但未放满），当前页的容量(currentPageNum) = 页面最大容量(pageSize) || 最后一页的数据量(<code>this.totalElements % this.pageSize</code>)<br>此时，for循环(i = 当前页应该放的第一条数据的下标; i &lt; 当前页第一条数据的下标+当前页的容量(<code>(this.currentPage - 1) * this.pageSize +; currentPageNum</code>; i++){页面显示数据的数组.push(全部数据的数组<code>[i]</code>)}，如下：</p>
<p><code>this.Act</code> 是显示在界面上的分页数据<br><code>this.allData</code>是所有数据<br><code>elements</code>是存放数据的数组</p>
<p>JS初始化<code>init()</code>部分：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> currentPageNum = <span class="keyword">this</span>.totalElements &gt;= <span class="keyword">this</span>.currentPage * <span class="keyword">this</span>.pageSize ? <span class="keyword">this</span>.pageSize : <span class="keyword">this</span>.totalElements % <span class="keyword">this</span>.pageSize</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = (<span class="keyword">this</span>.currentPage - <span class="number">1</span>) * <span class="keyword">this</span>.pageSize; i &lt; (<span class="keyword">this</span>.currentPage - <span class="number">1</span>) * <span class="keyword">this</span>.pageSize + currentPageNum; i++) &#123;</span><br><span class="line">  <span class="keyword">this</span>.Act.elements.push(<span class="keyword">this</span>.allData.elements[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>methods:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当页面显示数量(size)change时候</span></span><br><span class="line">sizeChange(val) &#123;</span><br><span class="line">  <span class="comment">//val是修改后的size值</span></span><br><span class="line">  <span class="keyword">this</span>.pageSize = val</span><br><span class="line">  <span class="keyword">this</span>.currentPage = <span class="number">1</span> <span class="comment">//当前页置为1</span></span><br><span class="line">  <span class="keyword">this</span>.init() <span class="comment">//初始化数据</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 当切换页数的时候</span></span><br><span class="line">currentChange(val) &#123;</span><br><span class="line">  <span class="comment">//val是当前页数</span></span><br><span class="line">  <span class="keyword">this</span>.currentPage = val</span><br><span class="line">  <span class="keyword">this</span>.init() <span class="comment">//初始化数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端技术</category>
      </categories>
      <tags>
        <tag>前端技术</tag>
      </tags>
  </entry>
  <entry>
    <title>JS向上取整，向下取整，四舍五入...</title>
    <url>/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/js-num/</url>
    <content><![CDATA[<p>以下返回值为结果，不修改参数：</p>
<p><code>parseInt(Number)</code>保留整数</p>
<p><code>Math.floor(Number)</code>向下取整(往小的方向去取)  </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.floor(<span class="number">-1.55</span>) </span><br><span class="line"><span class="comment">// -2</span></span><br></pre></td></tr></table></figure>

<p><code>Math.ceil(Number)</code>向上取整(往大的方向去取)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Math</span>.ceil(<span class="number">-1.55</span>) </span><br><span class="line"><span class="comment">// -1</span></span><br></pre></td></tr></table></figure>

<p><code>Math.round(Number)</code>四舍五入</p>
<p><code>Math.abs(Number)</code>取绝对值</p>
<p><code>Math.max(1,2,...)</code>返回较大值</p>
<p><code>Math.min(1,2,...)</code>返回较小值</p>
<p><code>Math.random()</code>返回<code>[0,1]</code>区间内的随机数</p>
<p><code>^</code>代表异或<br>不同为1，相同为0<br>例：<br><code>999^500^999 = 500</code><br><code>999^999 = 0</code><br>以此类推…</p>
<p><strong>关于<code>Math.floor()</code>与<code>Math.parseInt()</code></strong><br>都是向下取整数，但是在转换时会有精度问题<br>例如：<br><code>Math.floor(1.999999999999999)</code>(15个9) 返回结果为1<br>而<br><code>Math.floor(1.9999999999999999)</code>(16个9)返回结果为2</p>
]]></content>
      <categories>
        <category>前端技术</category>
      </categories>
      <tags>
        <tag>前端技术</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-136 只出现一次的数字(JS)</title>
    <url>/%E7%AE%97%E6%B3%95/leetcode-136/</url>
    <content><![CDATA[<p>给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p>
<p>说明：</p>
<p>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</p>
<p>示例 1:</p>
<p>&emsp;输入: <code>[2,2,1]</code><br>&emsp;输出: 1<br>示例 2:</p>
<p>&emsp;输入: <code>[4,1,2,1,2]</code><br>&emsp;输出: 4</p>
<p>先排序然后循环查找：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> singleNumber = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> length = nums.length</span><br><span class="line">    <span class="keyword">let</span> newArray = nums.sort()</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;length;i=i+<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(newArray[i] !== newArray[i+<span class="number">1</span>])&#123;</span><br><span class="line">            <span class="keyword">return</span> newArray[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>异或：(比上面时间复杂度明显减少，推荐)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> singleNumber = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> length = nums.length</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line">        a = a ^ nums[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/single-number" target="_blank" rel="noopener">https://leetcode-cn.com/problems/single-number</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>vue随笔（二）</title>
    <url>/vue/vue2/</url>
    <content><![CDATA[<h1 id="深入了解组件"><a href="#深入了解组件" class="headerlink" title="深入了解组件"></a>深入了解组件</h1><h2 id="组件注册"><a href="#组件注册" class="headerlink" title="组件注册"></a>组件注册</h2><h3 id="组件名"><a href="#组件名" class="headerlink" title="组件名"></a>组件名</h3><p>组件名大小写</p>
<ol>
<li>使用 kebab-case(<strong>短横线分隔命名</strong>)<br><code>Vue.component(&#39;my-component-name&#39;, { /* ... */ })</code></li>
</ol>
<p>当使用 kebab-case (<strong>短横线分隔命名</strong>) 定义一个组件时，你也必须在引用这个自定义元素时使用 kebab-case，例如 <code>&lt;my-component-name&gt;</code>。</p>
<ol start="2">
<li>使用 PascalCase(<strong>首字母大写命名</strong>)<br><code>Vue.component(&#39;MyComponentName&#39;, { /* ... */ })</code><br>当使用 PascalCase (<strong>首字母大写命名</strong>) 定义一个组件时，你在引用这个自定义元素时两种命名法都可以使用。也就是说 <code>&lt;my-component-name&gt;</code> 和 <code>&lt;MyComponentName&gt;</code> 都是可接受的。<strong><em>注意，尽管如此，直接在 DOM (即非字符串的模板) 中使用时只有 kebab-case 是有效的。</em></strong><a id="more"></a>
<h3 id="全局注册"><a href="#全局注册" class="headerlink" title="全局注册"></a>全局注册</h3>全局注册：<br><code>Vue.component(&#39;my-component-name&#39;, { /* ... */ })</code><br>它们在注册之后可以用在任何新创建的 Vue 根实例 (new Vue) 的模板中。比如：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'component-a'</span>, &#123; <span class="comment">/* ... */</span> &#125;)</span><br><span class="line">Vue.component(<span class="string">'component-b'</span>, &#123; <span class="comment">/* ... */</span> &#125;)</span><br><span class="line">Vue.component(<span class="string">'component-c'</span>, &#123; <span class="comment">/* ... */</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123; <span class="attr">el</span>: <span class="string">'#app'</span> &#125;)</span><br></pre></td></tr></table></figure>

</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component-a</span>&gt;</span><span class="tag">&lt;/<span class="name">component-a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component-b</span>&gt;</span><span class="tag">&lt;/<span class="name">component-b</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component-c</span>&gt;</span><span class="tag">&lt;/<span class="name">component-c</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>在所有子组件中也是如此，也就是说这三个组件在各自内部也都可以相互使用。</strong></p>
<h3 id="局部注册"><a href="#局部注册" class="headerlink" title="局部注册"></a>局部注册</h3><p>原因：全局注册往往是不够理想的。比如，如果你使用一个像 webpack 这样的构建系统，全局注册所有的组件意味着即便你已经不再使用一个组件了，它仍然会被包含在你最终的构建结果中。这造成了用户下载的 JavaScript 的无谓的增加。</p>
<p>在这些情况下，你可以通过一个普通的 JavaScript 对象来定义组件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ComponentA = &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="keyword">var</span> ComponentB = &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="keyword">var</span> ComponentC = &#123; <span class="comment">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure>

<p>然后在 components 选项中定义你想要使用的组件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  components: &#123;</span><br><span class="line">    <span class="string">'component-a'</span>: ComponentA,</span><br><span class="line">    <span class="string">'component-b'</span>: ComponentB</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>对于 components 对象中的每个属性来说，其<strong>属性名就是自定义元素的名字</strong>，<strong>其属性值就是这个组件的选项对象</strong>。<br>注意局部注册的组件在其子组件中不可用。例如，如果你希望 ComponentA 在 ComponentB 中可用，则你需要这样写：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ComponentA = &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ComponentB = &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    <span class="string">'component-a'</span>: ComponentA</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Babel,ES6和webpack：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ComponentA <span class="keyword">from</span> <span class="string">'./ComponentA.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    ComponentA</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="模块系统"><a href="#模块系统" class="headerlink" title="模块系统"></a>模块系统</h3><h4 id="在模块系统中局部注册"><a href="#在模块系统中局部注册" class="headerlink" title="在模块系统中局部注册"></a>在模块系统中局部注册</h4><p>最好创建一个components目录，并将每个组件放置在其各自的文件中。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ComponentA <span class="keyword">from</span> <span class="string">'./ComponentA'</span></span><br><span class="line"><span class="keyword">import</span> ComponentC <span class="keyword">from</span> <span class="string">'./ComponentC'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    ComponentA,</span><br><span class="line">    ComponentC</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在 ComponentA 和 ComponentC 都可以在 ComponentB 的模板中使用了。</p>
<h4 id="基础组件的自动化全局注册"><a href="#基础组件的自动化全局注册" class="headerlink" title="基础组件的自动化全局注册"></a>基础组件的自动化全局注册</h4><p>可能你的许多组件只是包裹了一个输入框或按钮之类的元素，是相对通用的。我们有时候会把它们称为基础组件，它们会在各个组件中被频繁的用到。<br>所以会导致很多组件里都会有一个包含基础组件的长列表：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> BaseButton <span class="keyword">from</span> <span class="string">'./BaseButton.vue'</span></span><br><span class="line"><span class="keyword">import</span> BaseIcon <span class="keyword">from</span> <span class="string">'./BaseIcon.vue'</span></span><br><span class="line"><span class="keyword">import</span> BaseInput <span class="keyword">from</span> <span class="string">'./BaseInput.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    BaseButton,</span><br><span class="line">    BaseIcon,</span><br><span class="line">    BaseInput</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而只是用于模板中的一小部分：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">BaseInput</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">"searchText"</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">keydown.enter</span>=<span class="string">"search"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">BaseButton</span> @<span class="attr">click</span>=<span class="string">"search"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">BaseIcon</span> <span class="attr">name</span>=<span class="string">"search"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">BaseButton</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>幸好如果你使用了 webpack (或在内部使用了 webpack 的 Vue CLI 3+)，那么就可以使用 require.context 只全局注册这些非常通用的基础组件。这里有一份可以让你在应用入口文件 (比如 src/main.js) 中全局导入基础组件的示例代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> upperFirst <span class="keyword">from</span> <span class="string">'lodash/upperFirst'</span></span><br><span class="line"><span class="keyword">import</span> camelCase <span class="keyword">from</span> <span class="string">'lodash/camelCase'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> requireComponent = <span class="built_in">require</span>.context(</span><br><span class="line">  <span class="comment">// 其组件目录的相对路径</span></span><br><span class="line">  <span class="string">'./components'</span>,</span><br><span class="line">  <span class="comment">// 是否查询其子目录</span></span><br><span class="line">  <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// 匹配基础组件文件名的正则表达式</span></span><br><span class="line">  /Base[A-Z]\w+\.(vue|js)$/</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">requireComponent.keys().forEach(<span class="function"><span class="params">fileName</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 获取组件配置</span></span><br><span class="line">  <span class="keyword">const</span> componentConfig = requireComponent(fileName)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取组件的 PascalCase 命名</span></span><br><span class="line">  <span class="keyword">const</span> componentName = upperFirst(</span><br><span class="line">    camelCase(</span><br><span class="line">      <span class="comment">// 获取和目录深度无关的文件名</span></span><br><span class="line">      fileName</span><br><span class="line">        .split(<span class="string">'/'</span>)</span><br><span class="line">        .pop()</span><br><span class="line">        .replace(<span class="regexp">/\.\w+$/</span>, <span class="string">''</span>)</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 全局注册组件</span></span><br><span class="line">  Vue.component(</span><br><span class="line">    componentName,</span><br><span class="line">    <span class="comment">// 如果这个组件选项是通过 `export default` 导出的，</span></span><br><span class="line">    <span class="comment">// 那么就会优先使用 `.default`，</span></span><br><span class="line">    <span class="comment">// 否则回退到使用模块的根。</span></span><br><span class="line">    componentConfig.default || componentConfig</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>记住<strong>全局注册的行为必须在根 Vue 实例 (通过 new Vue) 创建之前发生</strong>。</p>
<h2 id="Prop"><a href="#Prop" class="headerlink" title="Prop"></a>Prop</h2><h3 id="Prop的大小写"><a href="#Prop的大小写" class="headerlink" title="Prop的大小写"></a>Prop的大小写</h3><p>HTML 中的特性名是大小写<strong>不敏感</strong>的，所以浏览器会把所有大写字符解释为小写字符。这意味着<strong>当你使用 DOM 中的模板时，camelCase (驼峰命名法) 的 prop 名需要使用其等价的 kebab-case (短横线分隔命名) 命名</strong>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'blog-post'</span>, &#123;</span><br><span class="line">  <span class="comment">// 在 JavaScript 中是 camelCase 的</span></span><br><span class="line">  props: [<span class="string">'postTitle'</span>],</span><br><span class="line">  template: <span class="string">'&lt;h3&gt;&#123;&#123; postTitle &#125;&#125;&lt;/h3&gt;'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在 HTML 中是 kebab-case 的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">post-title</span>=<span class="string">"hello!"</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>重申一次，如果你使用<strong>字符串模板</strong>，那么这个限制就不存在了。</p>
<h3 id="Prop类型"><a href="#Prop类型" class="headerlink" title="Prop类型"></a>Prop类型</h3><p>字符串数组形式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">props:[<span class="string">'title'</span>,<span class="string">'likes'</span>,<span class="string">'author'</span>]</span><br></pre></td></tr></table></figure>

<p>通常，我们会希望prop有指定的值类型，这时，可以以对象形式列出prop：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">props:&#123;</span><br><span class="line">  title: <span class="built_in">String</span>,</span><br><span class="line">  likes: <span class="built_in">Number</span>,</span><br><span class="line">  is: <span class="built_in">Boolean</span>,</span><br><span class="line">  arr: <span class="built_in">Array</span>,</span><br><span class="line">  author: <span class="built_in">Object</span>,</span><br><span class="line">  call: <span class="built_in">Function</span>,</span><br><span class="line">  contactsPromise: <span class="built_in">Promise</span> <span class="comment">//或者别的constructor</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这不仅为你的组件提供了文档，还会在它们遇到错误的类型时从浏览器的 JavaScript 控制台提示用户。</p>
<h3 id="传递静态或动态Prop"><a href="#传递静态或动态Prop" class="headerlink" title="传递静态或动态Prop"></a>传递静态或动态Prop</h3><p>传静态值<br><code>&lt;blog-post title=&#39;My journey with Vue&#39;&gt;&lt;/blog-post&gt;</code><br>动态赋值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 动态赋予一个变量的值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">:title</span>=<span class="string">"post.title"</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 动态赋予一个复杂表达式的值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">:title</span>=<span class="string">"post.title + 'by' + post.author.name"</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>In fact,任何类型的值都可以传给一个prop</p>
<h4 id="传数字"><a href="#传数字" class="headerlink" title="传数字"></a>传数字</h4><p>注意：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 即便 `42` 是静态的，我们仍然需要 `v-bind` 来告诉 Vue --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这是一个 JavaScript 表达式而不是一个字符串。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">:likes</span>=<span class="string">"42"</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="传Boolean值"><a href="#传Boolean值" class="headerlink" title="传Boolean值"></a>传Boolean值</h4><p>注意：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 包含该 prop 没有值的情况在内，都意味着 `true`。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">is-published</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 即便 `false` 是静态的，我们仍然需要 `v-bind` 来告诉 Vue --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这是一个 JavaScript 表达式而不是一个字符串。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">:is-published</span>=<span class="string">"false"</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="传数组"><a href="#传数组" class="headerlink" title="传数组"></a>传数组</h4><p>注意：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 即便数组是静态的，我们仍然需要 `v-bind` 来告诉 Vue --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这是一个 JavaScript 表达式而不是一个字符串。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">:comment-ids</span>=<span class="string">"[234, 266, 273]"</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="传对象"><a href="#传对象" class="headerlink" title="传对象"></a>传对象</h4><p>注意：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 即便对象是静态的，我们仍然需要 `v-bind` 来告诉 Vue --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这是一个 JavaScript 表达式而不是一个字符串。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blog-post</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-bind:author</span>=<span class="string">"&#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">    name: 'Veronica',</span></span></span><br><span class="line"><span class="tag"><span class="string">    company: 'Veridian Dynamics'</span></span></span><br><span class="line"><span class="tag"><span class="string">  &#125;"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="传入一个对象的所有属性"><a href="#传入一个对象的所有属性" class="headerlink" title="传入一个对象的所有属性"></a>传入一个对象的所有属性</h4><p>如果你想要将一个对象的所有属性都作为 prop 传入，你可以使用不带参数的 v-bind (取代 v-bind:prop-name)。例如，对于一个给定的对象 post：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">post: &#123;</span><br><span class="line">  id: <span class="number">1</span>,</span><br><span class="line">  title: <span class="string">'My Journey with Vue'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>&lt;blog-post v-bind=&quot;post&quot;&gt;&lt;/blog-post&gt;</code><br>等价于</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blog-post</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-bind:id</span>=<span class="string">"post.id"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-bind:title</span>=<span class="string">"post.title"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="单向数据流"><a href="#单向数据流" class="headerlink" title="单向数据流"></a>单向数据流</h3><p><strong>所有的 prop 都使得其父子 prop 之间形成了一个单向下行绑定：父级 prop 的更新会向下流动到子组件中，但是反过来则不行。这样会防止从子组件意外改变父级组件的状态，从而导致你的应用的数据流向难以理解。</strong></p>
<p><strong>额外的，每次父级组件发生更新时，子组件中所有的 prop 都将会刷新为最新的值。这意味着你不应该在一个子组件内部改变 prop。如果你这样做了，Vue 会在浏览器的控制台中发出警告。</strong></p>
<p>这里有两种常见的试图改变一个 prop 的情形：</p>
<p>这个 prop 用来传递一个初始值；这个子组件接下来希望将其作为一个本地的 prop 数据来使用。在这种情况下，最好定义一个本地的 data 属性并将这个 prop 用作其初始值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">props: [<span class="string">'initialCounter'</span>],</span><br><span class="line">data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    counter: <span class="keyword">this</span>.initialCounter</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个 prop 以一种原始的值传入且需要进行转换。在这种情况下，最好使用这个 prop 的值来定义一个计算属性：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">props: [<span class="string">'size'</span>],</span><br><span class="line">computed: &#123;</span><br><span class="line">  normalizedSize: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.size.trim().toLowerCase()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：注意在 JavaScript 中对象和数组是通过引用传入的，所以对于一个数组或对象类型的 prop 来说，在子组件中改变这个对象或数组本身将会影响到父组件的状态。</p>
<h3 id="Prop验证"><a href="#Prop验证" class="headerlink" title="Prop验证"></a>Prop验证</h3><p>我们可以为组件的 prop 指定验证要求，例如你知道的这些类型。如果有一个需求没有被满足，则 Vue 会在浏览器控制台中警告你。这在开发一个会被别人用到的组件时尤其有帮助。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'my-component'</span>,&#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    <span class="comment">// 基础的类型检查('null'和'undefined'会通过任何类型验证)</span></span><br><span class="line">    propA: <span class="built_in">Number</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 多个可能的类型</span></span><br><span class="line">    propB: [<span class="built_in">String</span>, <span class="built_in">Number</span>],</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 必填的字符串</span></span><br><span class="line">    propC: &#123;</span><br><span class="line">      type: <span class="built_in">Number</span>,</span><br><span class="line">      required: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 带有默认值的数字</span></span><br><span class="line">    propD: &#123;</span><br><span class="line">      type:<span class="built_in">Number</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="number">100</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 带有默认值的对象</span></span><br><span class="line">    propE: &#123;</span><br><span class="line">      type: <span class="built_in">Object</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">message</span>:<span class="string">'hello'</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// * 自定义验证函数</span></span><br><span class="line">    propF: &#123;</span><br><span class="line">      validator:<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 这个值必须匹配下列字符串中的一个</span></span><br><span class="line">        <span class="keyword">return</span> [<span class="string">'success'</span>,<span class="string">'warning'</span>,<span class="string">'danger'</span>].indexOf(value) !== <span class="number">-1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>当prop验证失败时，Vue将会产生一个控制台的警告<br>注意：<strong>prop会在一个组件实例创建之前进行验证，所以实例的属性 (如 data、computed 等) 在 default 或 validator 函数中是不可用的。</strong></p>
<h4 id="类型检查"><a href="#类型检查" class="headerlink" title="类型检查"></a>类型检查</h4><p>type可以是下列原生构造函数中的一个：</p>
<ul>
<li><p>String</p>
</li>
<li><p>Number</p>
</li>
<li><p>Boolean</p>
</li>
<li><p>Function</p>
</li>
<li><p>Array</p>
</li>
<li><p>Object</p>
</li>
<li><p>Date</p>
</li>
<li><p>Symbol</p>
</li>
</ul>
<p>额外的，type 还可以是一个自定义的构造函数，并且通过 <code>instanceof</code> 来进行检查确认。例如，给定下列现成的构造函数：<br><code>instanceof</code>判断一个对象是否为一个类的实例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">firstName, lastName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.firstName = firstName</span><br><span class="line">  <span class="keyword">this</span>.lastName = lastName</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>你可以使用：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'blog-post'</span>, &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    author: Person</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>来验证 <code>author</code> prop 的值是否是通过 new Person 创建的。</p>
<h3 id="非prop的特性"><a href="#非prop的特性" class="headerlink" title="非prop的特性"></a>非prop的特性</h3><p>一个非 prop 特性是指传向一个组件，但是该组件并没有相应 prop 定义的特性。</p>
<p>因为显式定义的 prop 适用于向一个子组件传入信息，然而组件库的作者并不总能预见组件会被用于怎样的场景。这也是为什么组件可以接受任意的特性，而这些特性会被添加到这个组件的根元素上。</p>
<p>例如，想象一下你通过一个 Bootstrap 插件使用了一个第三方的 <code>&lt;bootstrap-date-input&gt;</code> 组件，这个插件需要在其<code>&lt;input&gt;</code> 上用到一个 data-date-picker 特性。我们可以将这个特性添加到你的组件实例上：</p>
<p><code>&lt;bootstrap-date-input data-date-picker=&quot;activated&quot;&gt;&lt;/bootstrap-date-input&gt;</code><br>然后这个 <code>data-date-picker=&quot;activated&quot;</code> 特性就会自动添加到 <code>&lt;bootstrap-date-input&gt;</code> 的根元素上。</p>
<h4 id="替换-合并已有的特性"><a href="#替换-合并已有的特性" class="headerlink" title="替换/合并已有的特性"></a>替换/合并已有的特性</h4><h4 id="禁用特性继承"><a href="#禁用特性继承" class="headerlink" title="禁用特性继承"></a>禁用特性继承</h4><h2 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h2><h3 id="事件名"><a href="#事件名" class="headerlink" title="事件名"></a>事件名</h3><p>不同于组件和prop，事件名不存在任何自动化的大小写转换。而是触发的事件名需要完全匹配监听这个事件所用的名称。<br>举个例子，如果触发一个camelCase名字的事件：<br><code>this.$emit(&#39;myEvent&#39;)</code><br>则监听这个名字的kabab-case版本是不会有任何效果的：<br><code>&lt;my-component v-on:my-event=&quot;doSomething&quot;&gt;&lt;/my-component&gt;</code></p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-21  合并两个有序链表(JS)</title>
    <url>/%E7%AE%97%E6%B3%95/leetcode-21/</url>
    <content><![CDATA[<p>难度：简单<br>将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p>
<p>示例：</p>
<p>&emsp;输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4<br>&emsp;输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</p>
<a id="more"></a>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.next = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;ListNode&#125;</span> <span class="variable">l1</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;ListNode&#125;</span> <span class="variable">l2</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;ListNode&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> mergeTwoLists = <span class="function"><span class="keyword">function</span>(<span class="params">l1, l2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> head1 = l1</span><br><span class="line">    <span class="keyword">let</span> head2 = l2</span><br><span class="line">    <span class="keyword">let</span> l3;</span><br><span class="line">    <span class="keyword">let</span> l4;</span><br><span class="line">    <span class="keyword">if</span>(!l1 || !l2)&#123;</span><br><span class="line">        <span class="keyword">return</span> l1?l1:l2</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head1.val &gt; head2.val)&#123;</span><br><span class="line">            l3 = head2</span><br><span class="line">            l4 = l3</span><br><span class="line">            head2 = head2.next</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            l3 = head1</span><br><span class="line">            l4 = l3</span><br><span class="line">            head1 = head1.next</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(head1&amp;&amp;head2)&#123;</span><br><span class="line">            <span class="keyword">if</span>(head1.val &gt; head2.val)&#123;</span><br><span class="line">                l4.next = head2</span><br><span class="line">                l4 = l4.next</span><br><span class="line">                head2 = head2.next</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                l4.next = head1</span><br><span class="line">                l4 = l4.next</span><br><span class="line">                head1 = head1.next</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        l4.next = head1? head1:head2</span><br><span class="line">        <span class="keyword">return</span> l3</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入</span><br><span class="line">  [1,2,4]</span><br><span class="line">  [1,3,4]</span><br><span class="line">输出</span><br><span class="line">  [1,1,2,3,4,4]</span><br><span class="line">预期结果</span><br><span class="line">  [1,1,2,3,4,4]</span><br></pre></td></tr></table></figure>

<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/merge-two-sorted-lists" target="_blank" rel="noopener">https://leetcode-cn.com/problems/merge-two-sorted-lists</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>链表</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode-14 最长公共前缀（JS）</title>
    <url>/%E7%AE%97%E6%B3%95/leetcode-14/</url>
    <content><![CDATA[<p><strong>编写一个函数来查找字符串数组中的最长公共前缀。</strong><br><strong>如果不存在公共前缀，返回空字符串 “”。</strong></p>
<p>示例 1:</p>
<p>&emsp;输入: [“flower”,”flow”,”flight”]<br>&emsp;输出: “fl”</p>
<p>示例 2:<br>&emsp;输入: [“dog”,”racecar”,”car”]<br>&emsp;输出: “”<br>&emsp;解释: 输入不存在公共前缀。</p>
<p>示例 3:<br>&emsp;输入:[“a”]<br>&emsp;输出：”a”</p>
<p>说明:<br>&emsp;所有输入只包含小写字母 a-z 。</p>
<a id="more"></a>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string[]&#125;</span> <span class="variable">strs</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> longestCommonPrefix = <span class="function"><span class="keyword">function</span>(<span class="params">strs</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> str1 = strs[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">let</span> length = str1.length</span><br><span class="line">    <span class="keyword">let</span> string1 = <span class="string">''</span></span><br><span class="line">    <span class="keyword">let</span> j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> flag = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(length--)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>;i &lt; strs.length;i++ )&#123;</span><br><span class="line">            <span class="keyword">if</span>(strs[i][j] === str1[j])&#123;</span><br><span class="line">                flag = <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> string1</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag === <span class="number">1</span>)&#123;</span><br><span class="line">            string1 += str1[j]</span><br><span class="line">        &#125;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> string1</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>




<p>正解：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string[]&#125;</span> <span class="variable">strs</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;string&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> longestCommonPrefix = <span class="function"><span class="keyword">function</span>(<span class="params">strs</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> str1 = strs[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">let</span> length = str1?str1.length:<span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> string1 = <span class="string">''</span></span><br><span class="line">    <span class="keyword">let</span> j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> flag = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span>(strs.length === <span class="number">1</span>)&#123;    <span class="comment">//当只有一个字符串时，全部输出 </span></span><br><span class="line">        <span class="keyword">return</span> strs[<span class="number">0</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(j &lt; length)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>;i &lt; strs.length;i++ )&#123;</span><br><span class="line">            <span class="keyword">if</span>(strs[i][j] === str1[j])&#123;</span><br><span class="line">                flag = <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> string1</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag === <span class="number">1</span>)&#123;</span><br><span class="line">            string1 += str1[j]</span><br><span class="line">        &#125;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> string1</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/longest-common-prefix" target="_blank" rel="noopener">https://leetcode-cn.com/problems/longest-common-prefix</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>Js随笔</title>
    <url>/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/jsT/</url>
    <content><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="Array-map"><a href="#Array-map" class="headerlink" title="Array.map()"></a>Array.map()</h2><p>不修改原数组<br>返回新数组<br>将数组中每个元素执行函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> arr2 = arr.map( <span class="function"><span class="params">x</span> =&gt;</span> x * <span class="number">2</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr)   [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr2)  [<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>]</span><br></pre></td></tr></table></figure>

<h2 id="Array-forEach"><a href="#Array-forEach" class="headerlink" title="Array.forEach()"></a>Array.forEach()</h2><p>修改原数组<br>无返回值<br>将数组中每个元素执行函数</p>
<h2 id="Array-filter"><a href="#Array-filter" class="headerlink" title="Array.filter()"></a>Array.filter()</h2><p>创建新数组<br>不改变原始数组<br>将所有元素进行判断，将<strong>满足条件的元素</strong>作为一个新的数组返回</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ages = [<span class="number">32</span>, <span class="number">33</span>, <span class="number">16</span>, <span class="number">40</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkAdult</span>(<span class="params">age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> age &gt;= <span class="number">18</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> filter = ages.filter(checkAdult);   <span class="comment">//[32, 33, 40]</span></span><br></pre></td></tr></table></figure>

<p>filter()不会检测空数组</p>
<p><code>Array.filter(function(currentValue,index,arr),thisValue)</code><br>function 必需<br>currentValue 必需，当前元素的值<br>index 可选，当前元素的索引值<br>arr 可选，当前元素属于的数组对象<br>thisValue 可选，对象作为该执行回掉时使用，传递给函数，用作this值。如果忽略了thisValue,’this’的值为’undefined’</p>
<h2 id="Array-every"><a href="#Array-every" class="headerlink" title="Array.every()"></a>Array.every()</h2><p>不修改原数组<br>返回Boolean值<br>将所有元素进行判断，如果<strong>所有</strong>元素都满足判断条件，则返回true，否则为false</p>
<h2 id="Array-some"><a href="#Array-some" class="headerlink" title="Array.some()"></a>Array.some()</h2><p>不改变原数组<br>返回Boolean<br>此方法是将所有元素进行判断，如果<strong>存在</strong>元素都满足判断条件，则返回true，若所有元素都不满足判断条件，则返回false</p>
<h2 id="Array-reduce-Array-reduceRight"><a href="#Array-reduce-Array-reduceRight" class="headerlink" title="Array.reduce()-Array.reduceRight()"></a>Array.reduce()-Array.reduceRight()</h2><p>不修改原数组<br>返回值为最后结果<br>所有元素调用返回函数，返回值为最后结果，传入的值必须为函数类型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">   <span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b</span><br><span class="line">   <span class="keyword">let</span> sum = arr.reduce(add)</span><br><span class="line">   <span class="comment">//sum = 15  相当于累加的效果</span></span><br><span class="line">   <span class="comment">//与之相对应的还有一个 Array.reduceRight() 方法，区别是这个是从右向左操</span></span><br></pre></td></tr></table></figure>

<h2 id="Array-push"><a href="#Array-push" class="headerlink" title="Array.push()"></a>Array.push()</h2><p>改变了数组长度<br>返回push的内容</p>
<h2 id="Array-pop"><a href="#Array-pop" class="headerlink" title="Array.pop()"></a>Array.pop()</h2><p>改变了数组长度</p>
<h2 id="Array-unshift"><a href="#Array-unshift" class="headerlink" title="Array.unshift()"></a>Array.unshift()</h2><p>改变了数组长度<br>添加元素到开头</p>
<h2 id="Array-shift"><a href="#Array-shift" class="headerlink" title="Array.shift()"></a>Array.shift()</h2><p>改变了数组长度<br>删除第一个元素</p>
<h2 id="Array-isArray"><a href="#Array-isArray" class="headerlink" title="Array.isArray()"></a>Array.isArray()</h2><p>判断一个对象是否为数组<br>返回Boolean值</p>
<h2 id="Array-concat"><a href="#Array-concat" class="headerlink" title="Array.concat()"></a>Array.concat()</h2><p>原数组不改变<br>返回新数组<br>可以将多个数组拼接成一个数组</p>
<h2 id="Array-toString"><a href="#Array-toString" class="headerlink" title="Array.toString()"></a>Array.toString()</h2><p>将数组转化为字符串</p>
<h2 id="Array-join"><a href="#Array-join" class="headerlink" title="Array.join()"></a>Array.join()</h2><p>将数组转化为字符串<br>Array.join(separator)<br>通过指定分隔符separator分隔</p>
<h2 id="Array-splice"><a href="#Array-splice" class="headerlink" title="Array.splice()"></a>Array.splice()</h2><p>向/从数组中添加/删除项目<br><strong>返回被删除的项目数组</strong><br><strong>该方法会改变原始数组</strong><br><code>Array.splice(BeginIndex,number,item1,item2,...)</code><br><code>BeginIndex</code> 开始位置<br><code>number</code> 删除的个数<br><code>item</code> 新添的元素</p>
<h2 id="Array-sort"><a href="#Array-sort" class="headerlink" title="Array.sort()"></a>Array.sort()</h2><p>改变原始数组<br>排序<br>Array.sort(sortFunction)<br>sortFunction 可选，规定排序顺序，必须是函数，回掉函数<br>回调函数的参数要有两个：第一个参数的元素肯定在第二个参数的元素前面!!!<br>这个方法的排序是看回调函数的返回值：<br>&ensp; 如果返回值大于 0，则位置互换。<br>&ensp; 如果返回值小于 0，则位置不变。</p>
<p>顺序可以是字母或数字，升序或降序<br>注意：当数字是按字母顺序排列时”40”将排在”5”前面。<br>使用数字排序，你必须通过一个函数作为参数来调用。<br>函数指定数字是按照升序还是降序排列。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">9</span>,<span class="number">7</span>,<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&gt;b) <span class="comment">// 如果 a 大于 b,位置互换</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="comment">//否则，位置不变</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 排序结果: 2,7,9</span></span><br></pre></td></tr></table></figure>

<h2 id="Array-indexOf-Array-lastIndexOf"><a href="#Array-indexOf-Array-lastIndexOf" class="headerlink" title="Array.indexOf()-Array.lastIndexOf()"></a>Array.indexOf()-Array.lastIndexOf()</h2><p>搜索数组中的元素，返回下标/返回它最后出现的位置</p>
<h2 id="Array-reverse"><a href="#Array-reverse" class="headerlink" title="Array.reverse()"></a>Array.reverse()</h2><p>反转数组的元素顺序</p>
<h2 id="Array-slice"><a href="#Array-slice" class="headerlink" title="Array.slice()"></a>Array.slice()</h2><p>返回新数组<br>slice()方法可提取字符串的某个部分，并以新的字符串返回被提取的部分。<br>Array.slice(start,end)<br>start 可选<br>end 可选<br>负数则从尾部开始算起</p>
]]></content>
      <categories>
        <category>前端技术</category>
      </categories>
  </entry>
  <entry>
    <title>前端面试Q&amp;A</title>
    <url>/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/qa/</url>
    <content><![CDATA[<h3 id="如何优化SPA应用的首屏记载速度慢的问题？"><a href="#如何优化SPA应用的首屏记载速度慢的问题？" class="headerlink" title="如何优化SPA应用的首屏记载速度慢的问题？"></a>如何优化SPA应用的首屏记载速度慢的问题？</h3><p>减小app.bundel的大小体积</p>
<ol>
<li>公用的js通过script标签外部引入，</li>
<li>浏览器并行下载资源文件</li>
<li>懒加载，调用时加载</li>
<li>加一个loading图，提升用户体验</li>
</ol>
<h3 id="前端优化网站性能？"><a href="#前端优化网站性能？" class="headerlink" title="前端优化网站性能？"></a>前端优化网站性能？</h3><h4 id="减少HTTP请求数量"><a href="#减少HTTP请求数量" class="headerlink" title="减少HTTP请求数量"></a>减少HTTP请求数量</h4><p>在浏览器与服务器进行通信时，主要是通过 HTTP 进行通信。浏览器与服务器需要经过三次握手，每次握手需要花费大量时间。而且不同浏览器对资源文件并发请求数量有限（不同浏览器允许并发数不同），一旦 HTTP 请求数量达到一定数量，资源请求就存在等待状态，这是很致命的，因此减少 HTTP 的请求数量可以很大程度上对网站性能进行优化。</p>
<ol>
<li>雪碧图<br>CSS Sprites：国内俗称 CSS 精灵，这是将多张图片合并成一张图片达到减少 HTTP 请求的一种解决方案，可以通过 CSS background 属性来访问图片内容。这种方案同时还可以减少图片总字节数。</li>
<li>用webpack打包，合并CSS和JS文件。前端工程化打包工具：grunt,gulp,webpack。为了减少HTTP请求数量，可以通过这些工具在发布前将多个CSS或者多个JS文件合并成一个文件。</li>
<li>懒加载。可以控制网页上的内容在一开始无需加载，不需要发请求，等到用户操作真正需要的时候立即加载出内容。这样就控制了网页资源一次性请求数量。</li>
</ol>
<h4 id="控制资源文件加载优先级"><a href="#控制资源文件加载优先级" class="headerlink" title="控制资源文件加载优先级"></a>控制资源文件加载优先级</h4><p>从上到下解析，一般CSS在头部，JS在底部。</p>
<ol>
<li>浏览器缓存，网络资源存储在本地。</li>
<li>减少重排（Reflow）<br>基本原理：重排是 DOM 的变化影响到了元素的几何属性（宽和高），浏览器会重新计算元素的几何属性，会使渲染树中受到影响的部分失效，浏览器会验证 DOM 树上的所有其它结点的 visibility 属性，这也是 Reflow 低效的原因。如果 Reflow 的过于频繁，CPU 使用率就会急剧上升。<br>减少 Reflow，如果需要在 DOM 操作时添加样式，<strong>尽量使用 增加 class 属性，而不是通过 style 操作样式</strong>。<br>&emsp;减少 DOM 操作<br>&emsp;图标使用 IconFont 替换</li>
</ol>
<h3 id="网页从输入网址到渲染完成经历了那些过程？"><a href="#网页从输入网址到渲染完成经历了那些过程？" class="headerlink" title="网页从输入网址到渲染完成经历了那些过程？"></a>网页从输入网址到渲染完成经历了那些过程？</h3><ol>
<li>发送到DNS服务器解析，获取域名对应的web服务器的ip地址。</li>
<li>TCP三次握手。</li>
<li>浏览器向服务器发送http请求。</li>
<li>返回数据。</li>
<li>请求资源。</li>
<li>渲染。<h3 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xmlHttp.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(xmlHttp.readyState === <span class="number">4</span> &amp;&amp; xmlHttp.status === <span class="number">200</span>)&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">xmlHttp.open(<span class="string">'GET'</span>,<span class="string">''</span>,<span class="literal">true</span>)</span><br><span class="line">xmlHttp.send()</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h3><p>100 Continue  继续，一般在发送post请求时，已发送了http header之后服务端将返回此信息，表示确认，之后发送具体参数信息<br>200 OK   正常返回信息<br>201 Created  请求成功并且服务器创建了新的资源<br>202 Accepted  服务器已接受请求，但尚未处理<br>301 Moved Permanently  请求的网页已永久移动到新位置<br>302 Found  临时性重定向<br>303 See Other  临时性重定向，且总是使用 GET 请求新的 URI<br>304 Not Modified  自从上次请求后，请求的网页未修改过<br>400 Bad Request  服务器无法理解请求数据的格式，客户端不应当尝试再次使用相同的内容发起请求<br>401 Unauthorized  请求未授权<br>403 Forbidden  禁止访问<br>404 Not Found  找不到如何与 URI 相匹配的资源<br>500 Internal Server Error  最常见的服务器端错误<br>503 Service Unavailable 服务器端暂时无法处理请求（可能是过载或维护）</p>
<h3 id="UA-User-Agent"><a href="#UA-User-Agent" class="headerlink" title="UA(User Agent)"></a>UA(User Agent)</h3><p>UA 是用户代理，</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">whatBrowser</span>(<span class="params"></span>) </span>&#123;  </span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.Browser.Name.value=navigator.appName;  </span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.Browser.Version.value=navigator.appVersion;  </span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.Browser.Code.value=navigator.appCodeName;  </span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.Browser.Agent.value=navigator.userAgent;  </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> browser = &#123;</span></span><br><span class="line"><span class="javascript">      versions: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> u = navigator.userAgent, app = navigator.appVersion;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> &#123;     <span class="comment">//移动终端浏览器版本信息</span></span></span><br><span class="line"><span class="javascript">              trident: u.indexOf(<span class="string">'Trident'</span>) &gt; <span class="number">-1</span>, <span class="comment">//IE内核</span></span></span><br><span class="line"><span class="javascript">              presto: u.indexOf(<span class="string">'Presto'</span>) &gt; <span class="number">-1</span>, <span class="comment">//opera内核</span></span></span><br><span class="line"><span class="javascript">              webKit: u.indexOf(<span class="string">'AppleWebKit'</span>) &gt; <span class="number">-1</span>, <span class="comment">//苹果、谷歌内核</span></span></span><br><span class="line"><span class="javascript">              gecko: u.indexOf(<span class="string">'Gecko'</span>) &gt; <span class="number">-1</span> &amp;&amp; u.indexOf(<span class="string">'KHTML'</span>) == <span class="number">-1</span>, <span class="comment">//火狐内核</span></span></span><br><span class="line"><span class="javascript">              mobile: !!u.match(<span class="regexp">/AppleWebKit.*Mobile.*/</span>), <span class="comment">//是否为移动终端</span></span></span><br><span class="line"><span class="javascript">              ios: !!u.match(<span class="regexp">/\(i[^;]+;( U;)? CPU.+Mac OS X/</span>), <span class="comment">//ios终端</span></span></span><br><span class="line"><span class="javascript">              android: u.indexOf(<span class="string">'Android'</span>) &gt; <span class="number">-1</span> || u.indexOf(<span class="string">'Linux'</span>) &gt; <span class="number">-1</span>, <span class="comment">//android终端或uc浏览器</span></span></span><br><span class="line"><span class="javascript">              iPhone: u.indexOf(<span class="string">'iPhone'</span>) &gt; <span class="number">-1</span>, <span class="comment">//是否为iPhone或者QQHD浏览器</span></span></span><br><span class="line"><span class="javascript">              iPad: u.indexOf(<span class="string">'iPad'</span>) &gt; <span class="number">-1</span>, <span class="comment">//是否iPad</span></span></span><br><span class="line"><span class="javascript">              webApp: u.indexOf(<span class="string">'Safari'</span>) == <span class="number">-1</span> <span class="comment">//是否web应该程序，没有头部与底部</span></span></span><br><span class="line">          &#125;;</span><br><span class="line">      &#125; (),</span><br><span class="line">      language: (navigator.browserLanguage || navigator.language).toLowerCase()</span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="keyword">if</span> (browser.versions.mobile) &#123;<span class="comment">//判断是否是移动设备打开。browser代码在下面</span></span></span><br><span class="line">      /* var ua = navigator.userAgent.toLowerCase();//获取判断用的对象</span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (ua.match(<span class="regexp">/MicroMessenger/i</span>) == <span class="string">"micromessenger"</span>) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//在微信中打开</span></span></span><br><span class="line"><span class="javascript">      setInterval(WeixinJSBridge.call(<span class="string">'closeWindow'</span>),<span class="number">2000</span>);</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (ua.match(<span class="regexp">/WeiBo/i</span>) == <span class="string">"weibo"</span>) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//在新浪微博客户端打开</span></span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (ua.match(<span class="regexp">/QQ/i</span>) == <span class="string">"qq"</span>) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">//在QQ空间打开</span></span></span><br><span class="line">      &#125;</span><br><span class="line">      if (browser.versions.ios) &#123;</span><br><span class="line"><span class="javascript">      <span class="comment">//是否在IOS浏览器打开</span></span></span><br><span class="line">      &#125; </span><br><span class="line">      if(browser.versions.android)&#123;</span><br><span class="line"><span class="javascript">      <span class="comment">//是否在安卓浏览器打开</span></span></span><br><span class="line">      &#125;*/</span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.location.href = <span class="string">"http://www.baidu.com/wap"</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line">  /*else &#123;</span><br><span class="line"><span class="javascript">  <span class="comment">//否则就是PC浏览器打开</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">window</span>.close();</span></span><br><span class="line">  &#125;    */</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端技术</category>
      </categories>
      <tags>
        <tag>前端技术</tag>
      </tags>
  </entry>
  <entry>
    <title>delete和Vue.delete删除数组的区别</title>
    <url>/vue/vueDelete/</url>
    <content><![CDATA[<p>delete只是被删除的元素变成了 empty/undefined 其他的元素的键值还是不变。<br>Vue.delete直接删除了数组 改变了数组的键值。<br><strong>delete a[1]</strong><br><strong>this.¥delete(b,1)</strong><br>a,b是数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">var</span> b=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">delete</span> a[<span class="number">1</span>]</span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br><span class="line"><span class="keyword">this</span>.$<span class="keyword">delete</span>(b,<span class="number">1</span>)</span><br><span class="line"><span class="built_in">console</span>.log(b)</span><br></pre></td></tr></table></figure>



<a id="more"></a>
<p>原文来自<a href="https://segmentfault.com/a/1190000018225708?utm_source=tag-newest" target="_blank" rel="noopener">https://segmentfault.com/a/1190000018225708?utm_source=tag-newest</a></p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue中给data中的对象属性添加一个新的属性时会发生什么，如何解决？</title>
    <url>/vue/vueAddAttr/</url>
    <content><![CDATA[<p>全局添加对象字段<br><code>Vue.$set([想要添加字段的对象],&#39;字段名&#39;,字段值)</code><br>第一个参数：想要添加字段的对象<br>第二个参数：添加的字段键名<br>第三个参数：添加的字段键值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"value in obj"</span> <span class="attr">:key</span>=<span class="string">"value"</span>&gt;</span></span><br><span class="line">        &#123;&#123;value&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"addObjB"</span>&gt;</span>添加obj.b<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  data () &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      obj: &#123;</span><br><span class="line"><span class="javascript">        a: <span class="string">'obj.a'</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    addObjB () &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.obj.b = <span class="string">'obj.b'</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.obj)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>点击button会发现，obj.b 已经成功添加，但是视图并未刷新。<br>原因在于在Vue实例创建时，obj.b并未声明，因此就没有被Vue转换为响应式的属性，自然就不会触发视图的更新，这时就需要使用Vue的全局api $set()：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">addObjB () &#123;</span><br><span class="line">  <span class="comment">// this.obj.b = 'obj.b'</span></span><br><span class="line">  <span class="keyword">this</span>.$<span class="keyword">set</span>(this.obj, 'b', 'obj.b')</span><br><span class="line">  console.log(this.obj)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>$set()方法相当于手动的去把obj.b处理成一个响应式的属性，此时视图也会跟着改变了。</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue中如何监控某个属性值的变化</title>
    <url>/vue/vueWaDataC/</url>
    <content><![CDATA[<p>比如现在需要监控data中，obj.a 的变化。Vue中监控对象属性的变化你可以这样：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">      obj: &#123;</span><br><span class="line">      handler (newValue, oldValue) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'obj changed'</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      deep: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>deep属性表示深层遍历，但是这么写会监控obj的所有属性变化，并不是我们想要的效果，所以做点修改：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">   <span class="string">'obj.a'</span>: &#123;</span><br><span class="line">      handler (newName, oldName) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'obj.a changed'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>还有一种方法，可以通过computed 来实现，只需要：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    a1 () &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.obj.a</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>利用计算属性的特性来实现，当依赖改变时，便会重新计算一个新值。</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue实现一个双向数据绑定</title>
    <url>/vue/vue-twoWay-data/</url>
    <content><![CDATA[<p>假设有一个输入框组件，用户输入时，同步父组件页面中的数据<br>具体思路：父组件通过 props 传值给子组件，子组件通过 $emit 来通知父组件修改相应的props值，具体实现如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> component = &#123;</span><br><span class="line">  props: [<span class="string">'value'</span>],</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;input type="text" @input="handleInput" :value="value"&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleInput (e) &#123;</span><br><span class="line">      <span class="keyword">this</span>.$emit(<span class="string">'input'</span>, e.target.value)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    CompOne: component</span><br><span class="line">  &#125;,</span><br><span class="line">  el: <span class="string">'#root'</span>,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;comp-one :value1="value" @input="value = arguments[0]"&gt;&lt;/comp-one&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      value: <span class="string">'123'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>可以看到，当输入数据时，父子组件中的数据是同步改变的。<br>我们在父组件中做了两件事，一是给子组件传入props，二是监听input事件并同步自己的value属性。那么这两步操作能否再精简一下呢？答案是可以的，你只需要修改父组件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">template: `</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--&lt;comp-one :value1="value" @input="value = arguments[0]"&gt;&lt;/comp-one&gt;--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">comp-one</span> <span class="attr">v-model</span>=<span class="string">"value"</span>&gt;</span><span class="tag">&lt;/<span class="name">comp-one</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  `</span><br></pre></td></tr></table></figure>

<p>v-model 实际上会帮我们完成上面的两步操作。</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>三次握手，四次挥手</title>
    <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/threeSHands/</url>
    <content><![CDATA[<p>第三次握手：<br>  防止已经失效的连接请求报文段发送给服务端，因而产生错误。</p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode_2 两数相加(JS)</title>
    <url>/%E7%AE%97%E6%B3%95/leetcode-2/</url>
    <content><![CDATA[<h1 id="Tags"><a href="#Tags" class="headerlink" title="Tags"></a>Tags</h1><ul>
<li>链表</li>
<li>数学</li>
</ul>
<h1 id="Difficulty"><a href="#Difficulty" class="headerlink" title="Difficulty"></a>Difficulty</h1><ul>
<li>简单</li>
</ul>
<h1 id="Topic"><a href="#Topic" class="headerlink" title="Topic"></a>Topic</h1><p>  &emsp;给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照<strong>逆序</strong>的方式存储的，并且它们的每个节点只能存储<strong>一位</strong>数字。</p>
<p>  &emsp;如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</p>
<p>  &emsp;您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p>
<h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><p>  &emsp;<strong>输入：</strong>(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)<br>  &emsp;<strong>输出：</strong>7 -&gt; 0 -&gt; 8<br>  &emsp;<strong>原因：</strong>342 + 465 = 807</p>
<a id="more"></a>

<h1 id="Thought"><a href="#Thought" class="headerlink" title="Thought"></a>Thought</h1><p>先创建一个首节点NodeHead（需要一个val），先加一次，加的时候需要判断一下所加的两个数的和是否大于10（两个一位数相加之和最大为18，小于20），做进位或者不进位的标记，从第二位数开始，除了要加两位数，还要把进位的1（有可能为0，但是加了不影响）加上。直到位数少的那个数加完，再次循环把位数多的那个数的多余几位加上进位数1或0创建节点连到后边，最后当两个数都加完，再判断一次进位数是否为1，如果为1，则再新添一个尾节点。最后输出nodeHead。搞定～</p>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>&emsp;<strong>JS代码</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.next = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;ListNode&#125;</span> <span class="variable">l1</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;ListNode&#125;</span> <span class="variable">l2</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;ListNode&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> addTwoNumbers = <span class="function"><span class="keyword">function</span>(<span class="params">l1, l2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> l3 = l1,l4 = l2</span><br><span class="line">    <span class="keyword">let</span> mid = <span class="number">0</span><span class="comment">//进位数</span></span><br><span class="line">    <span class="keyword">let</span> num = l3.val + l4.val  <span class="comment">//相加的和 可能大于10</span></span><br><span class="line">    <span class="keyword">if</span>(num &gt;= <span class="number">10</span>)&#123;<span class="comment">//如果大于10 ，就进位=1，num = num-10</span></span><br><span class="line">        mid = <span class="number">1</span></span><br><span class="line">        num -= <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> nodeHead = <span class="keyword">new</span> ListNode(num)</span><br><span class="line">    <span class="keyword">let</span> nodeNext = nodeHead</span><br><span class="line">    l3 = l3.next</span><br><span class="line">    l4 = l4.next</span><br><span class="line">    <span class="keyword">while</span>(l3&amp;&amp;l4)&#123;</span><br><span class="line">        num = l3.val + l4.val + mid</span><br><span class="line">        <span class="keyword">if</span>(num &gt;= <span class="number">10</span>)&#123;</span><br><span class="line">            num -= <span class="number">10</span></span><br><span class="line">            mid = <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            mid = <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> newNode = <span class="keyword">new</span> ListNode(num)</span><br><span class="line">        nodeNext.next = newNode</span><br><span class="line">        nodeNext = newNode</span><br><span class="line">        l3 = l3.next</span><br><span class="line">        l4 = l4.next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> l5 = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">if</span>(l3)&#123;</span><br><span class="line">        l5 = l3</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(l4)&#123;</span><br><span class="line">        l5 = l4</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(l5)&#123;</span><br><span class="line">        num = l5.val + mid</span><br><span class="line">        <span class="keyword">if</span>(num &gt;= <span class="number">10</span>)&#123;</span><br><span class="line">            num -= <span class="number">10</span></span><br><span class="line">            mid = <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            mid = <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> newNode2 = <span class="keyword">new</span> ListNode(num)</span><br><span class="line">        nodeNext.next = newNode2</span><br><span class="line">        nodeNext = newNode2</span><br><span class="line">        l5 = l5.next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(mid === <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> newNode3 = <span class="keyword">new</span> ListNode(<span class="number">1</span>)</span><br><span class="line">        nodeNext.next = newNode3</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nodeHead</span><br><span class="line">  </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/add-two-numbers" target="_blank" rel="noopener">https://leetcode-cn.com/problems/add-two-numbers</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>链表</tag>
        <tag>数学</tag>
        <tag>简单</tag>
      </tags>
  </entry>
  <entry>
    <title>深拷贝与浅拷贝</title>
    <url>/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/deepCP-SCP/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>var newObj = obj;</code><br><code>newObj.xxx = xxx</code><br> 实际上，这个时候newObj和obj两个引用指向的是同一个对象，我修改了newObj，实际上也就等同于修改了obj，这，就是我和深浅拷贝的第一次相遇。</p>
<h1 id="浅谈深拷贝与浅拷贝"><a href="#浅谈深拷贝与浅拷贝" class="headerlink" title="浅谈深拷贝与浅拷贝"></a>浅谈深拷贝与浅拷贝</h1><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><ol>
<li>浅拷贝：将原对象或原数组的<strong>引用</strong>直接赋给新对象（新数组），新对象（新数组）只是原对象的一个引用。</li>
<li>深拷贝：创建一个新的对象或数组，讲原对象的各种属性值（数组中所有元素）拷贝到新的对象（数组）中，<strong>拷贝值而不是引用</strong><a id="more"></a>
<h2 id="为什么使用深拷贝？"><a href="#为什么使用深拷贝？" class="headerlink" title="为什么使用深拷贝？"></a>为什么使用深拷贝？</h2>我们希望在改变新的对象（数组）的时候，不改变原对象（数组）。</li>
</ol>
<h2 id="深拷贝的要求程度"><a href="#深拷贝的要求程度" class="headerlink" title="深拷贝的要求程度"></a>深拷贝的要求程度</h2><p>我们在使用深拷贝的时候，一定要搞清楚我们对深拷贝的要求程度：是仅“深”拷贝第一层级的对象属性或数组元素，还是递归拷贝所有层级的对象属性和数组元素？</p>
<h2 id="检验深拷贝成功的办法"><a href="#检验深拷贝成功的办法" class="headerlink" title="检验深拷贝成功的办法"></a>检验深拷贝成功的办法</h2><p>改变一个新对象（数组）中的属性（元素），原数组未收到影响。</p>
<h1 id="只对第一层级做拷贝"><a href="#只对第一层级做拷贝" class="headerlink" title="只对第一层级做拷贝"></a>只对第一层级做拷贝</h1><h2 id="深拷贝数组（只拷贝第一级的数组元素）"><a href="#深拷贝数组（只拷贝第一级的数组元素）" class="headerlink" title="深拷贝数组（只拷贝第一级的数组元素）"></a>深拷贝数组（只拷贝第一级的数组元素）</h2><h3 id="直接遍历"><a href="#直接遍历" class="headerlink" title="直接遍历"></a>直接遍历</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copy</span>(<span class="params">array</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> newArr = []</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">of</span> array)&#123;</span><br><span class="line">    newArr.push(item)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newArr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> copyArr = copy(array)</span><br><span class="line"><span class="comment">// 验证深拷贝</span></span><br><span class="line">copyArr[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line"><span class="built_in">console</span>.log(array)   <span class="comment">//[  1,2,3,4,5]</span></span><br><span class="line"><span class="built_in">console</span>.log(copyArr) <span class="comment">//[100,2,3,4,5]</span></span><br></pre></td></tr></table></figure>

<h3 id="slice-方法"><a href="#slice-方法" class="headerlink" title="slice()方法"></a><code>slice()</code>方法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">var</span> copyArr = arr.slice();</span><br><span class="line"><span class="comment">// 验证</span></span><br><span class="line">copyArr[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line"><span class="built_in">console</span>.log(copyArr) <span class="comment">// [100,2,3,4,5]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr)     <span class="comment">// [  1,2,3,4,5]</span></span><br></pre></td></tr></table></figure>

<p><code>slice()</code> 方法返回一个从已有<em>数组</em>中截取一部分元素片段组成的<strong>新数组</strong>(不改变原数组)<br>用法：<br>&emsp;<code>Array.slice(start,end)</code> start表示的是我<strong>起始元素</strong>的<strong>下标</strong> end表示的是<strong>终止元素</strong>的<strong>下标</strong><br>&emsp;当<code>slice()</code>不带任何参数的时候，默认返回和原数组相同的新数组</p>
<h3 id="concat-方法"><a href="#concat-方法" class="headerlink" title="concat()方法"></a><code>concat()</code>方法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">var</span> copyArr = arr.concat()</span><br><span class="line"><span class="comment">// 验证</span></span><br><span class="line">copyArr[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line"><span class="built_in">console</span>.log(copyArr) <span class="comment">//[100,2,3,4,5]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr)     <span class="comment">//[  1,2,3,4,5]</span></span><br></pre></td></tr></table></figure>

<p><code>concat()</code>方法用于连接两个或多个数组（该方法不会改变现有的数组，仅仅会返回被连接数组的一个副本。）</p>
<p>用法：<br>&emsp;Array.concat(arr1,arr2,arr3,…)<br>&emsp;当concat()不带参数的时候，相当于var copyArr = array.concat([])<br>&emsp;连接了一个空数组合并后返回</p>
<p>但是，事情当然不会这么简单，我上面的标题是 “深拷贝数组（只拷贝第一级数组元素）”，这里说的意思是对于一级数组元素是基本类型变量（如number,String,boolean）的简单数组, 上面这三种拷贝方式都能成功，但对第一级数组元素是对象或者数组等引用类型变量的数组，上面的三种方式都将失效，例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [</span><br><span class="line">   &#123; <span class="attr">number</span>: <span class="number">1</span> &#125;,</span><br><span class="line">   &#123; <span class="attr">number</span>: <span class="number">2</span> &#125;,</span><br><span class="line">   &#123; <span class="attr">number</span>: <span class="number">3</span> &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">var</span> copyArray = array.slice();</span><br><span class="line">copyArray[<span class="number">0</span>].number = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">console</span>.log(array); <span class="comment">//  [&#123;number: 100&#125;, &#123; number: 2 &#125;, &#123; number: 3 &#125;]</span></span><br><span class="line"><span class="built_in">console</span>.log(copyArray); <span class="comment">// [&#123;number: 100&#125;, &#123; number: 2 &#125;, &#123; number: 3 &#125;]</span></span><br></pre></td></tr></table></figure>

<h2 id="深拷贝对象"><a href="#深拷贝对象" class="headerlink" title="深拷贝对象"></a>深拷贝对象</h2><h3 id="深拷贝对象-1"><a href="#深拷贝对象-1" class="headerlink" title="深拷贝对象"></a>深拷贝对象</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'gzy'</span>,</span><br><span class="line">  age: <span class="number">21</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copy</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> newObj = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    newObj[item] = obj[item]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newObj</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> copyObj = copy(obj)</span><br><span class="line"><span class="comment">//验证</span></span><br><span class="line">copyObj.name = <span class="string">'xt'</span></span><br><span class="line"><span class="built_in">console</span>.log(copyObj) <span class="comment">//&#123; 'xt',21&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj)     <span class="comment">//&#123;'gzy',21&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="ES6的Object-assign"><a href="#ES6的Object-assign" class="headerlink" title="ES6的Object.assign()"></a>ES6的<code>Object.assign()</code></h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'gzy'</span>,</span><br><span class="line">  age: <span class="number">21</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> copyObj = <span class="built_in">Object</span>.assign(&#123;&#125;,obj)</span><br><span class="line"><span class="comment">//验证</span></span><br><span class="line">copyObj.name = <span class="string">'xt'</span></span><br><span class="line"><span class="built_in">console</span>.log(obj)    <span class="comment">//&#123;name: 'gzy',age: 21&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(copyObj)<span class="comment">//&#123;name:  'xt',age: 21&#125;</span></span><br></pre></td></tr></table></figure>

<p><code>Object.assign()</code>用于<strong>对象的合并</strong>，将源对象(<strong>source</strong>)的所有可枚举属性，复制到目标对象(<strong>target</strong>)，并返回合并后的目标对象(<strong>target</strong>)(公式：target = source1 + source2 + …)<br>用法：<br>&emsp;Object.assign(target,source1,source2,…)<br>&emsp;<code>var copyObj = Object.assign({},obj)</code>会把obj中的一级属性都拷贝到<code>{}</code>中，然后将其返回赋给<code>copyObj</code><br><strong>如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性。</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  b: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">  a: <span class="number">3</span>,</span><br><span class="line">  c: <span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj3 = <span class="built_in">Object</span>.assign(obj4,obj1,obj2)</span><br><span class="line"><span class="comment">//obj1和obj2都不变</span></span><br><span class="line">obj3  <span class="comment">//&#123;b:2,a:3,c:4&#125;</span></span><br><span class="line">obj4  <span class="comment">//&#123;b:2,a:3,c:4&#125; obj3和</span></span><br></pre></td></tr></table></figure>

<p>如果只有一个参数，<code>Object.assign</code>会直接返回该参数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">a</span>: <span class="number">4</span> &#125;</span><br><span class="line">obj2 = <span class="built_in">Object</span>.assign(obj);</span><br><span class="line"><span class="built_in">console</span>.log(obj)</span><br><span class="line"><span class="built_in">console</span>.log(obj2)</span><br></pre></td></tr></table></figure>

<p>如果该参数不是对象，则会先转成对象，然后返回。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> (<span class="built_in">Object</span>.assign(<span class="number">2</span>))); <span class="comment">// Object</span></span><br></pre></td></tr></table></figure>

<p>由于<code>undefined</code>和<code>null</code>无法转换成对象，所以如果他们作为参数，就会报错。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(<span class="built_in">Object</span>.assign(<span class="literal">null</span>)));  <span class="comment">// Uncaught TypeError: Cannot convert undefined or null to object</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(<span class="built_in">Object</span>.assign(underfind)));<span class="comment">// Uncaught ReferenceError: underfind is not defined</span></span><br></pre></td></tr></table></figure>

<p>如果非对象参数（参数非对象）出现在源对象的位置（即非首参数），那么处理规则有所不同。首先，这些参数都会转换成对象(<code>Object</code>)，如果无法转换成对象，就会跳过该参数。这意味着，如果<code>undefined</code>和<code>null</code>不在首参数的位置，就不会报错（执行<code>Object.assign({},undefined)</code>）。其他类型的值（如数值，字符串和Boolean值）不在首参数，也不会报错。但是，字符串会以数组形式，拷贝到目标对象中，其他值都无效果。<br>注意：<code>Object.assign</code> 不会跳过那些值为 <code>[ null ]</code> 或 <code>[ undefined ]</code>的源对象。</p>

<p><code>Object.assign</code>只拷贝自身属性，不可枚举的属性（<code>enumerable</code>为<code>false</code>）和继承的属性不会被拷贝。</p>

<p>对于嵌套的对象，<code>Object.assign</code>的处理方法是替换，而不是添加。</p>

<p>上面代码中a属性被source对象的a属性整个替换掉了，而不会得到<code>{a:{b:&#39;hello&#39;,d:&#39;e&#39;}}</code>的结果，需要特别小心。有一些函数库提供Object.assign的定制版本（比如Lodash的_.defaultsDeep方法），可以解决深拷贝的问题。</p>
<p>Object.assign可以用来处理数组，但是会把数组视为对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.assign([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]));  <span class="comment">// [4, 5, 3]</span></span><br></pre></td></tr></table></figure>

<p>其中，4覆盖1，5覆盖2。<br><strong><code>Object.assign</code>方法实行的是浅拷贝，而不是深拷贝。也就是说，如果源对象的某个属性的值是对象，那么目标对象拷贝得到的是该对象的引用。</strong></p>


<p><strong><code>Object.assign</code>可以：</strong><br>1.为对象添加属性；</p>
<p>2.为对象添加方法；</p>
<p>3.克隆对象；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copyFnc</span>(<span class="params">origin</span>) </span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, origin)</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> sur = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(copyFnc(sur));</span><br></pre></td></tr></table></figure>

<p>上面代码将原始对象拷贝到一个空对象，就得到了原始对象的克隆。</p>
<p>不过，采用这种方法克隆，只能克隆原始对象自身的值，不能克隆它继承的值。如果想要保持继承链，可以采用下面的代码。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">origin</span>) </span>&#123;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">let</span> originProto = <span class="built_in">Object</span>.getPrototypeOf(origin);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.assign(<span class="built_in">Object</span>.create(originProto), origin);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 在JS里子类利用Object.getPrototypeOf去调用父类方法,用来获取对象的原型。</p>
<p>4.合并多个对象；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//多个对象合并到某个对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> merge = <span class="function">(<span class="params">target, ...sources</span>) =&gt;</span> <span class="built_in">Object</span>.assign(target, ...sources);</span><br><span class="line"><span class="comment">//多个对象合并到新对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> merge = <span class="function">(<span class="params">...sources</span>) =&gt;</span> <span class="built_in">Object</span>.assign(&#123;&#125;, ...sources);</span><br></pre></td></tr></table></figure>

<p>5.为属性指定默认值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> DEFAULTS = &#123;</span><br><span class="line"> </span><br><span class="line">logLevel: <span class="number">0</span>,</span><br><span class="line"> </span><br><span class="line">outputFormat: <span class="string">'html'</span></span><br><span class="line"> </span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">processContent</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> options = <span class="built_in">Object</span>.assign(&#123;&#125;, DEFAULTS, options);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ES6扩展运算符"><a href="#ES6扩展运算符" class="headerlink" title="ES6扩展运算符"></a>ES6扩展运算符</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'gzy'</span>,</span><br><span class="line">  age:<span class="number">21</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> copyObj = &#123; ...obj &#125;</span><br><span class="line"><span class="comment">// 验证</span></span><br><span class="line">copyObj.name = <span class="string">'xt'</span></span><br><span class="line"><span class="built_in">console</span>.log(copyObj.name) <span class="comment">//&#123; name:  'xt',age:21 &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj)          <span class="comment">//&#123; name: 'gzy',age:21 &#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>扩展运算符（…）用于取出参数对象的所有可遍历属性，拷贝到当前对象之中</strong></p>
<p>对多层嵌套对象，很遗憾，上面三种方法，都会失败：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: &#123;</span><br><span class="line">    firstName: <span class="string">'g'</span>,</span><br><span class="line">    lastName: <span class="string">'zy'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  age:<span class="number">21</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> copyObj = <span class="built_in">Object</span>.assign(&#123;&#125;,obj)</span><br><span class="line">copyObj.name.lastName = <span class="string">'mi'</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.name.lastName)    <span class="comment">//mi</span></span><br><span class="line"><span class="built_in">console</span>.log(copyObj.name.lastName)<span class="comment">//mi</span></span><br></pre></td></tr></table></figure>

<h1 id="拷贝所有层级"><a href="#拷贝所有层级" class="headerlink" title="拷贝所有层级"></a>拷贝所有层级</h1><p>有没有更强大一些的解决方案呢？是我们能够：</p>
<ol>
<li>不仅拷贝第一层级，还能够拷贝数组或对象所有层级的各项值。</li>
<li>不是单独针对数组或对象，而是能够通用与数组，对象和其他复杂的JSON形式的对象。</li>
</ol>
<h2 id="JSON-parse-JSON-stringify-XXXX"><a href="#JSON-parse-JSON-stringify-XXXX" class="headerlink" title="JSON.parse(JSON.stringify(XXXX))"></a>JSON.parse(JSON.stringify(XXXX))</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [</span><br><span class="line">  &#123; <span class="attr">number</span>:<span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">number</span>:<span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">number</span>:<span class="number">3</span> &#125;</span><br><span class="line">  ]</span><br><span class="line"><span class="keyword">var</span> copyArr = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(arr))</span><br><span class="line"><span class="comment">//验证</span></span><br><span class="line">copyArr[<span class="number">0</span>].number = <span class="number">100</span></span><br><span class="line"><span class="built_in">console</span>.log(copyArr[<span class="number">0</span>])  <span class="comment">//&#123;number:100&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">0</span>])      <span class="comment">//&#123;number:1&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="手动写递归"><a href="#手动写递归" class="headerlink" title="手动写递归"></a>手动写递归</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [</span><br><span class="line">  &#123; <span class="attr">number</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">number</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">number</span>: <span class="number">3</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">copy</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newObj = obj.constructor === <span class="built_in">Array</span> ? [] : &#123;&#125;;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> obj !== <span class="string">'object'</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> obj)&#123;</span><br><span class="line">      newObj[i] = <span class="keyword">typeof</span> obj[i] === <span class="string">'Object'</span> ? copy(obj[i]) : obj[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newObj</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> copyArr = copy(arr)</span><br><span class="line">  <span class="comment">// 验证</span></span><br><span class="line">  copyArr[<span class="number">0</span>].number = <span class="number">100</span></span><br><span class="line">  <span class="built_in">console</span>.log(copyArr[<span class="number">0</span>]) <span class="comment">//&#123; number: 100 &#125;</span></span><br><span class="line">  <span class="built_in">console</span>.log(arr[<span class="number">0</span>])     <span class="comment">//&#123; number: 1 &#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>【注意】：上文的所有的示例都忽略了一些特殊的情况： 对对象/数组中的Function，正则表达式等特殊类型的拷贝</strong></p>
<h1 id="存在大量深拷贝需求的代码——immutable提供的解决方案"><a href="#存在大量深拷贝需求的代码——immutable提供的解决方案" class="headerlink" title="存在大量深拷贝需求的代码——immutable提供的解决方案"></a>存在大量深拷贝需求的代码——immutable提供的解决方案</h1><p>实际上，即使我们知道了如何在各种情况下进行深拷贝，我们也仍然面临一些问题： 深拷贝实际上是很消耗性能的。（我们可能只是希望改变新数组里的其中一个元素的时候不影响原数组，但却被迫要把整个原数组都拷贝一遍，这不是一种浪费吗？）所以，当你的项目里有大量深拷贝需求的时候，性能就可能形成了一个制约的瓶颈了。</p>
<p>immutable的作用：<br>通过immutable引入的一套API，实现：</p>
<ol>
<li><em>在改变新的数组（对象）的时候，不改变原数组（对象）</em></li>
<li><em>在大量深拷贝操作中显著地减少性能消耗</em></li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="built_in">Map</span> &#125; = <span class="built_in">require</span>(<span class="string">'immutable'</span>)</span><br><span class="line"><span class="keyword">const</span> map1 = <span class="built_in">Map</span>(&#123; <span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>,<span class="attr">c</span>:<span class="number">3</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> map2 = map1.set(<span class="string">'b'</span>,<span class="number">50</span>)</span><br><span class="line">map1.get(<span class="string">'b'</span>)   <span class="comment">//2</span></span><br><span class="line">map2.get(<span class="string">'b'</span>)   <span class="comment">//50</span></span><br></pre></td></tr></table></figure>

<p>参考<a href="https://www.cnblogs.com/penghuwan/p/7359026.html#_label0" target="_blank" rel="noopener">外婆的彭湖湾</a>大佬的blog🙇</p>
]]></content>
      <categories>
        <category>前端技术</category>
      </categories>
      <tags>
        <tag>前端技术</tag>
      </tags>
  </entry>
  <entry>
    <title>特殊字符在HTML中输出</title>
    <url>/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/sp-ascii/</url>
    <content><![CDATA[<p><strong>常用特殊字符</strong></p>
<table>
<thead>
<tr>
<th>字符</th>
<th align="center">十进制字符编号</th>
<th align="center">实体名字</th>
</tr>
</thead>
<tbody><tr>
<td>&lt;</td>
<td align="center"><code>&amp;lt;</code></td>
<td align="center">小于号或显示标记</td>
</tr>
<tr>
<td>&gt;</td>
<td align="center"><code>&amp;gt;</code></td>
<td align="center">大于或显示标记</td>
</tr>
<tr>
<td>&gt;=</td>
<td align="center"><code>&amp;ge;</code></td>
<td align="center">大于等于</td>
</tr>
<tr>
<td>&lt;=</td>
<td align="center"><code>&amp;lte; &amp;le;</code></td>
<td align="center">小于等于</td>
</tr>
<tr>
<td>==</td>
<td align="center"><code>&amp;eq;</code></td>
<td align="center">相等</td>
</tr>
<tr>
<td>!=</td>
<td align="center"><code>&amp;ne;</code></td>
<td align="center">不等</td>
</tr>
<tr>
<td>&amp;</td>
<td align="center"><code>&amp;amp;</code></td>
<td align="center">&amp;</td>
</tr>
<tr>
<td>“</td>
<td align="center"><code>&amp;quot;</code></td>
<td align="center">引号</td>
</tr>
<tr>
<td></td>
<td align="center"><code>&amp;ensp;</code></td>
<td align="center">1/2个中文宽度</td>
</tr>
<tr>
<td></td>
<td align="center"><code>&amp;emsp;</code></td>
<td align="center">一个中文宽度</td>
</tr>
<tr>
<td></td>
<td align="center"><code>&amp;nbsp;</code></td>
<td align="center">不断行的空白</td>
</tr>
<tr>
<td>¥</td>
<td align="center"><code>&amp;yen;</code> <code>&amp;#165;</code></td>
<td align="center">元</td>
</tr>
</tbody></table>
<p>更多特殊符号详见<a href="https://www.w3school.com.cn/tags/html_ref_entities.html" target="_blank" rel="noopener">HTML ISO-8859-1 参考手册</a><br>以及<a href="https://www.w3school.com.cn/tags/html_ref_symbols.html" target="_blank" rel="noopener">HTML 4.01 符号实体</a><br>整理得比较好的大佬<a href="https://www.cnblogs.com/kiter/archive/2011/08/05/2128309.html" target="_blank" rel="noopener">kiter的blog</a></p>
<a id="more"></a>

<p><strong>特殊字符对应表</strong></p>
<table>
<thead>
<tr>
<th>字符</th>
<th align="center">十进制字符编号</th>
<th align="center">实体名字</th>
</tr>
</thead>
<tbody><tr>
<td>!</td>
<td align="center"><code>&amp;#33;</code></td>
<td align="center">惊叹号Exclamation mark</td>
</tr>
<tr>
<td>”</td>
<td align="center"><code>&amp;#34; &amp;quot;</code></td>
<td align="center">双引号Quotation mark</td>
</tr>
<tr>
<td>#</td>
<td align="center"><code>&amp;#35;</code></td>
<td align="center">数字标志Number sign</td>
</tr>
<tr>
<td>$</td>
<td align="center"><code>&amp;#36;</code></td>
<td align="center">美元标志Dollar sign</td>
</tr>
<tr>
<td>%</td>
<td align="center"><code>&amp;#37;</code></td>
<td align="center">百分号Percent sign</td>
</tr>
<tr>
<td>&amp;</td>
<td align="center"><code>&amp;#38; &amp;amp;</code></td>
<td align="center">Ampersand</td>
</tr>
<tr>
<td>‘</td>
<td align="center"><code>&amp;#39;</code></td>
<td align="center">单引号Apostrophe</td>
</tr>
<tr>
<td>(</td>
<td align="center"><code>&amp;#40;</code></td>
<td align="center">小括号左边部分Left parenthesis</td>
</tr>
<tr>
<td>)</td>
<td align="center"><code>&amp;#41;</code></td>
<td align="center">小括号右边部分Right parenthesis</td>
</tr>
<tr>
<td>*</td>
<td align="center"><code>&amp;#42;</code></td>
<td align="center">星号Asterisk</td>
</tr>
<tr>
<td>+</td>
<td align="center"><code>&amp;#43;</code></td>
<td align="center">加号Plus sign</td>
</tr>
<tr>
<td>,</td>
<td align="center"><code>&amp;#44;</code></td>
<td align="center">逗号Comma</td>
</tr>
<tr>
<td>–</td>
<td align="center"><code>&amp;#45;</code></td>
<td align="center">连字号Hyphen</td>
</tr>
<tr>
<td>.</td>
<td align="center"><code>&amp;#46;</code></td>
<td align="center">句号Period (fullstop)</td>
</tr>
<tr>
<td>/</td>
<td align="center"><code>&amp;#47;</code></td>
<td align="center">斜杠Solidus (slash)</td>
</tr>
<tr>
<td>0</td>
<td align="center"><code>&amp;#48;</code></td>
<td align="center">数字0 Digit 0</td>
</tr>
<tr>
<td>1</td>
<td align="center"><code>&amp;#49;</code></td>
<td align="center">数字1 Digit 1</td>
</tr>
<tr>
<td>2</td>
<td align="center"><code>&amp;#50;</code></td>
<td align="center">数字2 Digit 2</td>
</tr>
<tr>
<td>3</td>
<td align="center"><code>&amp;#51;</code></td>
<td align="center">数字3 Digit 3</td>
</tr>
<tr>
<td>4</td>
<td align="center"><code>&amp;#52;</code></td>
<td align="center">数字4 Digit 4</td>
</tr>
<tr>
<td>5</td>
<td align="center"><code>&amp;#53;</code></td>
<td align="center">数字5 Digit 5</td>
</tr>
<tr>
<td>6</td>
<td align="center"><code>&amp;#54;</code></td>
<td align="center">数字6 Digit 6</td>
</tr>
<tr>
<td>7</td>
<td align="center"><code>&amp;#55;</code></td>
<td align="center">数字7 Digit 7</td>
</tr>
<tr>
<td>8</td>
<td align="center"><code>&amp;#56;</code></td>
<td align="center">数字8 Digit 8</td>
</tr>
<tr>
<td>9</td>
<td align="center"><code>&amp;#57;</code></td>
<td align="center">数字9 Digit 9</td>
</tr>
<tr>
<td>:</td>
<td align="center"><code>&amp;#58;</code></td>
<td align="center">冒号Colon</td>
</tr>
<tr>
<td>;</td>
<td align="center"><code>&amp;#59;</code></td>
<td align="center">分号Semicolon</td>
</tr>
<tr>
<td>&lt;</td>
<td align="center"><code>&amp;#60; &amp;lt;</code></td>
<td align="center">小于号Less than</td>
</tr>
<tr>
<td>=</td>
<td align="center"><code>&amp;#61;</code></td>
<td align="center">等于符号Equals sign</td>
</tr>
<tr>
<td>&gt;</td>
<td align="center"><code>&amp;#62; &amp;gt;</code></td>
<td align="center">大于号Greater than</td>
</tr>
<tr>
<td>?</td>
<td align="center"><code>&amp;#63;</code></td>
<td align="center">问号Question mark</td>
</tr>
<tr>
<td>@</td>
<td align="center"><code>&amp;#64;</code></td>
<td align="center">Commercial at</td>
</tr>
<tr>
<td>A</td>
<td align="center"><code>&amp;#65;</code></td>
<td align="center">大写A Capital A</td>
</tr>
<tr>
<td>B</td>
<td align="center"><code>&amp;#66;</code></td>
<td align="center">大写B Capital B</td>
</tr>
<tr>
<td>C</td>
<td align="center"><code>&amp;#67;</code></td>
<td align="center">大写C Capital C</td>
</tr>
<tr>
<td>D</td>
<td align="center"><code>&amp;#68;</code></td>
<td align="center">大写D Capital D</td>
</tr>
<tr>
<td>E</td>
<td align="center"><code>&amp;#69;</code></td>
<td align="center">大写E Capital E</td>
</tr>
<tr>
<td>F</td>
<td align="center"><code>&amp;#70;</code></td>
<td align="center">大写F Capital F</td>
</tr>
<tr>
<td>G</td>
<td align="center"><code>&amp;#71;</code></td>
<td align="center">大写G Capital G</td>
</tr>
<tr>
<td>H</td>
<td align="center"><code>&amp;#72;</code></td>
<td align="center">大写H Capital H</td>
</tr>
<tr>
<td>I</td>
<td align="center"><code>&amp;#73;</code></td>
<td align="center">大写J Capital I</td>
</tr>
<tr>
<td>J</td>
<td align="center"><code>&amp;#74;</code></td>
<td align="center">大写K Capital J</td>
</tr>
<tr>
<td>K</td>
<td align="center"><code>&amp;#75;</code></td>
<td align="center">大写L Capital K</td>
</tr>
<tr>
<td>L</td>
<td align="center"><code>&amp;#76;</code></td>
<td align="center">大写K Capital L</td>
</tr>
<tr>
<td>M</td>
<td align="center"><code>&amp;#77;</code></td>
<td align="center">大写M Capital M</td>
</tr>
<tr>
<td>N</td>
<td align="center"><code>&amp;#78;</code></td>
<td align="center">大写N Capital N</td>
</tr>
<tr>
<td>O</td>
<td align="center"><code>&amp;#79;</code></td>
<td align="center">大写O Capital O</td>
</tr>
<tr>
<td>P</td>
<td align="center"><code>&amp;#80;</code></td>
<td align="center">大写P Capital P</td>
</tr>
<tr>
<td>Q</td>
<td align="center"><code>&amp;#81;</code></td>
<td align="center">大写Q Capital Q</td>
</tr>
<tr>
<td>R</td>
<td align="center"><code>&amp;#82;</code></td>
<td align="center">大写R Capital R</td>
</tr>
<tr>
<td>S</td>
<td align="center"><code>&amp;#83;</code></td>
<td align="center">大写S Capital S</td>
</tr>
<tr>
<td>T</td>
<td align="center"><code>&amp;#84;</code></td>
<td align="center">大写T Capital T</td>
</tr>
<tr>
<td>U</td>
<td align="center"><code>&amp;#85;</code></td>
<td align="center">大写U Capital U</td>
</tr>
<tr>
<td>V</td>
<td align="center"><code>&amp;#86;</code></td>
<td align="center">大写V Capital V</td>
</tr>
<tr>
<td>W</td>
<td align="center"><code>&amp;#87;</code></td>
<td align="center">大写W Capital W</td>
</tr>
<tr>
<td>X</td>
<td align="center"><code>&amp;#88;</code></td>
<td align="center">大写X Capital X</td>
</tr>
<tr>
<td>Y</td>
<td align="center"><code>&amp;#89;</code></td>
<td align="center">大写Y Capital Y</td>
</tr>
<tr>
<td>Z</td>
<td align="center"><code>&amp;#90;</code></td>
<td align="center">大写Z Capital Z</td>
</tr>
<tr>
<td>[</td>
<td align="center"><code>&amp;#91;</code></td>
<td align="center">中括号左边部分Left square bracket</td>
</tr>
<tr>
<td>\</td>
<td align="center"><code>&amp;#92;</code></td>
<td align="center">反斜杠Reverse solidus (backslash)</td>
</tr>
<tr>
<td>]</td>
<td align="center"><code>&amp;#93;</code></td>
<td align="center">中括号右边部分Right square bracket</td>
</tr>
<tr>
<td>^</td>
<td align="center"><code>&amp;#94;</code></td>
<td align="center">Caret</td>
</tr>
<tr>
<td>_</td>
<td align="center"><code>&amp;#95;</code></td>
<td align="center">下划线Horizontal bar (underscore)</td>
</tr>
<tr>
<td>`</td>
<td align="center"><code>&amp;#96;</code></td>
<td align="center">尖重音符Acute accent</td>
</tr>
<tr>
<td>a</td>
<td align="center"><code>&amp;#97;</code></td>
<td align="center">小写a Small a</td>
</tr>
<tr>
<td>b</td>
<td align="center"><code>&amp;#98;</code></td>
<td align="center">小写b Small b</td>
</tr>
<tr>
<td>c</td>
<td align="center"><code>&amp;#99;</code></td>
<td align="center">小写c Small c</td>
</tr>
<tr>
<td>d</td>
<td align="center"><code>&amp;#100</code>;</td>
<td align="center">小写d Small d</td>
</tr>
<tr>
<td>e</td>
<td align="center"><code>&amp;#101</code>;</td>
<td align="center">小写e Small e</td>
</tr>
<tr>
<td>f</td>
<td align="center"><code>&amp;#102</code>;</td>
<td align="center">小写f Small f</td>
</tr>
<tr>
<td>g</td>
<td align="center"><code>&amp;#103</code>;</td>
<td align="center">小写g Small g</td>
</tr>
<tr>
<td>h</td>
<td align="center"><code>&amp;#104</code>;</td>
<td align="center">小写h Small h</td>
</tr>
<tr>
<td>i</td>
<td align="center"><code>&amp;#105</code>;</td>
<td align="center">小写i Small i</td>
</tr>
<tr>
<td>j</td>
<td align="center"><code>&amp;#106</code>;</td>
<td align="center">小写j Small j</td>
</tr>
<tr>
<td>k</td>
<td align="center"><code>&amp;#107</code>;</td>
<td align="center">小写k Small k</td>
</tr>
<tr>
<td>l</td>
<td align="center"><code>&amp;#108</code>;</td>
<td align="center">小写l Small l</td>
</tr>
<tr>
<td>m</td>
<td align="center"><code>&amp;#109</code>;</td>
<td align="center">小写m Small m</td>
</tr>
<tr>
<td>n</td>
<td align="center"><code>&amp;#110</code>;</td>
<td align="center">小写n Small n</td>
</tr>
<tr>
<td>o</td>
<td align="center"><code>&amp;#111</code>;</td>
<td align="center">小写o Small o</td>
</tr>
<tr>
<td>p</td>
<td align="center"><code>&amp;#112</code>;</td>
<td align="center">小写p Small p</td>
</tr>
<tr>
<td>q</td>
<td align="center"><code>&amp;#113</code>;</td>
<td align="center">小写q Small q</td>
</tr>
<tr>
<td>r</td>
<td align="center"><code>&amp;#114</code>;</td>
<td align="center">小写r Small r</td>
</tr>
<tr>
<td>s</td>
<td align="center"><code>&amp;#115</code>;</td>
<td align="center">小写s Small s</td>
</tr>
<tr>
<td>t</td>
<td align="center"><code>&amp;#116</code>;</td>
<td align="center">小写t Small t</td>
</tr>
<tr>
<td>u</td>
<td align="center"><code>&amp;#117</code>;</td>
<td align="center">小写u Small u</td>
</tr>
<tr>
<td>v</td>
<td align="center"><code>&amp;#118</code>;</td>
<td align="center">小写v Small v</td>
</tr>
<tr>
<td>w</td>
<td align="center"><code>&amp;#119</code>;</td>
<td align="center">小写w Small w</td>
</tr>
<tr>
<td>x</td>
<td align="center"><code>&amp;#120</code>;</td>
<td align="center">小写x Small x</td>
</tr>
<tr>
<td>y</td>
<td align="center"><code>&amp;#121</code>;</td>
<td align="center">小写y Small y</td>
</tr>
<tr>
<td>z</td>
<td align="center"><code>&amp;#122</code>;</td>
<td align="center">小写z Small z</td>
</tr>
<tr>
<td>{</td>
<td align="center"><code>&amp;#123</code>;</td>
<td align="center">大括号左边部分Left curly brace</td>
</tr>
<tr>
<td></td>
<td align="center"></td>
<td align="center"><code>&amp;#124</code>;</td>
</tr>
<tr>
<td>}</td>
<td align="center"><code>&amp;#125</code>;</td>
<td align="center">大括号右边部分Right curly brace</td>
</tr>
<tr>
<td>~</td>
<td align="center"><code>&amp;#126</code>;</td>
<td align="center">Tilde</td>
</tr>
<tr>
<td>—</td>
<td align="center"><code>&amp;#127</code>;</td>
<td align="center">未使用Unused</td>
</tr>
<tr>
<td></td>
<td align="center"><code>&amp;#160; &amp;nbsp;</code></td>
<td align="center">空格Nonbreaking space</td>
</tr>
<tr>
<td>¡</td>
<td align="center"><code>&amp;#161; &amp;iexcl;</code></td>
<td align="center">Inverted exclamation</td>
</tr>
<tr>
<td>¢</td>
<td align="center"><code>&amp;#162; &amp;cent;</code></td>
<td align="center">货币分标志Cent sign</td>
</tr>
<tr>
<td>£</td>
<td align="center"><code>&amp;#163; &amp;pound;</code></td>
<td align="center">英镑标志Pound sterling</td>
</tr>
<tr>
<td>¤</td>
<td align="center"><code>&amp;#164; &amp;curren;</code></td>
<td align="center">通用货币标志General currency sign</td>
</tr>
<tr>
<td>¥</td>
<td align="center"><code>&amp;#165; &amp;yen;</code></td>
<td align="center">日元标</td>
</tr>
<tr>
<td>¦</td>
<td align="center"><code>&amp;#166; &amp;brvbar;</code></td>
<td align="center">or &brkbar;“`</td>
</tr>
<tr>
<td>§</td>
<td align="center"><code>&amp;#167; &amp;sect;</code></td>
<td align="center">分节号Section sign</td>
</tr>
<tr>
<td>¨</td>
<td align="center"><code>&amp;#168; &amp;uml;</code></td>
<td align="center">or ¨“`</td>
</tr>
<tr>
<td>©</td>
<td align="center"><code>&amp;#169; &amp;copy;</code></td>
<td align="center">版权标志Copyright</td>
</tr>
<tr>
<td>ª</td>
<td align="center"><code>&amp;#170; &amp;ordf;</code></td>
<td align="center">Feminine ordinal</td>
</tr>
<tr>
<td>«</td>
<td align="center"><code>&amp;#171; &amp;laquo;</code></td>
<td align="center">Left angle quote, guillemet left</td>
</tr>
<tr>
<td>¬</td>
<td align="center">“`¬ ¬</td>
<td align="center">Not sign</td>
</tr>
<tr>
<td>““</td>
<td align="center">“</td>
<td align="center"><code>&amp;#173; &amp;shy;</code></td>
</tr>
<tr>
<td>®</td>
<td align="center"><code>&amp;#174; &amp;reg;</code></td>
<td align="center">注册商标标志Registered trademark</td>
</tr>
<tr>
<td>¯</td>
<td align="center"><code>&amp;#175; &amp;macr;</code></td>
<td align="center">or &hibar;“`</td>
</tr>
<tr>
<td>°</td>
<td align="center"><code>&amp;#176; &amp;deg;</code></td>
<td align="center">度数标志Degree sign</td>
</tr>
<tr>
<td>±</td>
<td align="center"><code>&amp;#177; &amp;plusmn;</code></td>
<td align="center">加或减Plus or minus</td>
</tr>
<tr>
<td>²</td>
<td align="center"><code>&amp;#178; &amp;sup2;</code></td>
<td align="center">上标2 Superscript two</td>
</tr>
<tr>
<td>³</td>
<td align="center"><code>&amp;#179; &amp;sup3;</code></td>
<td align="center">上标3 Superscript three</td>
</tr>
<tr>
<td>´</td>
<td align="center"><code>&amp;#180; &amp;acute;</code></td>
<td align="center">尖重音符Acute accent</td>
</tr>
<tr>
<td>µ</td>
<td align="center"><code>&amp;#181; &amp;micro;</code></td>
<td align="center">Micro sign</td>
</tr>
<tr>
<td>¶</td>
<td align="center"><code>&amp;#182; &amp;para;</code></td>
<td align="center">Paragraph sign</td>
</tr>
<tr>
<td>·</td>
<td align="center"><code>&amp;#183; &amp;middot;</code></td>
<td align="center">Middle dot</td>
</tr>
<tr>
<td>¸</td>
<td align="center"><code>&amp;#184; &amp;cedil;</code></td>
<td align="center">Cedilla</td>
</tr>
<tr>
<td>¹</td>
<td align="center"><code>&amp;#185; &amp;sup1;</code></td>
<td align="center">上标1 Superscript one</td>
</tr>
<tr>
<td>º</td>
<td align="center"><code>&amp;#186; &amp;ordm;</code></td>
<td align="center">Masculine ordinal</td>
</tr>
<tr>
<td>»</td>
<td align="center"><code>&amp;#187; &amp;raquo;</code></td>
<td align="center">Right angle quote, guillemet right</td>
</tr>
<tr>
<td>¼</td>
<td align="center"><code>&amp;#188; &amp;frac14;</code></td>
<td align="center">四分之一Fraction one-fourth</td>
</tr>
<tr>
<td>½</td>
<td align="center"><code>&amp;#189; &amp;frac12;</code></td>
<td align="center">二分之一Fraction one-half</td>
</tr>
<tr>
<td>¾</td>
<td align="center"><code>&amp;#190; &amp;frac34;</code></td>
<td align="center">四分之三Fraction three-fourths</td>
</tr>
<tr>
<td>¿</td>
<td align="center"><code>&amp;#191; &amp;iquest;</code></td>
<td align="center">Inverted question mark</td>
</tr>
<tr>
<td>À</td>
<td align="center"><code>&amp;#192; &amp;Agrave;</code></td>
<td align="center">Capital A, grave accent</td>
</tr>
<tr>
<td>Á</td>
<td align="center"><code>&amp;#193; &amp;Aacute;</code></td>
<td align="center">Capital A, acute accent</td>
</tr>
<tr>
<td>Â</td>
<td align="center"><code>&amp;#194; &amp;Acirc;</code></td>
<td align="center">Capital A, circumflex</td>
</tr>
<tr>
<td>Ã</td>
<td align="center"><code>&amp;#195; &amp;Atilde;</code></td>
<td align="center">Capital A, tilde</td>
</tr>
<tr>
<td>Ä</td>
<td align="center"><code>&amp;#196; &amp;Auml;</code></td>
<td align="center">Capital A, di?esis / umlaut</td>
</tr>
<tr>
<td>Å</td>
<td align="center"><code>&amp;#197; &amp;Aring;</code></td>
<td align="center">Capital A, ring</td>
</tr>
<tr>
<td>Æ</td>
<td align="center"><code>&amp;#198; &amp;AElig;</code></td>
<td align="center">Capital AE ligature</td>
</tr>
<tr>
<td>Ç</td>
<td align="center"><code>&amp;#199; &amp;Ccedil;</code></td>
<td align="center">Capital C, cedilla</td>
</tr>
<tr>
<td>È</td>
<td align="center"><code>&amp;#200; &amp;Egrave;</code></td>
<td align="center">Capital E, grave accent</td>
</tr>
<tr>
<td>É</td>
<td align="center"><code>&amp;#201; &amp;Eacute;</code></td>
<td align="center">Capital E, acute accent</td>
</tr>
<tr>
<td>Ê</td>
<td align="center"><code>&amp;#202; &amp;Ecirc;</code></td>
<td align="center">Capital E, circumflex</td>
</tr>
<tr>
<td>Ë</td>
<td align="center"><code>&amp;#203; &amp;Euml;</code></td>
<td align="center">Capital E, di?esis / umlaut</td>
</tr>
<tr>
<td>Ì</td>
<td align="center"><code>&amp;#204; &amp;Igrave;</code></td>
<td align="center">Capital I, grave accent</td>
</tr>
<tr>
<td>Í</td>
<td align="center"><code>&amp;#205; &amp;Iacute;</code></td>
<td align="center">Capital I, acute accent</td>
</tr>
<tr>
<td>Î</td>
<td align="center"><code>&amp;#206; &amp;Icirc;</code></td>
<td align="center">Capital I, circumflex</td>
</tr>
<tr>
<td>Ï</td>
<td align="center"><code>&amp;#207; &amp;Iuml;</code></td>
<td align="center">Capital I, di?esis / umlaut</td>
</tr>
<tr>
<td>Ð</td>
<td align="center"><code>&amp;#208; &amp;ETH;</code></td>
<td align="center">Capital Eth, Icelandic</td>
</tr>
<tr>
<td>Ñ</td>
<td align="center"><code>&amp;#209; &amp;Ntilde;</code></td>
<td align="center">Capital N, tilde</td>
</tr>
<tr>
<td>Ò</td>
<td align="center"><code>&amp;#210; &amp;Ograve;</code></td>
<td align="center">Capital O, grave accent</td>
</tr>
<tr>
<td>Ó</td>
<td align="center"><code>&amp;#211; &amp;Oacute;</code></td>
<td align="center">Capital O, acute accent</td>
</tr>
<tr>
<td>Ô</td>
<td align="center"><code>&amp;#212; &amp;Ocirc;</code></td>
<td align="center">Capital O, circumflex</td>
</tr>
<tr>
<td>Õ</td>
<td align="center"><code>&amp;#213; &amp;Otilde;</code></td>
<td align="center">Capital O, tilde</td>
</tr>
<tr>
<td>Ö</td>
<td align="center"><code>&amp;#214; &amp;Ouml;</code></td>
<td align="center">Capital O, di?esis / umlaut</td>
</tr>
<tr>
<td>×</td>
<td align="center"><code>&amp;#215; &amp;times;</code></td>
<td align="center">乘号Multiply sign</td>
</tr>
<tr>
<td>Ø</td>
<td align="center"><code>&amp;#216; &amp;Oslash;</code></td>
<td align="center">Capital O, slash</td>
</tr>
<tr>
<td>Ù</td>
<td align="center"><code>&amp;#217; &amp;Ugrave;</code></td>
<td align="center">Capital U, grave accent</td>
</tr>
<tr>
<td>Ú</td>
<td align="center"><code>&amp;#218; &amp;Uacute;</code></td>
<td align="center">Capital U, acute accent</td>
</tr>
<tr>
<td>Û</td>
<td align="center"><code>&amp;#219; &amp;Ucirc;</code></td>
<td align="center">Capital U, circumflex</td>
</tr>
<tr>
<td>Ü</td>
<td align="center"><code>&amp;#220; &amp;Uuml;</code></td>
<td align="center">Capital U, di?esis / umlaut</td>
</tr>
<tr>
<td>Ý</td>
<td align="center"><code>&amp;#221; &amp;Yacute;</code></td>
<td align="center">Capital Y, acute accent</td>
</tr>
<tr>
<td>Þ</td>
<td align="center"><code>&amp;#222; &amp;THORN;</code></td>
<td align="center">Capital Thorn, Icelandic</td>
</tr>
<tr>
<td>ß</td>
<td align="center"><code>&amp;#223; &amp;szlig;</code></td>
<td align="center">Small sharp s, German sz</td>
</tr>
<tr>
<td>à</td>
<td align="center"><code>&amp;#224; &amp;agrave;</code></td>
<td align="center">Small a, grave accent</td>
</tr>
<tr>
<td>á</td>
<td align="center"><code>&amp;#225; &amp;aacute;</code></td>
<td align="center">Small a, acute accent</td>
</tr>
<tr>
<td>â</td>
<td align="center"><code>&amp;#226; &amp;acirc;</code></td>
<td align="center">Small a, circumflex</td>
</tr>
<tr>
<td>ã</td>
<td align="center"><code>&amp;#227; &amp;atilde;</code></td>
<td align="center">Small a, tilde</td>
</tr>
<tr>
<td>ä</td>
<td align="center"><code>&amp;#228; &amp;auml;</code></td>
<td align="center">Small a, di?esis / umlaut</td>
</tr>
<tr>
<td>å</td>
<td align="center"><code>&amp;#229; &amp;aring;</code></td>
<td align="center">Small a, ring</td>
</tr>
<tr>
<td>æ</td>
<td align="center"><code>&amp;#230; &amp;aelig;</code></td>
<td align="center">Small ae ligature</td>
</tr>
<tr>
<td>ç</td>
<td align="center"><code>&amp;#231; &amp;ccedil;</code></td>
<td align="center">Small c, cedilla</td>
</tr>
<tr>
<td>è</td>
<td align="center"><code>&amp;#232; &amp;egrave;</code></td>
<td align="center">Small e, grave accent</td>
</tr>
<tr>
<td>é</td>
<td align="center"><code>&amp;#233; &amp;eacute;</code></td>
<td align="center">Small e, acute accent</td>
</tr>
<tr>
<td>ê</td>
<td align="center"><code>&amp;#234; &amp;ecirc;</code></td>
<td align="center">Small e, circumflex</td>
</tr>
<tr>
<td>ë</td>
<td align="center"><code>&amp;#235; &amp;euml;</code></td>
<td align="center">Small e, di?esis / umlaut</td>
</tr>
<tr>
<td>ì</td>
<td align="center"><code>&amp;#236; &amp;igrave;</code></td>
<td align="center">Small i, grave accent</td>
</tr>
<tr>
<td>í</td>
<td align="center"><code>&amp;#237; &amp;iacute;</code></td>
<td align="center">Small i, acute accent</td>
</tr>
<tr>
<td>î</td>
<td align="center"><code>&amp;#238; &amp;icirc;</code></td>
<td align="center">Small i, circumflex</td>
</tr>
<tr>
<td>ï</td>
<td align="center"><code>&amp;#239; &amp;iuml;</code></td>
<td align="center">Small i, di?esis / umlaut</td>
</tr>
<tr>
<td>ð</td>
<td align="center"><code>&amp;#240; &amp;eth;</code></td>
<td align="center">Small eth, Icelandic</td>
</tr>
<tr>
<td>ñ</td>
<td align="center"><code>&amp;#241; &amp;ntilde;</code></td>
<td align="center">Small n, tilde</td>
</tr>
<tr>
<td>ò</td>
<td align="center"><code>&amp;#242; &amp;ograve;</code></td>
<td align="center">Small o, grave accent</td>
</tr>
<tr>
<td>ó</td>
<td align="center"><code>&amp;#243; &amp;oacute;</code></td>
<td align="center">Small o, acute accent</td>
</tr>
<tr>
<td>ô</td>
<td align="center"><code>&amp;#244; &amp;ocirc;</code></td>
<td align="center">Small o, circumflex</td>
</tr>
<tr>
<td>õ</td>
<td align="center"><code>&amp;#245; &amp;otilde;</code></td>
<td align="center">Small o, tilde</td>
</tr>
<tr>
<td>ö</td>
<td align="center"><code>&amp;#246; &amp;ouml;</code></td>
<td align="center">Small o, di?esis / umlaut</td>
</tr>
<tr>
<td>÷</td>
<td align="center"><code>&amp;#247; &amp;divide;</code></td>
<td align="center">除号Division sign</td>
</tr>
<tr>
<td>ø</td>
<td align="center"><code>&amp;#248; &amp;oslash;</code></td>
<td align="center">Small o, slash</td>
</tr>
<tr>
<td>ù</td>
<td align="center"><code>&amp;#249; &amp;ugrave;</code></td>
<td align="center">Small u, grave accent</td>
</tr>
<tr>
<td>ú</td>
<td align="center"><code>&amp;#250; &amp;uacute;</code></td>
<td align="center">Small u, acute accent</td>
</tr>
<tr>
<td>û</td>
<td align="center"><code>&amp;#251; &amp;ucirc;</code></td>
<td align="center">Small u, circumflex</td>
</tr>
<tr>
<td>ü</td>
<td align="center"><code>&amp;#252; &amp;uuml;</code></td>
<td align="center">Small u, di?esis / umlaut</td>
</tr>
<tr>
<td>ý</td>
<td align="center"><code>&amp;#253; &amp;yacute;</code></td>
<td align="center">Small y, acute accent</td>
</tr>
<tr>
<td>þ</td>
<td align="center"><code>&amp;#254; &amp;thorn;</code></td>
<td align="center">Small thorn, Icelandic</td>
</tr>
<tr>
<td>ÿ</td>
<td align="center"><code>&amp;#255; &amp;yuml;</code></td>
<td align="center">Small y, umlaut</td>
</tr>
</tbody></table>
<p> ————————————————<br>转载自「aladdin_sun」的原创文章<br>原文链接：<a href="https://blog.csdn.net/sunbocong/article/details/81032758" target="_blank" rel="noopener">https://blog.csdn.net/sunbocong/article/details/81032758</a></p>
]]></content>
      <categories>
        <category>前端技术</category>
      </categories>
      <tags>
        <tag>前端技术</tag>
      </tags>
  </entry>
  <entry>
    <title>一根不均匀的绳子，全部烧完需要1个小时，问怎样烧能计时1个小时15分钟（烧绳子问题）</title>
    <url>/%E7%AE%97%E6%B3%95/burn-rope/</url>
    <content><![CDATA[<h1 id="Topic"><a href="#Topic" class="headerlink" title="Topic"></a>Topic</h1><p>烧一根不均匀的绳子,从头到尾总共需要1个小时.现有若干条材质相同的绳子.<br>如何用烧绳的方法来计时一个小时十五分钟?</p>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><a id="more"></a>

<p>准备三根同样的绳子，同时点燃第一根绳子的左右两端和第二根绳子的左端，当第一根绳子烧完时（此时过了30分钟），点燃第二根绳子的右端，第二根绳子烧完时（又过了15分钟），此时同时点燃第三根绳子的左右两端，当第三根绳子烧完时，就是一个小时十五分钟了。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>烧绳子</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo-MarkDown撰写文章</title>
    <url>/hexo/hexoWriteDnPass/</url>
    <content><![CDATA[<h1 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">'titleName'</span></span><br></pre></td></tr></table></figure>

<p><code>titleName</code>为文章初始标题，也是md文件名，不要用中文<br>当输入命令后，就会在 <code>source/_post</code> 文件夹下创建一个文件，命名为：<code>titleName.md</code></p>
<h1 id="编写文章（基于MarkDown）"><a href="#编写文章（基于MarkDown）" class="headerlink" title="编写文章（基于MarkDown）"></a>编写文章（基于MarkDown）</h1><h2 id="Markdown-简介"><a href="#Markdown-简介" class="headerlink" title="Markdown 简介"></a>Markdown 简介</h2><p>  在我们正式写下第一个文字前，我们需要了解一下究竟什么是 Markdown？<br>    <em>Markdown 是一种可以使用普通文本编辑器编写的 标记语言，通过简单的 标记语法，它可以使普通文本内容具有一定的格式</em><br>  基于 Markdown 语法的简洁性，它已经成为目前世界上最流行的用于书写博客的语言</p>
<h2 id="Markdown-语法"><a href="#Markdown-语法" class="headerlink" title="Markdown 语法"></a>Markdown 语法</h2><!-- 在编写 Markdown 时，博主强烈的推荐给大家一款简洁易用的 Markdown 编辑器 —— Typora

按照官方的说法就是 简单而强大，它不仅支持原生的语法，也支持对应的快捷键，更重要的是它还可以 实时预览

这里附上 Typora 的下载地址：[https://www.typora.io/](https://www.typora.io/)，有兴趣的朋友可以下载来试试 -->

<h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure>

<p>‘#’后记得加空格哦～</p>
<h3 id="粗体、斜体、删除线和下划线"><a href="#粗体、斜体、删除线和下划线" class="headerlink" title="粗体、斜体、删除线和下划线"></a>粗体、斜体、删除线和下划线</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*斜体*</span><br><span class="line">**粗体**</span><br><span class="line">***加粗斜体***</span><br><span class="line">~~删除线~~</span><br></pre></td></tr></table></figure>

<h3 id="引用块"><a href="#引用块" class="headerlink" title="引用块"></a>引用块</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; 文字引用</span><br></pre></td></tr></table></figure>

<p>‘&gt;’后记得加空格哦～</p>
<h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">`行内代码`</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">``` </span><br><span class="line">多行代码</span><br><span class="line">多行代码</span><br><span class="line">```</span><br></pre></td></tr></table></figure>

<h3 id="设置字体、大小及文字颜色"><a href="#设置字体、大小及文字颜色" class="headerlink" title="设置字体、大小及文字颜色"></a>设置字体、大小及文字颜色</h3><figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">red</span> <span class="attr">face</span>=<span class="string">"黑体"</span>&gt;</span></span>设置文字颜色<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">"黑体"</span>&gt;</span></span>我是黑体字<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">"微软雅黑"</span>&gt;</span></span>我是微软雅黑<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">"STCAIYUN"</span>&gt;</span></span>我是华文彩云<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">black</span> <span class="attr">size</span>=<span class="string">4</span> <span class="attr">face</span>=<span class="string">"黑体"</span>&gt;</span></span>黑体<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">#00ffff</span> <span class="attr">size</span>=<span class="string">3</span>&gt;</span></span>null<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">gray</span> <span class="attr">size</span>=<span class="string">5</span>&gt;</span></span>gray<span class="xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li><font color="red" face="黑体">设置文字颜色</font></li>
<li><font face="黑体">我是黑体字</font></li>
<li><font face="微软雅黑">我是微软雅黑</font></li>
<li><font face="STCAIYUN">我是华文彩云</font></li>
<li><font color="black" size="4" face="黑体">黑体</font></li>
<li><font color="#00ffff" size="3">null</font></li>
<li><font color="gray" size="5">gray</font></li>
</ul>
<p><strong>字体颜色:可支持英文字母和<code>#000000</code></strong><br><strong>字体大小:<code>size=5</code></strong><br><strong>字体:写了发现没什么变化（如上所示），有好的方法可以留言啊～</strong></p>
<h3 id="公式块"><a href="#公式块" class="headerlink" title="公式块"></a>公式块</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">数学公式</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>

<h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">方法一：---</span><br><span class="line"></span><br><span class="line">方法二：+++</span><br><span class="line"></span><br><span class="line">方法三：***</span><br></pre></td></tr></table></figure>

<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 有序列表项</span><br><span class="line"></span><br><span class="line">* 无序列表项</span><br><span class="line"></span><br><span class="line">+ 无序列表项</span><br><span class="line"></span><br><span class="line">- 无序列表项</span><br></pre></td></tr></table></figure>

<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><!-- <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">| 表头1|表头2|表头3|表头4</span><br><span class="line">|-| :- | :-: | -: |</span><br><span class="line">|默认左对齐|左对齐|居中对其|右对齐|</span><br><span class="line">|默认左对齐|左对齐|居中对其|右对齐|</span><br><span class="line">|默认左对齐|左对齐|居中对其|右对齐|</span><br></pre></td></tr></table></figure>

 -->
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">|表头1|表头2</span><br><span class="line">|-|-|</span><br><span class="line">|I|1</span><br><span class="line">|V|5</span><br><span class="line">|X|10</span><br><span class="line">|L|50</span><br><span class="line">|C|100</span><br><span class="line">|D|500</span><br><span class="line">|M|1000</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="right">表头1</th>
<th align="center">表头2</th>
</tr>
</thead>
<tbody><tr>
<td align="right">I</td>
<td align="center">1</td>
</tr>
<tr>
<td align="right">V</td>
<td align="center">5</td>
</tr>
<tr>
<td align="right">X</td>
<td align="center">10</td>
</tr>
<tr>
<td align="right">L</td>
<td align="center">50</td>
</tr>
<tr>
<td align="right">C</td>
<td align="center">100</td>
</tr>
<tr>
<td align="right">D</td>
<td align="center">500</td>
</tr>
<tr>
<td align="right">M</td>
<td align="center">1000</td>
</tr>
</tbody></table>
<h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">方法一：[链接文字](链接地址 &quot;链接描述&quot;)</span><br><span class="line">例如：[示例链接](https://www.example.com/ &quot;示例链接&quot;)</span><br><span class="line"></span><br><span class="line">方法二：&lt;链接地址&gt;</span><br><span class="line">例如：&lt;https://www.example.com/&gt;</span><br></pre></td></tr></table></figure>

<h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p><a href="http://glooo.fun/hexo/hexo-pic/">http://glooo.fun/hexo/hexo-pic/</a></p>
<h3 id="反斜杠插入特殊字符"><a href="#反斜杠插入特殊字符" class="headerlink" title="反斜杠插入特殊字符"></a>反斜杠插入特殊字符</h3><p>Markdown 支持在以下这些符号前面加上反斜杠(<code>\</code>)来帮助插入普通的符号：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\   反斜线</span><br><span class="line">`   反引号</span><br><span class="line">*   星号</span><br><span class="line">_   底线</span><br><span class="line">&#123;&#125;  花括号</span><br><span class="line">[]  方括号</span><br><span class="line">()  括弧</span><br><span class="line">#   井字号</span><br><span class="line">+   加号</span><br><span class="line">-   减号</span><br><span class="line">.   英文句点</span><br><span class="line">!   惊叹号</span><br></pre></td></tr></table></figure>

<h1 id="高级设置"><a href="#高级设置" class="headerlink" title="高级设置"></a>高级设置</h1><h2 id="模板设置"><a href="#模板设置" class="headerlink" title="模板设置"></a>模板设置</h2><p>当我们使用命令 <code>hexo new &quot;title&quot;</code> 创建文章时，Hexo 会根据 <code>/scaffolds/post.md</code> 对新文章进行初始化</p>
<p>换言之，<code>/scaffolds/post.md</code> 就是新文章的 模板，所以我们可以修改它来适应自己的写作习惯</p>
<p>一个简单的示例如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags: </span><br><span class="line">categories:</span><br></pre></td></tr></table></figure>

<h2 id="头部设置"><a href="#头部设置" class="headerlink" title="头部设置"></a>头部设置</h2><p>在每篇利用 Hexo 创建的文章的开头，都会有对文章进行说明的文字，叫做 文章头部</p>
<p>文章的头部除了可以设置文章标题、发布日期等基础信息外，还可以为文章添加标签、分类等</p>
<p>一个简单的示例如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: Title</span><br><span class="line">date: YYYY-MM-DD HH:MM:SS</span><br><span class="line">tags: [tag1, tag2, ...]</span><br><span class="line">categories: category</span><br></pre></td></tr></table></figure>

<p>注意：属性和属性值之间必须有一个空格，否则会解析错误</p>
<h2 id="首页显示"><a href="#首页显示" class="headerlink" title="首页显示"></a>首页显示</h2><p>在利用 Hexo 框架搭建的博客网站中，首页会显示文章的内容，且默认显示文章的全部内容</p>
<p>如果当文章太长的时候就会显得十分冗余，所以我们有必要对其进行精简</p>
<p>这时，我们只需在文章中使用 <code>&lt;!--more--&gt;</code> 标志即可，表示只会显示标志前面的内容</p>
<h2 id="部署发布"><a href="#部署发布" class="headerlink" title="部署发布"></a>部署发布</h2><p>命令行输入如下命令部署和发布文章<br><code>$ hexo g -d</code></p>
<p>建议：在使用 <code>hexo g</code> 部署之后，可以先使用 <code>hexo s</code> 运行本地站点，然后在浏览器输入地址 <a href="http://lacolhost:4000/" target="_blank" rel="noopener">http://lacolhost:4000/</a> 查看运行结果，检查无误后再使用 <code>hexo d</code> 发布</p>
<p>参考「wsmrzx」大佬的blog<br>原文链接：<a href="https://blog.csdn.net/wsmrzx/article/details/81478945" target="_blank" rel="noopener">https://blog.csdn.net/wsmrzx/article/details/81478945</a><br>和<br>「梦里北极光」大佬的blog<br>原文链接：<a href="https://blog.csdn.net/weixin_42796909/article/details/81745271" target="_blank" rel="noopener">https://blog.csdn.net/weixin_42796909/article/details/81745271</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode_13.罗马数字转整数</title>
    <url>/%E7%AE%97%E6%B3%95/leetcode-13/</url>
    <content><![CDATA[<p><strong>leetcode-13.罗马数字转整数</strong></p>
<p>难度：简单</p>
<p>罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。</p>
<table>
<thead>
<tr>
<th>字符</th>
<th>数值</th>
</tr>
</thead>
<tbody><tr>
<td>I</td>
<td>1</td>
</tr>
<tr>
<td>V</td>
<td>5</td>
</tr>
<tr>
<td>X</td>
<td>10</td>
</tr>
<tr>
<td>L</td>
<td>50</td>
</tr>
<tr>
<td>C</td>
<td>100</td>
</tr>
<tr>
<td>D</td>
<td>500</td>
</tr>
<tr>
<td>M</td>
<td>1000</td>
</tr>
</tbody></table>
<p>例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。</p>
<p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：</p>
<p>I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。<br>X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。<br>C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。<br>给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。</p>
<a id="more"></a>
<p><em>示例 1:</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;III&quot;</span><br><span class="line">输出: 3</span><br></pre></td></tr></table></figure>

<p><em>示例 2:</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;IV&quot;</span><br><span class="line">输出: 4</span><br></pre></td></tr></table></figure>

<p><em>示例 3:</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;IX&quot;</span><br><span class="line">输出: 9</span><br></pre></td></tr></table></figure>

<p><em>示例 4:</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;LVIII&quot;</span><br><span class="line">输出: 58</span><br><span class="line">解释: L = 50, V= 5, III = 3.</span><br></pre></td></tr></table></figure>

<p><em>示例 5:</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;MCMXCIV&quot;</span><br><span class="line">输出: 1994</span><br><span class="line">解释: M = 1000, CM = 900, XC = 90, IV = 4.</span><br></pre></td></tr></table></figure>

<p><strong>JS代码</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> romanToInt = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> length = s.length;</span><br><span class="line">    <span class="keyword">var</span> pre = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">var</span> number = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(length--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[length] === <span class="string">'I'</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(pre === <span class="string">'V'</span>|| pre === <span class="string">'X'</span>)&#123;</span><br><span class="line">                number -= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                number += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s[length] === <span class="string">'V'</span>)&#123;</span><br><span class="line">            number += <span class="number">5</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s[length] === <span class="string">'X'</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(pre === <span class="string">'L'</span> || pre === <span class="string">'C'</span>)&#123;</span><br><span class="line">                number -= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                number += <span class="number">10</span>;       </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s[length] === <span class="string">'L'</span>)&#123;</span><br><span class="line">            number += <span class="number">50</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s[length] === <span class="string">'C'</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(pre === <span class="string">'D'</span> || pre === <span class="string">'M'</span>)&#123;</span><br><span class="line">                number -=<span class="number">100</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                number += <span class="number">100</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s[length] === <span class="string">'D'</span>)&#123;</span><br><span class="line">            number += <span class="number">500</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s[length] === <span class="string">'M'</span>)&#123;</span><br><span class="line">            number += <span class="number">1000</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pre = s[length] ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> number;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>switch解法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> romanToInt = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> length = s.length;</span><br><span class="line">    <span class="keyword">var</span> mid = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> pre = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">var</span> number = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(length--)&#123;</span><br><span class="line">        <span class="keyword">switch</span>(s[length])&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'I'</span>:</span><br><span class="line">                <span class="keyword">if</span>(pre === <span class="string">'V'</span>||pre === <span class="string">'X'</span>)</span><br><span class="line">                    mid = <span class="number">-1</span></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    mid = <span class="number">1</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'V'</span>:</span><br><span class="line">                mid = <span class="number">5</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'X'</span>:</span><br><span class="line">                <span class="keyword">if</span>(pre === <span class="string">'L'</span>||pre === <span class="string">'C'</span>)</span><br><span class="line">                    mid = <span class="number">-10</span></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    mid = <span class="number">10</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'L'</span>:</span><br><span class="line">                mid = <span class="number">50</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'C'</span>:</span><br><span class="line">                <span class="keyword">if</span>(pre === <span class="string">'D'</span>||pre === <span class="string">'M'</span>)</span><br><span class="line">                    mid = <span class="number">-100</span></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    mid = <span class="number">100</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'D'</span>:</span><br><span class="line">                mid = <span class="number">500</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'M'</span>:</span><br><span class="line">                mid = <span class="number">1000</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        number += mid;</span><br><span class="line">        pre = s[length];</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> number;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>好像用switch这种解法能减少用时和内存消耗?</p>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/roman-to-integer" target="_blank" rel="noopener">https://leetcode-cn.com/problems/roman-to-integer</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>动态规划</title>
    <url>/%E7%AE%97%E6%B3%95/dynamicProgramming/</url>
    <content><![CDATA[<p>动态规划(dynamic programming)</p>
<p>核心思想： <strong>大事化小，小事化了</strong><br>公式：<strong>F(n)=F(n-1)+F(n-2)</strong></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key...</title>
    <url>/hexo/hexo-g-error/</url>
    <content><![CDATA[<p>书写要规范！markdown语法格式要求某些声明的冒号后要有空格</p>


<a id="more"></a>



<p>hexo generate错误:YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 5, column 11:<br>…<br>原因：创建的md文件头部声明（’—‘中间）中没有加空格。</p>

]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>elementUI修改table表头样式</title>
    <url>/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/elemeChangeTableHeaderColor/</url>
    <content><![CDATA[<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table</span></span></span><br><span class="line"><span class="tag">  <span class="attr">stripe</span></span></span><br><span class="line"><span class="tag">  <span class="attr">style</span>=<span class="string">"width: 100%"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:header-cell-style</span>=<span class="string">"&#123;background:'#f2f2f2'&#125;"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>:header-cell-style</code>可以设置elementUI中table表头的style</p>
]]></content>
      <categories>
        <category>前端技术</category>
      </categories>
      <tags>
        <tag>前端技术</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS选择奇偶数的块</title>
    <url>/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/cssSelectOddEven/</url>
    <content><![CDATA[<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 奇数 */</span></span><br><span class="line"><span class="selector-id">#list</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-of-type(odd)</span>&#123;<span class="attribute">background-color</span>:<span class="number">#FFF</span>&#125;</span><br><span class="line"><span class="comment">/* 偶数 */</span></span><br><span class="line"><span class="selector-id">#list</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-of-type(even)</span>&#123;<span class="attribute">background-color</span>:<span class="number">#F2F8FC</span>&#125;</span><br><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line"> </span><br><span class="line">&lt;ul id="list"&gt;</span><br><span class="line">&lt;li&gt;1&lt;/li&gt;</span><br><span class="line">&lt;li&gt;2&lt;/li&gt;</span><br><span class="line">&lt;li&gt;3&lt;/li&gt;</span><br><span class="line">&lt;li&gt;4&lt;/li&gt;</span><br><span class="line">&lt;li&gt;5&lt;/li&gt;</span><br><span class="line">&lt;li&gt;6&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端技术</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>eleme-form</title>
    <url>/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/eleme-form/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>前端技术</category>
      </categories>
      <tags>
        <tag>elementUI</tag>
      </tags>
  </entry>
  <entry>
    <title>eleme-table</title>
    <url>/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/eleme-table/</url>
    <content><![CDATA[<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>当<code>el-table</code>元素中注入<code>data</code>对象数组后，在<code>el-table-column</code>中用<code>prop</code>属性来对应对象中的键名即可填入数据，用<code>label</code>属性来定义<strong>表格的列名</strong>。可以使用width属性来定义列宽。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">"tableData"</span> <span class="attr">style</span>=<span class="string">"width: 100%"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">"date"</span> <span class="attr">label</span>=<span class="string">"日期"</span> <span class="attr">width</span>=<span class="string">"180"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="带斑马纹的表格stripe"><a href="#带斑马纹的表格stripe" class="headerlink" title="带斑马纹的表格stripe"></a>带斑马纹的表格stripe</h2><p>  <strong>stripe</strong>属性可以创建带斑马纹的表格。它接受一个Boolean，默认为false，设置为true即为启用。<br><code>&lt;el-table :data=&quot;tableData&quot; stripe style=&quot;width: 100%&quot;&gt;</code></p>
<h2 id="表格边框"><a href="#表格边框" class="headerlink" title="表格边框"></a>表格边框</h2><p>默认情况下，Table 组件是不具有竖直方向的边框的，如果需要，可以使用<strong>border</strong>属性，它接受一个Boolean，设置为true即可启用。<br><code>&lt;el-table :data=&quot;tableData&quot; border style=&quot;width: 100%&quot;&gt;</code></p>
<h2 id="带状态的表格"><a href="#带状态的表格" class="headerlink" title="带状态的表格"></a>带状态的表格</h2><p>可将表格内容 highlight 显示，方便区分「成功、信息、警告、危险」等内容。<br>可以通过指定 Table 组件的 <code>row-class-name</code> 属性来为 Table 中的某一行添加 <code>class</code>，表明该行处于某种状态。<br><code>&lt;el-table :data=&quot;tableData&quot; style=&quot;width: 100%&quot; :row-class-name=&quot;tableRowClassName&quot;&gt;</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.el-table</span> <span class="selector-class">.warning-row</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: oldlace;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.el-table</span> <span class="selector-class">.success-row</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#f0f9eb</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">tableRowClassName(&#123;row, rowIndex&#125;) &#123;</span><br><span class="line">  <span class="keyword">if</span> (rowIndex === <span class="number">1</span>) &#123;    <span class="comment">//第2行（从0开始计算）添加class='warning-row'</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'warning-row'</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rowIndex === <span class="number">3</span>) &#123;<span class="comment">//第3行（从0开始计算）添加class='success-row'</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'success-row'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="固定表头height"><a href="#固定表头height" class="headerlink" title="固定表头height"></a>固定表头height</h2><p>纵向内容过多时，可选择固定表头。<br>只要在<code>el-table</code>元素中定义了<strong>height</strong>属性，即可实现固定表头的表格，而不需要额外的代码。<br><code>&lt;el-table :data=&quot;tableData&quot; height=&quot;250&quot; border style=&quot;width: 100%&quot;&gt;</code></p>
<h2 id="固定列"><a href="#固定列" class="headerlink" title="固定列"></a>固定列</h2><p>横向内容过多时，可选择固定列。<br>固定列需要使用<strong>fixed</strong>属性，它接受 <strong>Boolean</strong> 值或者<strong>left</strong>，<strong>right</strong>，表示左边固定还是右边固定。<br><code>&lt;el-table-column fixed prop=&quot;date&quot; label=&quot;日期&quot; width=&quot;150&quot;&gt;&lt;/el-table-column&gt;</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">fixed</span>=<span class="string">"right"</span> <span class="attr">label</span>=<span class="string">"操作"</span> <span class="attr">width</span>=<span class="string">"100"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">"scope"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">"handleClick(scope.row)"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">size</span>=<span class="string">"small"</span>&gt;</span>查看<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">size</span>=<span class="string">"small"</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>固定列和表头可以同时使用</strong></p>
<h2 id="流体高度max-height"><a href="#流体高度max-height" class="headerlink" title="流体高度max-height"></a>流体高度max-height</h2><p>当数据量动态变化时，可以为 Table 设置一个最大高度。<br>通过设置<code>max-height</code>属性为 Table 指定最大高度。此时若表格所需的高度大于最大高度，则会显示一个滚动条。<br>多用于添加行删除行的table。<br> <code>&lt;el-table :data=&quot;tableData&quot; style=&quot;width: 100%&quot; max-height=&quot;250&quot;&gt;</code></p>
<h2 id="多级表头-嵌套使用el-table-column"><a href="#多级表头-嵌套使用el-table-column" class="headerlink" title="多级表头-嵌套使用el-table-column"></a>多级表头-嵌套使用el-table-column</h2><p>只需要在 el-table-column 里面嵌套 el-table-column，就可以实现多级表头。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">"地址"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">    <span class="attr">prop</span>=<span class="string">"province"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">label</span>=<span class="string">"省份"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">width</span>=<span class="string">"120"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">    <span class="attr">prop</span>=<span class="string">"city"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">label</span>=<span class="string">"城市"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">width</span>=<span class="string">"120"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="单选"><a href="#单选" class="headerlink" title="单选"></a>单选</h2><p>选择单行数据时使用色块表示。<br>在el-table中添加<strong>highlight-current-row</strong>属性。之后由<strong>current-change</strong>事件来管理选中时触发的事件，它会传入<strong>currentRow</strong>，<strong>oldCurrentRow</strong>。<br><code>&lt;el-table ref=&quot;singleTable&quot; :data=&quot;tableData&quot; highlight-current-row @current-change=&quot;handleCurrentChange&quot; style=&quot;width: 100%&quot;&gt;</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">handleCurrentChange(currentRow,oldCurrentRow) &#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>选择第二行<br><code>@click=&quot;setCurrent(tableData[1])&quot;</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">setCurrent(row) &#123;</span><br><span class="line">  <span class="keyword">this</span>.$refs.singleTable.setCurrentRow(row);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="添加索引"><a href="#添加索引" class="headerlink" title="添加索引"></a>添加索引</h2><p>如果需要显示索引，可以增加一列<code>el-table-column</code>，设置type属性为index即可显示从 1 开始的索引号。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">  <span class="attr">type</span>=<span class="string">"index"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">width</span>=<span class="string">"50"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="多选"><a href="#多选" class="headerlink" title="多选"></a>多选</h2><p>实现多选非常简单: 手动添加一个el-table-column，设type属性为selection即可。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">   <span class="attr">type</span>=<span class="string">"selection"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">width</span>=<span class="string">"55"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table</span></span></span><br><span class="line"><span class="tag">   <span class="attr">ref</span>=<span class="string">"multipleTable"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">:data</span>=<span class="string">"tableData"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">tooltip-effect</span>=<span class="string">"dark"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">style</span>=<span class="string">"width: 100%"</span></span></span><br><span class="line"><span class="tag">   @<span class="attr">selection-change</span>=<span class="string">"handleSelectionChange"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">handleSelectionChange(val) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>选中2，3行<br><code>@click=&quot;toggleSelection([tableData[1], tableData[2]])</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">toggleSelection(rows) &#123;</span><br><span class="line">  <span class="keyword">if</span> (rows) &#123;</span><br><span class="line">    rows.forEach(<span class="function"><span class="params">row</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.$refs.multipleTable.toggleRowSelection(row);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.$refs.multipleTable.clearSelection();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="show-overflow-tooltip"><a href="#show-overflow-tooltip" class="headerlink" title="show-overflow-tooltip"></a>show-overflow-tooltip</h2><p>默认情况下若内容过多会折行显示，若需要单行显示可以使用<code>show-overflow-tooltip</code>属性，它接受一个Boolean，为true时多余的内容会在 hover 时以 tooltip 的形式显示出来。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">   <span class="attr">prop</span>=<span class="string">"address"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">label</span>=<span class="string">"地址"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">show-overflow-tooltip</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h2 id="排序sortable"><a href="#排序sortable" class="headerlink" title="排序sortable"></a>排序sortable</h2><p>在列中设置sortable属性即可实现以该列为基准的排序，接受一个Boolean，默认为false。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">  <span class="attr">prop</span>=<span class="string">"date"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">label</span>=<span class="string">"日期"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">sortable</span></span></span><br><span class="line"><span class="tag">  <span class="attr">width</span>=<span class="string">"180"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>可以通过 Table 的default-sort属性设置默认的排序列和排序顺序。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:data</span>=<span class="string">"tableData"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">style</span>=<span class="string">"width: 100%"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:default-sort</span> = <span class="string">"&#123;prop: 'date', order: 'descending'&#125;"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br></pre></td></tr></table></figure>

<p>引用<a href="https://element.eleme.io/#/zh-CN/component/table" target="_blank" rel="noopener">elementUI</a></p>
]]></content>
      <categories>
        <category>前端技术</category>
      </categories>
      <tags>
        <tag>前端技术</tag>
        <tag>elementUI</tag>
      </tags>
  </entry>
  <entry>
    <title>props&amp;emit</title>
    <url>/vue/props-emit/</url>
    <content><![CDATA[<h1 id="props"><a href="#props" class="headerlink" title="props"></a>props</h1><p>  父组件给子组件传值</p>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>  父组件中：</p>
<ol>
<li><p>import引入 </p>
</li>
<li><p>给变量b赋值</p>
</li>
<li><p><code>&lt;aoe-dialog :a=&quot;b&quot;&gt;&lt;/aoe-dialog&gt;</code></p>
<p>子组件中：<code>props:[&quot;a&quot;]</code>+使用a(但不能修改a的值)</p>
<a id="more"></a>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2></li>
</ol>
<p>  <strong>父组件</strong></p>
<p>  VUE部分：<br>  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 实现一个dialog的表单对话框--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"text"</span> @<span class="attr">click</span>=<span class="string">"s1"</span>&gt;</span>打开嵌套表单的 Dialog<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aoe-dialog</span> <span class="attr">:s2</span>=<span class="string">"s3"</span>&gt;</span><span class="tag">&lt;/<span class="name">aoe-dialog</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>  JS部分：<br>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// import &#123; AoeDialog &#125; from "./view9_child";注意这个地方用下面那行代码才对，import组件不加&#123;&#125;</span></span><br><span class="line"><span class="keyword">import</span> AoeDialog <span class="keyword">from</span> <span class="string">"./view9_child"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      s3: <span class="literal">false</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123; AoeDialog &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    s1() &#123;</span><br><span class="line">      <span class="keyword">this</span>.s3 = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>  <strong>子组件</strong><br>  VUE部分：<br>  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">title</span>=<span class="string">"收货地址"</span> <span class="attr">:visible.sync</span>=<span class="string">"s2"</span>&gt;</span><span class="comment">&lt;!--使用s2显示dialog--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:model</span>=<span class="string">"form"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"活动名称"</span> <span class="attr">:label-width</span>=<span class="string">"formLabelWidth"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"form.name"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"footer"</span> <span class="attr">class</span>=<span class="string">"dialog-footer"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">"handle"</span>&gt;</span>取 消<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span> &gt;</span>确 定<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;&#123;this.s2?'dialog打开':'dialog关闭'&#125;&#125;</span><br></pre></td></tr></table></figure></p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  props: [<span class="string">"s2"</span>],<span class="comment">//父组件调用子组件传过来的s2</span></span><br><span class="line">  <span class="comment">// props: &#123;&#125;,</span></span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      form: &#123;</span><br><span class="line">        name: <span class="string">""</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      formLabelWidth: <span class="string">"120px"</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

  
  

<p>  要关闭弹窗时,点击取消按钮或点击右上角‘x’，如果直接写函数handle：<br>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">handle()&#123;</span><br><span class="line">  <span class="keyword">this</span>.s2 = <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>  让弹窗不显示时，<br>  则会报错<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Avoid mutating a prop directly since the value will be overwritten whenever the parent component re-renders</span><br></pre></td></tr></table></figure></p>
<h1 id="子组件里修改父组件传过来的值报错问题"><a href="#子组件里修改父组件传过来的值报错问题" class="headerlink" title="子组件里修改父组件传过来的值报错问题"></a>子组件里修改父组件传过来的值报错问题</h1><p>比如说一个dialog对话框，子组件写一个dialog，父组件引用传值show或者hidden，在dialog中会有个关闭dialog的按钮，这时候会遇到下边的问题。<br><strong>把一个布尔值传递给子组件，然后，在子组件中修改该值，会报错</strong>，报错如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Avoid mutating a prop directly since the value will be overwritten whenever the parent component re-renders</span><br></pre></td></tr></table></figure>

<p>原因：</p>
<p>在 Vue 中，父子组件的关系可以总结为 prop 向下传递，事件向上传递。父组件通过 prop 给子组件下发数据，子组件通过事件给父组件发送消息。<br>Prop 是单向绑定的：当父组件的属性变化时，将传导给子组件，但是反过来不会。这是为了防止子组件无意间修改了父组件的状态，来避免应用的数据流变得难以理解。</p>
<p>解决办法：<br>　　原理：将要更改的值，传递给父组件，在父组件中更改，再传递给子组件<br>步骤：<br>　　先将值传递给子组件，子组件 props 接收并使用，然后通过 $emit 广播一个事件给父组件，并将值一并传递，父组件 @子组件广播过来的事件，并定义一个方法，在该方法中，改变传递过来的值，父组件又会将值传递给子组件，这样就形成了一个闭环，问题得以解决。</p>
<h1 id="emit"><a href="#emit" class="headerlink" title="$emit"></a>$emit</h1><p>子组件通过事件emit父组件</p>
<h2 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h2><h3 id="单参数"><a href="#单参数" class="headerlink" title="单参数"></a>单参数</h3><p>子组件：<br>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">handle()&#123;</span><br><span class="line">  <span class="keyword">this</span>.$emit(<span class="string">"event"</span>,<span class="keyword">this</span>.value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>  父组件：<br>  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aoe-dialog</span> @<span class="attr">event</span>=<span class="string">"function"</span>&gt;</span><span class="tag">&lt;/<span class="name">aoe-dialog</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="多参数"><a href="#多参数" class="headerlink" title="多参数"></a>多参数</h3><p>  子组件：<br>  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">handle()&#123;</span><br><span class="line">  <span class="keyword">this</span>.$emit(<span class="string">"event"</span>,<span class="keyword">this</span>.value1,<span class="keyword">this</span>.value2,...)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>  父组件：<br>  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aoe-dialog</span> @<span class="attr">event</span>=<span class="string">"function"</span>&gt;</span><span class="tag">&lt;/<span class="name">aoe-dialog</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">v1,v2,...</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(v1);</span><br><span class="line">  <span class="built_in">console</span>.log(v2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="额外的参数"><a href="#额外的参数" class="headerlink" title="额外的参数"></a>额外的参数</h3>  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aoe-dialog</span> @<span class="attr">event</span>=<span class="string">"function(arguments, 10000)"</span>&gt;</span><span class="tag">&lt;/<span class="name">aoe-dialog</span>&gt;</span></span><br></pre></td></tr></table></figure>

  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  s7(a,b) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">  <span class="built_in">console</span>.log(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>arguments（固定单词用法）代表子组件传递过来的参数的arguments对象(参数1,3是数字，参数2是对象数组)，10000是额外的参数(v-for时可以传索引key等)，JS中b接收10000，如下图</strong></p>




<h2 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h2><p>子组件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    handle() &#123;</span><br><span class="line">      <span class="keyword">this</span>.$emit(<span class="string">"s4"</span>, <span class="keyword">this</span>.s2);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p><em>子组件定义handle方法，把父组件发来的s2再发给父组件，父组件中修改s2的值再props传递给子组件。</em></p>
<p>父组件中响应子组件发来的消息：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"text"</span> @<span class="attr">click</span>=<span class="string">"s1"</span>&gt;</span>打开嵌套表单的 Dialog<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aoe-dialog</span> <span class="attr">:s2</span>=<span class="string">"s3"</span> @<span class="attr">s4</span>=<span class="string">"s5"</span>&gt;</span><span class="tag">&lt;/<span class="name">aoe-dialog</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> AoeDialog <span class="keyword">from</span> <span class="string">"./view9_child"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      s3: <span class="literal">false</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123; AoeDialog &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    s1() &#123;</span><br><span class="line">      <span class="keyword">this</span>.s3 = <span class="literal">true</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    s5() &#123;</span><br><span class="line">      <span class="keyword">this</span>.s3 = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><code>@s4=&#39;s5&#39;</code><em>父组件@响应子组件发来的s4，定义新的方法s5，在s5()中修改s3的值，达到关闭dialog对话框的效果</em></p>
<p>参考<a href="https://www.cnblogs.com/Sky-Ice/p/10456533.html" target="_blank" rel="noopener">Sky_Ice</a>大佬的博客</p>
<p>引用<a href="https://element.eleme.io/#/zh-CN/component/dialog" target="_blank" rel="noopener">element组件</a></p>
<p>受益于<a href="https://github.com/vuejs/vue/issues/5735" target="_blank" rel="noopener">@huangchen1031</a></p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Git学习(二)</title>
    <url>/Git/gitLearning2/</url>
    <content><![CDATA[<p>接<a href="/Git/gitLearning">Git学习(一)</a></p>
<p>…</p>
<a id="more"></a>

<h1 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h1><p><a href="https://www.liaoxuefeng.com/wiki/896043488029600/896954117292416" target="_blank" rel="noopener">配置github远程仓库ssh</a></p>
<h2 id="添加远程库"><a href="#添加远程库" class="headerlink" title="添加远程库"></a>添加远程库</h2><h3 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h3><p><code>$ git remote add origin git@github.com:michaelliao/learngit.git</code><br>请千万注意，把上面的michaelliao替换成你自己的GitHub账户名，否则，你在本地关联的就是我的远程库，关联没有问题，但是你以后推送是推不上去的，因为你的SSH Key公钥不在我的账户列表中。</p>
<p>添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。</p>
<p>下一步，就可以把本地库的所有内容推送到远程库上：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git push -u origin master</span><br><span class="line">Counting objects: 20, done.</span><br><span class="line">Delta compression using up to 4 threads.</span><br><span class="line">Compressing objects: 100% (15/15), done.</span><br><span class="line">Writing objects: 100% (20/20), 1.64 KiB | 560.00 KiB/s, done.</span><br><span class="line">Total 20 (delta 5), reused 0 (delta 0)</span><br><span class="line">remote: Resolving deltas: 100% (5/5), done.</span><br><span class="line">To github.com:michaelliao/learngit.git</span><br><span class="line">* [new branch]      master -&gt; master</span><br><span class="line">Branch &apos;master&apos; set up to track remote branch &apos;master&apos; from &apos;origin&apos;.</span><br></pre></td></tr></table></figure>

<h3 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h3><p>把本地库的内容推送到远程，用<code>git push</code>命令，实际上是把当前分支master推送到远程。<br>由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。<br>从现在起，只要本地作了提交，就可以通过命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure>

<p>把本地master分支的最新修改推送至GitHub，现在，你就拥有了真正的分布式版本库！</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>要关联一个远程库，使用命令<code>git remote add origin git@server-name:path/repo-name.git；</code></p>
<p>关联后，使用命令<code>git push -u origin master</code>第一次推送master分支的所有内容；</p>
<p>此后，每次本地提交后，只要有必要，就可以使用命令<code>git push origin master</code>推送最新修改；</p>
<p>分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！</p>
<h2 id="从远程库克隆"><a href="#从远程库克隆" class="headerlink" title="从远程库克隆"></a>从远程库克隆</h2><h3 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h3><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>要克隆一个仓库，首先必须知道仓库的地址，然后使用<code>git clone</code>命令克隆。</p>
<p>Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。</p>
<h1 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h1><h2 id="创建与合并分支"><a href="#创建与合并分支" class="headerlink" title="创建与合并分支"></a>创建与合并分支</h2><p>每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。</p>
<h3 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a>git checkout</h3><p><code>git checkout</code>命令加上-b参数表示创建并切换，相当于以下两条命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git branch dev</span><br><span class="line">$ git checkout dev</span><br><span class="line">Switched to branch &apos;dev&apos;</span><br></pre></td></tr></table></figure>

<h3 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h3><p>然后，用git branch命令查看当前分支：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* dev</span><br><span class="line">  master</span><br></pre></td></tr></table></figure>

<p>切换到master分支上<br>把dev分支的工作成果合并到master分支上：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git merge dev</span><br><span class="line">Updating d46f35e..b17d20e</span><br><span class="line">Fast-forward</span><br><span class="line">readme.txt | 1 +</span><br><span class="line">1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure>

<h3 id="git-merge-分支名"><a href="#git-merge-分支名" class="headerlink" title="git merge 分支名"></a>git merge 分支名</h3><p>把参数里的分支合并到当前分支上<br>注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。</p>
<p>当然，也不是每次合并都能<code>Fast-forward</code>。</p>
<p>合并完成后，就可以放心地删除dev分支了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git branch -d dev</span><br><span class="line">Deleted branch dev (was b17d20e).</span><br></pre></td></tr></table></figure>

<p>因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在master分支上工作效果是一样的，但过程更安全。</p>
<h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><p>Git鼓励大量使用分支：</p>
<p>查看分支：<code>git branch</code></p>
<p>创建分支：<code>git branch &lt;name&gt;</code></p>
<p>切换分支：<code>git checkout &lt;name&gt;</code></p>
<p>创建+切换分支：<code>git checkout -b &lt;name&gt;</code></p>
<p>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></p>
<p>删除分支：<code>git branch -d &lt;name&gt;</code></p>
<h2 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h2><p>Git用<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>，<code>=======</code>，<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>标记出不同分支的内容，我们修改如下后保存：</p>
<p>参考<a href="https://www.liaoxuefeng.com/" target="_blank" rel="noopener">廖雪峰</a>大佬的官方网站</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git学习(一)</title>
    <url>/Git/gitLearning/</url>
    <content><![CDATA[<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><p>Linus两周内用C语言写出来的分布式版本控制系统，除了git他还创建了Linux并开源。</p>
<h1 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h1><h2 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h2><p>创建文件夹<br><code>$ git init</code><br>把这个文件夹变成Git可以管理的文件夹</p>
<p>目录下生成一个.git目录  不能随便改 是Git来跟踪管理版本库的目录<br>.git目录可能默认隐藏 用<code>ls -ah</code>命令就可以看到</p>
<a id="more"></a>
<p>注：所有的版本控制系统，其实只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码等等<br>  版本控制系统可以告诉你每次的改动，比如在第5行加了一个单词“Linux”，在第8行删了一个单词“Windows”。而图片、视频这些二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是只知道图片从100KB改成了120KB，但到底改了啥，版本控制系统不知道，也没法知道。</p>
<p>  Microsoft的word也是二进制格式，无法跟踪word文件的改动。</p>
<p>  如果要真正使用版本控制系统，就要以纯文本方式编写文件。</p>
<p>因为文本是有编码的，比如中文有常用的GBK编码，日文有Shift_JIS编码，如果没有历史遗留问题，强烈建议使用标准的UTF-8编码，所有语言使用同一种编码，既没有冲突，又被所有平台所支持。</p>
<p><strong>使用Windows的童鞋要特别注意：</strong><br>千万不要使用Windows自带的记事本编辑任何文本文件。原因是Microsoft开发记事本的团队使用了一个非常弱智的行为来保存UTF-8编码的文件，他们自作聪明地在每个文件开头添加了0xefbbbf（十六进制）的字符，你会遇到很多不可思议的问题，比如，网页第一行可能会显示一个“?”，明明正确的程序一编译就报语法错误，等等，都是由记事本的弱智行为带来的。建议你下载<a href="https://notepad-plus-plus.org/" target="_blank" rel="noopener">Notepad++</a>代替记事本，不但功能强大，而且免费！记得把Notepad++的默认编码设置为UTF-8 without BOM即可。</p>
<h1 id="进入正题"><a href="#进入正题" class="headerlink" title="进入正题"></a>进入正题</h1><p>现在我们编写一个readme.txt文件，内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Git is a version control system.</span><br><span class="line">Git is free software.</span><br></pre></td></tr></table></figure>

<h2 id="git-add-amp-git-commit-m-“”"><a href="#git-add-amp-git-commit-m-“”" class="headerlink" title="git add &amp; git commit -m “”"></a>git add &amp; git commit -m “”</h2><p>把一个文件放入git仓库只需两步</p>
<ol>
<li>告诉Git，把文件添加到暂存区<br><code>git add 文件名+后缀</code><br>执行上面，正确无误则无消息回复，错了会提示错误。可反复多次使用，添加多个文件；<br><code>git add .</code>添加所有修改的文件到暂存区</li>
<li>把文件提交到仓库<br><code>git commit -m &#39;commit description&#39;</code><br>简单解释一下git commit命令，<strong>-m</strong>后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。</li>
</ol>
<p>嫌麻烦不想输入-m “xxx”行不行？确实有办法可以这么干，但是强烈不建议你这么干，因为输入说明对自己对别人阅读都很重要。实在不想输入说明的童鞋请自行Google，我不告诉你这个参数。</p>
<p>git commit命令执行成功后会告诉你，1 file changed：1个文件被改动（我们新添加的readme.txt文件）；2 insertions：插入了两行内容（readme.txt有两行内容）。</p>
<p>为什么Git添加文件需要add，commit一共两步呢？因为commit可以一次提交很多文件，所以你可以多次add不同的文件，比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git add file1.txt</span><br><span class="line">$ git add file2.txt file3.txt</span><br><span class="line">$ git commit -m &quot;add 3 files.&quot;</span><br></pre></td></tr></table></figure>

<h2 id="git-status-amp-git-diff"><a href="#git-status-amp-git-diff" class="headerlink" title="git status &amp; git diff"></a>git status &amp; git diff</h2><p> <strong>要随时掌握工作区的状态，使用git status命令。</strong><br> <strong>如果git status告诉你有文件被修改过，用git diff可以查看修改内容。</strong></p>
<p><code>git status</code> 查看仓库当前的状态  只能看到修改了文件 具体修改了什么地方 需要用：</p>
<p><code>git diff 文件名</code> 查看difference</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git diff readme.txt </span><br><span class="line">diff --git a/readme.txt b/readme.txt</span><br><span class="line">index 46d49bf..9247db6 100644</span><br><span class="line">--- a/readme.txt</span><br><span class="line">+++ b/readme.txt</span><br><span class="line">@@ -1,2 +1,2 @@</span><br><span class="line">-Git is a version control system.</span><br><span class="line">+Git is a distributed version control system.</span><br><span class="line">Git is free software.</span><br></pre></td></tr></table></figure>

<h1 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h1><p>  你不断对文件进行修改，然后不断提交修改到版本库里，就好比玩RPG游戏时，每通过一关就会自动把游戏状态存盘，如果某一关没过去，你还可以选择读取前一关的状态。有些时候，在打Boss之前，你会手动存盘，以便万一打Boss失败了，可以从最近的地方重新开始。Git也是一样，每当你觉得文件修改到一定程度的时候，就可以“保存一个快照”，这个快照在Git中被称为commit。一旦你把文件改乱了，或者误删了文件，还可以从最近的一个commit恢复，然后继续工作，而不是把几个月的工作成果全部丢失。</p>
<h2 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h2><p>  <code>git log</code>显示从最近时间到最远的<strong>提交</strong>日志<br>  如果嫌输出信息太多，看得眼花缭乱的，可以试试加上–pretty=oneline参数：</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git log --pretty=oneline</span><br><span class="line">  1094adb7b9b3807259d8cb349e7df1d4d6477073 (HEAD -&gt; master) append GPL</span><br><span class="line">  e475afc93c209a690c39c13a46716e8fa000c366 add distributed</span><br><span class="line">  eaadf4e385e865d25c48e7ca9c8395c3f7dfaef0 wrote a readme file</span><br></pre></td></tr></table></figure>

<p>需要友情提示的是，你看到的一大串类似<code>1094adb...</code>的是<strong>commit id</strong>（版本号），和SVN不一样，Git的commit id不是1，2，3……递增的数字，而是一个SHA1计算出来的一个非常大的数字，用十六进制表示，而且你看到的commit id和我的肯定不一样，以你自己的为准。为什么commit id需要用这么一大串数字表示呢？因为Git是分布式的版本控制系统，后面我们还要研究多人在同一个版本库里工作，如果大家都用1，2，3……作为版本号，那肯定就冲突了。</p>
<p>每提交一个新版本，实际上Git就会把它们自动串成一条时间线。</p>
<p>Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交1094adb…（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是<code>HEAD^^</code>，当然往上100个版本写100个^比较容易数不过来，所以写成<code>HEAD~100</code>。</p>
<p>现在，我们要把当前版本append GPL回退到上一个版本add distributed，就可以使用<code>git reset</code>命令</p>
<h2 id="git-reset-–hard-commit-id"><a href="#git-reset-–hard-commit-id" class="headerlink" title="git reset –hard commit_id"></a>git reset –hard commit_id</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git reset --hard HEAD^</span><br><span class="line">HEAD is now at e475afc add distributed</span><br></pre></td></tr></table></figure>

<p>旧版本返回新版本，只要上面的命令行窗口还没有被关掉，你就可以顺着往上找啊找啊，找到commit id是1094adb…，于是就可以指定回到未来的某个版本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git reset --hard 1094a</span><br><span class="line">HEAD is now at 83b0afe append GPL</span><br></pre></td></tr></table></figure>

<p>版本号没必要写全，前几位就可以了，Git会自动去找。当然也不能只写前一两位，因为Git可能会找到多个版本号，就无法确定是哪一个了。</p>
<p>Git的版本回退速度非常快，因为Git在内部有个指向当前版本的HEAD指针，当你回退版本的时候，Git仅仅是把HEAD从指向append GPL：改为指向add distributed版本。</p>
<p>现在，你回退到了某个版本，关掉了电脑，第二天早上就后悔了，想恢复到新版本怎么办？找不到新版本的commit id怎么办？</p>
<h2 id="git-reflog"><a href="#git-reflog" class="headerlink" title="git reflog"></a>git reflog</h2><p>在Git中，总是有后悔药可以吃的。当你用<code>$ git reset --hard HEAD^</code>回退到<code>add distributed</code>版本时，再想恢复到<code>append GPL</code>，就必须找到append GPL的commit id。Git提供了一个命令git reflog用来记录你的每一次命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git reflog</span><br><span class="line">e475afc HEAD@&#123;1&#125;: reset: moving to HEAD^</span><br><span class="line">1094adb (HEAD -&gt; master) HEAD@&#123;2&#125;: commit: append GPL</span><br><span class="line">e475afc HEAD@&#123;3&#125;: commit: add distributed</span><br><span class="line">eaadf4e HEAD@&#123;4&#125;: commit (initial): wrote a readme file</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li><p>HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令<code>git reset --hard commit_id</code></p>
</li>
<li><p>穿梭前，用<code>git log</code>可以查看提交历史，以便确定要回退到哪个版本。</p>
</li>
<li><p>要重返未来，用<code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本。</p>
</li>
</ol>
<h1 id="工作区和暂存区"><a href="#工作区和暂存区" class="headerlink" title="工作区和暂存区"></a>工作区和暂存区</h1><p><strong>Git和其他版本控制系统如SVN的一个不同之处就是有暂存区的概念。</strong></p>
<h2 id="工作区（Working-Directory）"><a href="#工作区（Working-Directory）" class="headerlink" title="工作区（Working Directory）"></a>工作区（Working Directory）</h2><p>  在电脑里的目录</p>
<h2 id="版本库（Repository）"><a href="#版本库（Repository）" class="headerlink" title="版本库（Repository）"></a>版本库（Repository）</h2><p>工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。</p>
<p>Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。<br>git add命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执行git commit就可以一次性把暂存区的所有修改提交到分支。</p>
<h1 id="管理修改"><a href="#管理修改" class="headerlink" title="管理修改"></a>管理修改</h1><h2 id="管理的是修改而非文件"><a href="#管理的是修改而非文件" class="headerlink" title="管理的是修改而非文件"></a>管理的是修改而非文件</h2><p><strong><em>为什么Git比其他版本控制系统设计得优秀，因为Git跟踪并管理的是修改，而非文件。</em></strong></p>
<h2 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h2><p>  第一次修改 -&gt; git add -&gt; 第二次修改 -&gt; git commit</p>
<p>  你看，我们前面讲了，Git管理的是修改，当你用git add命令后，在工作区的第一次修改被放入暂存区，准备提交，但是，在工作区的第二次修改并没有放入暂存区，所以，git commit只负责把暂存区的修改提交了，也就是第一次的修改被提交了，第二次的修改不会被提交。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>现在，你又理解了Git是如何跟踪修改的，每次修改，如果不用git add到暂存区，那就不会加入到commit中。</p>
<h1 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h1><h2 id="git-checkout-–-file"><a href="#git-checkout-–-file" class="headerlink" title="git checkout – file"></a>git checkout – file</h2><p><code>git checkout -- file</code>可以丢弃工作区的修改：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git checkout -- readme.txt</span><br></pre></td></tr></table></figure>

<p>一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</p>
<p>一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p>
<p>总之，就是让这个文件回到最近一次git commit或git add时的状态。</p>
<p>注：git checkout – file命令中的–很重要，没有–，就变成了“切换到另一个分支”的命令。</p>
<h2 id="git-reset-HEAD"><a href="#git-reset-HEAD" class="headerlink" title="git reset HEAD "></a>git reset HEAD <file></file></h2><p><code>git reset HEAD &lt;file&gt;</code>可以把暂存区的修改撤销掉（unstage），重新放回工作区。<br><code>git reset</code>命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。</p>
<h2 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h2><p>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code>。</p>
<p>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD &lt;file&gt;</code>，就回到了场景1，第二步按场景1操作。</p>
<p>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考<a href="/Git/gitLearning/#版本回退">版本回退</a>一节，不过前提是没有推送到远程库。</p>
<h1 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h1><h2 id="git-rm"><a href="#git-rm" class="headerlink" title="git rm"></a>git rm</h2><p>删除本地文件后，现在你有两个选择，</p>
<ol>
<li>确实要从版本库中删除该文件，那就用命令<code>git rm</code>删掉，并且<code>git commit</code>：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git rm test.txt</span><br><span class="line">rm &apos;test.txt&apos;</span><br><span class="line"></span><br><span class="line">$ git commit -m &quot;remove test.txt&quot;</span><br><span class="line">[master d46f35e] remove test.txt</span><br><span class="line">1 file changed, 1 deletion(-)</span><br><span class="line">delete mode 100644 test.txt</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>注：先手动删除文件，然后使用<code>git rm &lt;file&gt;</code>和<code>git add&lt;file&gt;</code>效果是一样的。</p>
<ol start="2">
<li>删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git checkout -- test.txt</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p><code>git checkout</code>其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。<br>注：从来没有被添加到版本库就被删除的文件，是无法恢复的！</p>
<h2 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h2><p>命令<code>git rm</code>用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。</p>
<h1 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h1><p><a href="/Git/gitLearning2/#远程仓库">远程仓库</a></p>
<h2 id="添加远程库"><a href="#添加远程库" class="headerlink" title="添加远程库"></a>添加远程库</h2><p><a href="/Git/gitLearning2/#添加远程库">添加远程库</a></p>
<h2 id="从远程库克隆"><a href="#从远程库克隆" class="headerlink" title="从远程库克隆"></a>从远程库克隆</h2><p><a href="/Git/gitLearning2/#添加远程库">添加远程库</a></p>
<h1 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h1><p><a href="/Git/gitLearning2/#添加远程库">添加远程库</a></p>
<p>……</p>
<p>参考<a href="https://www.liaoxuefeng.com/" target="_blank" rel="noopener">廖雪峰</a>大佬的官方网站</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>next主题部分配置</title>
    <url>/hexo/next-config/</url>
    <content><![CDATA[<h1 id="顶部加载条"><a href="#顶部加载条" class="headerlink" title="顶部加载条"></a>顶部加载条</h1><p>themes/next下的主题配置文件_config.yml</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pace: <span class="literal">true</span></span><br><span class="line"><span class="comment"># Themes list:</span></span><br><span class="line"><span class="comment">#pace-theme-big-counter</span></span><br><span class="line"><span class="comment">#pace-theme-bounce</span></span><br><span class="line"><span class="comment">#pace-theme-barber-shop</span></span><br><span class="line"><span class="comment">#pace-theme-center-atom</span></span><br><span class="line"><span class="comment">#pace-theme-center-circle</span></span><br><span class="line"><span class="comment">#pace-theme-center-radar</span></span><br><span class="line"><span class="comment">#pace-theme-center-simple</span></span><br><span class="line"><span class="comment">#pace-theme-corner-indicator</span></span><br><span class="line"><span class="comment">#pace-theme-fill-left</span></span><br><span class="line"><span class="comment">#pace-theme-flash</span></span><br><span class="line"><span class="comment">#pace-theme-loading-bar</span></span><br><span class="line"><span class="comment">#pace-theme-mac-osx</span></span><br><span class="line"><span class="comment">#pace-theme-minimal</span></span><br><span class="line"><span class="comment"># For example</span></span><br><span class="line"><span class="comment"># pace_theme: pace-theme-center-simple</span></span><br><span class="line">pace_theme: pace-theme-flash</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h1 id="鼠标点击出现桃心效果"><a href="#鼠标点击出现桃心效果" class="headerlink" title="鼠标点击出现桃心效果"></a>鼠标点击出现桃心效果</h1><p>在/themes/next/source/js/src下新建文件click.js，接着把以下粘贴到click.js文件中。<br>代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params">e,t,a</span>)</span>&#123;<span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params"></span>)</span>&#123;c(<span class="string">".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"</span>),o(),r()&#125;<span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params"></span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> e=<span class="number">0</span>;e&lt;d.length;e++)d[e].alpha&lt;=<span class="number">0</span>?(t.body.removeChild(d[e].el),d.splice(e,<span class="number">1</span>)):(d[e].y--,d[e].scale+=<span class="number">.004</span>,d[e].alpha-=<span class="number">.013</span>,d[e].el.style.cssText=<span class="string">"left:"</span>+d[e].x+<span class="string">"px;top:"</span>+d[e].y+<span class="string">"px;opacity:"</span>+d[e].alpha+<span class="string">";transform:scale("</span>+d[e].scale+<span class="string">","</span>+d[e].scale+<span class="string">") rotate(45deg);background:"</span>+d[e].color+<span class="string">";z-index:99999"</span>);requestAnimationFrame(r)&#125;<span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> t=<span class="string">"function"</span>==<span class="keyword">typeof</span> e.onclick&amp;&amp;e.onclick;e.onclick=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;t&amp;&amp;t(),i(e)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"div"</span>);a.className=<span class="string">"heart"</span>,d.push(&#123;<span class="attr">el</span>:a,<span class="attr">x</span>:e.clientX<span class="number">-5</span>,<span class="attr">y</span>:e.clientY<span class="number">-5</span>,<span class="attr">scale</span>:<span class="number">1</span>,<span class="attr">alpha</span>:<span class="number">1</span>,<span class="attr">color</span>:s()&#125;),t.body.appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"style"</span>);a.type=<span class="string">"text/css"</span>;<span class="keyword">try</span>&#123;a.appendChild(t.createTextNode(e))&#125;<span class="keyword">catch</span>(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>].appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span><span class="string">"rgb("</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">")"</span>&#125;<span class="keyword">var</span> d=[];e.requestAnimationFrame=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;setTimeout(e,<span class="number">1e3</span>/<span class="number">60</span>)&#125;&#125;(),n()&#125;(<span class="built_in">window</span>,<span class="built_in">document</span>);</span><br></pre></td></tr></table></figure>

<p>在\themes\next\layout_layout.swig文件末尾添加：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- 页面点击小红心 --&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"/js/src/clicklove.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="鼠标点击出现爆炸烟花"><a href="#鼠标点击出现爆炸烟花" class="headerlink" title="鼠标点击出现爆炸烟花"></a>鼠标点击出现爆炸烟花</h1><p>在/themes/next/source/js下新建文件firework.js，接着把以下粘贴到firework.js文件中。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;<span class="function"><span class="keyword">function</span> <span class="title">updateCoords</span>(<span class="params">e</span>)</span>&#123;pointerX=(e.clientX||e.touches[<span class="number">0</span>].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[<span class="number">0</span>].clientY-canvasEl.getBoundingClientRect().top&#125;<span class="function"><span class="keyword">function</span> <span class="title">setParticuleDirection</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> t=anime.random(<span class="number">0</span>,<span class="number">360</span>)*<span class="built_in">Math</span>.PI/<span class="number">180</span>,a=anime.random(<span class="number">50</span>,<span class="number">180</span>),n=[<span class="number">-1</span>,<span class="number">1</span>][anime.random(<span class="number">0</span>,<span class="number">1</span>)]*a;<span class="keyword">return</span>&#123;<span class="attr">x</span>:e.x+n*<span class="built_in">Math</span>.cos(t),<span class="attr">y</span>:e.y+n*<span class="built_in">Math</span>.sin(t)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">createParticule</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=colors[anime.random(<span class="number">0</span>,colors.length<span class="number">-1</span>)],a.radius=anime.random(<span class="number">16</span>,<span class="number">32</span>),a.endPos=setParticuleDirection(a),a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">createCircle</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=<span class="string">"#F00"</span>,a.radius=<span class="number">0.1</span>,a.alpha=<span class="number">0.5</span>,a.lineWidth=<span class="number">6</span>,a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=<span class="number">1</span>&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">renderParticule</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> t=<span class="number">0</span>;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">animateParticules</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> a=createCircle(e,t),n=[],i=<span class="number">0</span>;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;<span class="attr">targets</span>:n,<span class="attr">x</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.x&#125;,<span class="attr">y</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.y&#125;,<span class="attr">radius</span>:<span class="number">0.1</span>,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">"easeOutExpo"</span>,<span class="attr">update</span>:renderParticule&#125;).add(&#123;<span class="attr">targets</span>:a,<span class="attr">radius</span>:anime.random(<span class="number">80</span>,<span class="number">160</span>),<span class="attr">lineWidth</span>:<span class="number">0</span>,<span class="attr">alpha</span>:&#123;<span class="attr">value</span>:<span class="number">0</span>,<span class="attr">easing</span>:<span class="string">"linear"</span>,<span class="attr">duration</span>:anime.random(<span class="number">600</span>,<span class="number">800</span>)&#125;,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">"easeOutExpo"</span>,<span class="attr">update</span>:renderParticule,<span class="attr">offset</span>:<span class="number">0</span>&#125;)&#125;<span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a;<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> n=<span class="keyword">this</span>,i=<span class="built_in">arguments</span>;clearTimeout(a),a=setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;e.apply(n,i)&#125;,t)&#125;&#125;<span class="keyword">var</span> canvasEl=<span class="built_in">document</span>.querySelector(<span class="string">".fireworks"</span>);<span class="keyword">if</span>(canvasEl)&#123;<span class="keyword">var</span> ctx=canvasEl.getContext(<span class="string">"2d"</span>),numberOfParticules=<span class="number">30</span>,pointerX=<span class="number">0</span>,pointerY=<span class="number">0</span>,tap=<span class="string">"mousedown"</span>,colors=[<span class="string">"#FF1461"</span>,<span class="string">"#18FF92"</span>,<span class="string">"#5A87FF"</span>,<span class="string">"#FBF38C"</span>],setCanvasSize=debounce(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;canvasEl.width=<span class="number">2</span>*<span class="built_in">window</span>.innerWidth,canvasEl.height=<span class="number">2</span>*<span class="built_in">window</span>.innerHeight,canvasEl.style.width=<span class="built_in">window</span>.innerWidth+<span class="string">"px"</span>,canvasEl.style.height=<span class="built_in">window</span>.innerHeight+<span class="string">"px"</span>,canvasEl.getContext(<span class="string">"2d"</span>).scale(<span class="number">2</span>,<span class="number">2</span>)&#125;,<span class="number">500</span>),render=anime(&#123;<span class="attr">duration</span>:<span class="number">1</span>/<span class="number">0</span>,<span class="attr">update</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.clearRect(<span class="number">0</span>,<span class="number">0</span>,canvasEl.width,canvasEl.height)&#125;&#125;);<span class="built_in">document</span>.addEventListener(tap,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="string">"sidebar"</span>!==e.target.id&amp;&amp;<span class="string">"toggle-sidebar"</span>!==e.target.id&amp;&amp;<span class="string">"A"</span>!==e.target.nodeName&amp;&amp;<span class="string">"IMG"</span>!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!<span class="number">1</span>),setCanvasSize(),<span class="built_in">window</span>.addEventListener(<span class="string">"resize"</span>,setCanvasSize,!<span class="number">1</span>)&#125;<span class="string">"use strict"</span>;<span class="function"><span class="keyword">function</span> <span class="title">updateCoords</span>(<span class="params">e</span>)</span>&#123;pointerX=(e.clientX||e.touches[<span class="number">0</span>].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[<span class="number">0</span>].clientY-canvasEl.getBoundingClientRect().top&#125;<span class="function"><span class="keyword">function</span> <span class="title">setParticuleDirection</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> t=anime.random(<span class="number">0</span>,<span class="number">360</span>)*<span class="built_in">Math</span>.PI/<span class="number">180</span>,a=anime.random(<span class="number">50</span>,<span class="number">180</span>),n=[<span class="number">-1</span>,<span class="number">1</span>][anime.random(<span class="number">0</span>,<span class="number">1</span>)]*a;<span class="keyword">return</span>&#123;<span class="attr">x</span>:e.x+n*<span class="built_in">Math</span>.cos(t),<span class="attr">y</span>:e.y+n*<span class="built_in">Math</span>.sin(t)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">createParticule</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=colors[anime.random(<span class="number">0</span>,colors.length<span class="number">-1</span>)],a.radius=anime.random(<span class="number">16</span>,<span class="number">32</span>),a.endPos=setParticuleDirection(a),a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">createCircle</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=<span class="string">"#F00"</span>,a.radius=<span class="number">0.1</span>,a.alpha=<span class="number">0.5</span>,a.lineWidth=<span class="number">6</span>,a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=<span class="number">1</span>&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">renderParticule</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> t=<span class="number">0</span>;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">animateParticules</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> a=createCircle(e,t),n=[],i=<span class="number">0</span>;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;<span class="attr">targets</span>:n,<span class="attr">x</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.x&#125;,<span class="attr">y</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.y&#125;,<span class="attr">radius</span>:<span class="number">0.1</span>,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">"easeOutExpo"</span>,<span class="attr">update</span>:renderParticule&#125;).add(&#123;<span class="attr">targets</span>:a,<span class="attr">radius</span>:anime.random(<span class="number">80</span>,<span class="number">160</span>),<span class="attr">lineWidth</span>:<span class="number">0</span>,<span class="attr">alpha</span>:&#123;<span class="attr">value</span>:<span class="number">0</span>,<span class="attr">easing</span>:<span class="string">"linear"</span>,<span class="attr">duration</span>:anime.random(<span class="number">600</span>,<span class="number">800</span>)&#125;,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">"easeOutExpo"</span>,<span class="attr">update</span>:renderParticule,<span class="attr">offset</span>:<span class="number">0</span>&#125;)&#125;<span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a;<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> n=<span class="keyword">this</span>,i=<span class="built_in">arguments</span>;clearTimeout(a),a=setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;e.apply(n,i)&#125;,t)&#125;&#125;<span class="keyword">var</span> canvasEl=<span class="built_in">document</span>.querySelector(<span class="string">".fireworks"</span>);<span class="keyword">if</span>(canvasEl)&#123;<span class="keyword">var</span> ctx=canvasEl.getContext(<span class="string">"2d"</span>),numberOfParticules=<span class="number">30</span>,pointerX=<span class="number">0</span>,pointerY=<span class="number">0</span>,tap=<span class="string">"mousedown"</span>,colors=[<span class="string">"#FF1461"</span>,<span class="string">"#18FF92"</span>,<span class="string">"#5A87FF"</span>,<span class="string">"#FBF38C"</span>],setCanvasSize=debounce(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;canvasEl.width=<span class="number">2</span>*<span class="built_in">window</span>.innerWidth,canvasEl.height=<span class="number">2</span>*<span class="built_in">window</span>.innerHeight,canvasEl.style.width=<span class="built_in">window</span>.innerWidth+<span class="string">"px"</span>,canvasEl.style.height=<span class="built_in">window</span>.innerHeight+<span class="string">"px"</span>,canvasEl.getContext(<span class="string">"2d"</span>).scale(<span class="number">2</span>,<span class="number">2</span>)&#125;,<span class="number">500</span>),render=anime(&#123;<span class="attr">duration</span>:<span class="number">1</span>/<span class="number">0</span>,<span class="attr">update</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.clearRect(<span class="number">0</span>,<span class="number">0</span>,canvasEl.width,canvasEl.height)&#125;&#125;);<span class="built_in">document</span>.addEventListener(tap,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="string">"sidebar"</span>!==e.target.id&amp;&amp;<span class="string">"toggle-sidebar"</span>!==e.target.id&amp;&amp;<span class="string">"A"</span>!==e.target.nodeName&amp;&amp;<span class="string">"IMG"</span>!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!<span class="number">1</span>),setCanvasSize(),<span class="built_in">window</span>.addEventListener(<span class="string">"resize"</span>,setCanvasSize,!<span class="number">1</span>)&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="修改访问URL路径"><a href="#修改访问URL路径" class="headerlink" title="修改访问URL路径"></a>修改访问URL路径</h1><p>默认情况下访问URL路径为：glooo/2018/10/18/关于本站,修改为 glooo/About/关于本站。 编辑 Hexo 站点下的 _config.yml 文件，修改其中的 permalink字段：<br><code>permalink: :category/:title/</code></p>
<h1 id="博文置顶"><a href="#博文置顶" class="headerlink" title="博文置顶"></a>博文置顶</h1><p>安装插件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm uninstall hexo-generator-index --save</span><br><span class="line">$ npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure>

<p>然后在需要置顶的文章的Front-matter中加上top即可：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 2018</span><br><span class="line">date: 2018-10-25 16:10:03</span><br><span class="line">top: 10</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>设置置顶标志<br>打开：/themes/*/layout/_macro/post.swig，定位到</p>
<p>，插入以下代码即可：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% if post.top %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-thumb-tack"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">7D26CD</span>&gt;</span>置顶<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-divider"</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<h1 id="在右上角或者左上角实现fork-me-on-github"><a href="#在右上角或者左上角实现fork-me-on-github" class="headerlink" title="在右上角或者左上角实现fork me on github"></a>在右上角或者左上角实现fork me on github</h1><p>选择样式GitHub Ribbons,<br>修改图片跳转链接,将<code>&lt;a href=&quot;https://github.com/you&quot;&gt;</code>中的链接换为自己Github链接：<br>打开 themes/next/layout/_layout.swig 文件，把代码复制到<code>&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;</code>下面。</p>
<h1 id="显示当前浏览进度"><a href="#显示当前浏览进度" class="headerlink" title="显示当前浏览进度"></a>显示当前浏览进度</h1><p>修改themes/next/_config.yml，把 false 改为 true：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Back to top in sidebar</span><br><span class="line">b2t: true</span><br><span class="line"></span><br><span class="line"># Scroll percent label in b2t button</span><br><span class="line">scrollpercent: true</span><br></pre></td></tr></table></figure>

<h1 id="人体时钟"><a href="#人体时钟" class="headerlink" title="人体时钟"></a>人体时钟</h1><p>创建 js 文件 hone_hone_clock.js<br>在next\source\js\src文件夹下创建hone_hone_clock.js，添加代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*hone-hone-clock*/</span></span><br><span class="line">!<span class="function"><span class="keyword">function</span> (<span class="params">e, t, a</span>) </span>&#123; </span><br><span class="line">  <span class="comment">/* code */</span></span><br><span class="line">  <span class="keyword">var</span> initClock = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sHtml = <span class="string">''</span>;</span><br><span class="line">    sHtml += <span class="string">'&lt;div style="position: fixed;right: 10px;top: 20px;width: 160px;height: 70px;"&gt;'</span>;</span><br><span class="line">    sHtml += <span class="string">'  &lt;object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" codebase="http://fpdownload.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=8,0,0,0" width="160" height="70" id="honehoneclock" align="middle"&gt;'</span>;</span><br><span class="line">    sHtml += <span class="string">'    &lt;param name="allowScriptAccess" value="always"&gt;'</span>;</span><br><span class="line">    sHtml += <span class="string">'    &lt;param name="movie" value="http://chabudai.sakura.ne.jp/blogparts/honehoneclock/honehone_clock_tr.swf"&gt;'</span>;</span><br><span class="line">    sHtml += <span class="string">'    &lt;param name="quality" value="high"&gt;'</span>;</span><br><span class="line">    sHtml += <span class="string">'    &lt;param name="bgcolor" value="#ffffff"&gt;'</span>;</span><br><span class="line">    sHtml += <span class="string">'    &lt;param name="wmode" value="transparent"&gt;'</span>;</span><br><span class="line">    sHtml += <span class="string">'    &lt;embed wmode="transparent" src="http://chabudai.sakura.ne.jp/blogparts/honehoneclock/honehone_clock_tr.swf" quality="high" bgcolor="#ffffff" width="160" height="70" name="honehoneclock" align="middle" allowscriptaccess="always" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer"&gt;'</span>;</span><br><span class="line">    sHtml += <span class="string">'    &lt;/object&gt;'</span>;</span><br><span class="line">    sHtml += <span class="string">'&lt;/div&gt;'</span>;</span><br><span class="line">    </span><br><span class="line">    t = t || <span class="built_in">document</span>;    </span><br><span class="line">    t.write(sHtml);</span><br><span class="line">  &#125;</span><br><span class="line">  initClock();</span><br><span class="line">&#125;(<span class="built_in">window</span>, <span class="built_in">document</span>);</span><br></pre></td></tr></table></figure>

<p>引用<br>在next\layout_layout.swig文件中，添加引用（注：在 swig 末尾添加）：</p>
<p><code>&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/hone_hone_clock.js&quot;&gt;&lt;/script&gt;</code></p>
<h1 id="自定义鼠标样式"><a href="#自定义鼠标样式" class="headerlink" title="自定义鼠标样式"></a>自定义鼠标样式</h1><p>打开 themes/*/source/css/_custom/custom.styl ,在里面写下如下代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 鼠标样式</span></span><br><span class="line">  * &#123;</span><br><span class="line">      cursor: url(<span class="string">"http://om8u46rmb.bkt.clouddn.com/sword2.ico"</span>),auto!important</span><br><span class="line">  &#125;</span><br><span class="line">  :active &#123;</span><br><span class="line">      cursor: url(<span class="string">"http://om8u46rmb.bkt.clouddn.com/sword1.ico"</span>),auto!important</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h1 id="文章加密访问"><a href="#文章加密访问" class="headerlink" title="文章加密访问"></a>文章加密访问</h1><p>打开 themes/*/layout/_partials/head.swig文件,在 之前插入代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">'&#123;&#123; page.password &#125;&#125;'</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (prompt(<span class="string">'请输入密码'</span>) !== <span class="string">'&#123;&#123; page.password &#125;&#125;'</span>)&#123;</span><br><span class="line">                alert(<span class="string">'密码错误'</span>);</span><br><span class="line">                history.back();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>写文章时加上<code>password: *：</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">  title: 2018</span><br><span class="line">  date: 2018-10-25 16:10:03</span><br><span class="line">  password: 123456</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>部分引用自(遇见西门)[<a href="https://www.simon96.online/2018/10/12/hexo-tutorial/]大佬的blog" target="_blank" rel="noopener">https://www.simon96.online/2018/10/12/hexo-tutorial/]大佬的blog</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>算法-约瑟夫环问题</title>
    <url>/%E7%AE%97%E6%B3%95/joseph/</url>
    <content><![CDATA[<h1 id="提出问题"><a href="#提出问题" class="headerlink" title="提出问题"></a>提出问题</h1><p>  39 个犹太人与Josephus及他的朋友躲到一个洞中，39个犹太人决定宁愿死也不要被敌人抓。于是决定了自杀方式，41个人排成一个圆圈，由第1个人开始报数，每报数到第3人该人就必须自杀。然后下一个重新报数，直到所有人都自杀身亡为止。然而Josephus 和他的朋友并不想遵从，Josephus要他的朋友先假装遵从，他将朋友与自己安排在第16个与第31个位置，于是逃过了这场死亡游戏。<br>  <a id="more"></a></p>
<h1 id="循环链表法"><a href="#循环链表法" class="headerlink" title="循环链表法"></a>循环链表法</h1><p>  …</p>
<h1 id="数组法"><a href="#数组法" class="headerlink" title="数组法"></a>数组法</h1><p>给出参与游戏的总人数n和杀死第k个人<br>  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">joseph</span>(<span class="params">n,k</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 初始化</span></span><br><span class="line">  <span class="keyword">let</span> people[n];</span><br><span class="line">  <span class="keyword">let</span> num = <span class="number">0</span>;<span class="comment">//计数</span></span><br><span class="line">  <span class="keyword">let</span> deadNum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    people[n] = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 开始</span></span><br><span class="line">  <span class="keyword">while</span>(n - deadNum &gt; <span class="number">1</span>) &#123;<span class="comment">//最后剩一个人就&gt;1,剩两个人就&gt;2</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">1</span> ; j &lt;= n ; j++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(people[j] === <span class="number">1</span>)&#123;</span><br><span class="line">        num ++;</span><br><span class="line">        <span class="keyword">if</span>(num === k) &#123;<span class="comment">//判断该人是否为要杀的第k个人</span></span><br><span class="line">          people[j] = <span class="number">0</span>;<span class="comment">//置0代表该位置的人被杀死</span></span><br><span class="line">          deadNum ++;</span><br><span class="line">          num = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(deadNum === n - <span class="number">1</span>)</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> q = <span class="number">1</span>;q &lt;= n; q++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(people[q] === <span class="number">1</span>)&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`第<span class="subst">$&#123;q&#125;</span>个位置上的人还活着`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="动态规划法"><a href="#动态规划法" class="headerlink" title="动态规划法"></a>动态规划法</h1>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>eslint-config</title>
    <url>/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/eslint-config/</url>
    <content><![CDATA[<p>以下为个人自己的eslint配置，放在这里供自己参考记录<del>~</del></p>
<h1 id="文件位置"><a href="#文件位置" class="headerlink" title="文件位置"></a>文件位置</h1>


<h1 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h1><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"javascript.updateImportsOnFileMove.enabled"</span>: <span class="string">"always"</span>,</span><br><span class="line">  <span class="comment">//配置eslint</span></span><br><span class="line">  <span class="attr">"files.autoSave"</span>: <span class="string">"afterDelay"</span>,</span><br><span class="line">  <span class="attr">"eslint.options"</span>: &#123;</span><br><span class="line">    <span class="attr">"plugins"</span>: [<span class="string">"html"</span>],</span><br><span class="line">    <span class="attr">"extensions"</span>: [<span class="string">".js"</span>, <span class="string">".vue"</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"eslint.alwaysShowStatus"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// vscode默认启用了根据文件类型自动设置tabsize的选项</span></span><br><span class="line">  <span class="attr">"editor.detectIndentation"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// 重新设定tabsize</span></span><br><span class="line">  <span class="attr">"editor.tabSize"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="comment">// #每次保存的时候自动格式化</span></span><br><span class="line">  <span class="attr">"editor.formatOnSave"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// #每次保存的时候将代码按eslint格式进行修复</span></span><br><span class="line">  <span class="attr">"eslint.autoFixOnSave"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 添加 vue 支持</span></span><br><span class="line">  <span class="attr">"eslint.validate"</span>: [</span><br><span class="line">    <span class="string">"javascript"</span>,</span><br><span class="line">    <span class="string">"html"</span>,</span><br><span class="line">    <span class="string">"javascriptreact"</span>,</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"language"</span>: <span class="string">"vue"</span>,</span><br><span class="line">      <span class="attr">"autoFix"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">//  #让prettier使用eslint的代码格式进行校验</span></span><br><span class="line">  <span class="comment">// "prettier.eslintIntegration": true,</span></span><br><span class="line">  <span class="comment">// //  #去掉代码结尾的分号</span></span><br><span class="line">  <span class="comment">// "prettier.semi": false,</span></span><br><span class="line">  <span class="comment">// //  #使用带引号替代双引号</span></span><br><span class="line">  <span class="comment">// "prettier.singleQuote": true,</span></span><br><span class="line">  <span class="comment">// //  #让函数(名)和后面的括号之间加个空格</span></span><br><span class="line">  <span class="comment">// "javascript.format.insertSpaceBeforeFunctionParenthesis": true,</span></span><br><span class="line">  <span class="comment">// // #这个按用户自身习惯选择</span></span><br><span class="line">  <span class="comment">// "vetur.format.defaultFormatter.html": "js-beautify-html",</span></span><br><span class="line">  <span class="comment">// // #让vue中的js按编辑器自带的ts格式进行格式化</span></span><br><span class="line">  <span class="comment">// "vetur.format.defaultFormatter.js": "vscode-typescript",</span></span><br><span class="line">  <span class="comment">// "vetur.format.defaultFormatterOptions": &#123;</span></span><br><span class="line">  <span class="comment">//   "js-beautify-html": &#123;</span></span><br><span class="line">  <span class="comment">//     "wrap_attributes": "force-aligned"</span></span><br><span class="line">  <span class="comment">//     // #vue组件中html代码格式化样式</span></span><br><span class="line">  <span class="comment">//   &#125;</span></span><br><span class="line">  <span class="comment">// &#125;,</span></span><br><span class="line">  <span class="comment">// // 格式化stylus, 需安装Manta's Stylus Supremacy插件</span></span><br><span class="line">  <span class="comment">// "stylusSupremacy.insertColons": false, // 是否插入冒号</span></span><br><span class="line">  <span class="comment">// "stylusSupremacy.insertSemicolons": false, // 是否插入分好</span></span><br><span class="line">  <span class="comment">// "stylusSupremacy.insertBraces": false, // 是否插入大括号</span></span><br><span class="line">  <span class="comment">// "stylusSupremacy.insertNewLineAroundImports": false, // import之后是否换行</span></span><br><span class="line">  <span class="comment">// "stylusSupremacy.insertNewLineAroundBlocks": false,</span></span><br><span class="line">  <span class="attr">"workbench.sideBar.location"</span>: <span class="string">"left"</span>,</span><br><span class="line">  <span class="attr">"files.autoGuessEncoding"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"window.zoomLevel"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"editor.minimap.enabled"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">//"gitlens.historyExplorer.enabled": true,</span></span><br><span class="line">  <span class="comment">// Enable/disable JavaScript validation.</span></span><br><span class="line">  <span class="attr">"javascript.validate.enable"</span>: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">"[javascript]"</span>: &#123;</span><br><span class="line">    <span class="attr">"editor.defaultFormatter"</span>: <span class="string">"vscode.typescript-language-features"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"files.associations"</span>: &#123;</span><br><span class="line">    <span class="attr">"*.vue"</span>: <span class="string">"vue"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h1><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"editor.tabSize"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"gitlens.advanced.messages"</span>: &#123;</span><br><span class="line">        <span class="attr">"suppressShowKeyBindingsNotice"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//"gitlens.historyExplorer.enabled": true,</span></span><br><span class="line">    <span class="comment">// Enable/disable JavaScript validation.</span></span><br><span class="line">    <span class="attr">"javascript.validate.enable"</span>: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">"[javascript]"</span>: &#123;</span><br><span class="line">    <span class="attr">"editor.defaultFormatter"</span>: <span class="string">"vscode.typescript-language-features"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"files.associations"</span>: &#123;</span><br><span class="line">    <span class="attr">"*.vue"</span>: <span class="string">"vue"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"eslint.autoFixOnSave"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"eslint.options"</span>: &#123;</span><br><span class="line">    <span class="attr">"extensions"</span>: [<span class="string">".js"</span>, <span class="string">".vue"</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"eslint.validate"</span>: [</span><br><span class="line">    <span class="string">"javascript"</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"language"</span>: <span class="string">"vue"</span>,</span><br><span class="line">        <span class="attr">"autoFix"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"html"</span>,</span><br><span class="line">    <span class="string">"vue"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"window.zoomLevel"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"editor.minimap.enabled"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"files.autoSave"</span>: <span class="string">"afterDelay"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端技术</category>
      </categories>
      <tags>
        <tag>前端技术</tag>
      </tags>
  </entry>
  <entry>
    <title>算法-鉴别毒药</title>
    <url>/%E7%AE%97%E6%B3%95/jianbieduyao/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><strong>面试题：有1000个一模一样的瓶子，其中有999瓶是普通的水，有1瓶是毒药。任何喝下毒药的生物都会在一星期之后死亡(1滴足以致死)。现在，你只有10只小白鼠和一星期的时间，如何检验出哪个瓶子里有毒药？(1000瓶水，1瓶毒药，1星期死亡，10只老鼠)</strong></p>
<h1 id="初想"><a href="#初想" class="headerlink" title="初想"></a>初想</h1><p>所有实验并发执行，一周之后必须要拿到结果，一周内无法得知任何结果，也就无法从一个结果得到结论以后再进行下一个实验<br>小学生都能答上来的问题<br>先考虑到了并发，那只能比999次嘛，前999只哪只死了当然就知道哪瓶是毒药了，都没死就最后一瓶。。。。。。</p>
<a id="more"></a>
<p>================================================================<br>必然不能这么简单！</p>
<h1 id="再想"><a href="#再想" class="headerlink" title="再想"></a>再想</h1><p>一半一半，跟数字猜大小似的，1000以内猜一个数字，猜大小，貌似501只小白鼠就能考虑到所有情况，第一只喝1-500瓶的混合水，第二只喝2-501瓶的混合水……第501只喝501-1000瓶的混合水（太残忍了），做好标记，一周后也必能得出结论，，，</p>
<p>================================================================</p>
<h1 id="三思"><a href="#三思" class="headerlink" title="三思"></a>三思</h1><p>必然还有更简单的法子啊，501只小白鼠也太残忍，，，，，，整计算机的就要用计算机的思维解决问题奥，<strong>二进制</strong>。<br>决策树，1000瓶水用10只小白鼠（2^10=1024&gt;1000）就能找出哪瓶是毒药了。</p>
<p>方法（1）</p>
<p>1,把1000瓶标号：1,2,3,4,5,6…1000.</p>
<p>2,所有老鼠排列在一起组成一个2进制队列: 0000000000</p>
<p>0代表不喝，1代表喝</p>
<p>3,0000000001代表第一瓶水被喝情况</p>
<p>0000000010代表第二瓶水被喝情况</p>
<p>0000000011代表第三瓶水被喝情况</p>
<p>0000000100代表第四瓶水被喝情况</p>
<p>…</p>
<p>1111101000代表第1000瓶水被喝情况</p>
<p>4,第7天，喝了毒药的老鼠都死了，那个二进制队列转为为十进制就是毒药的标号。</p>
<p>比如第3只老鼠死亡，其他老鼠没死，队列为0000000100，第四瓶水有毒。</p>
<p>第1，5，6，8老鼠死亡，其他没死，队列为0010110001，第177瓶水有毒。</p>
<p>方法（2）</p>
<p>很容易分析的是，如果只有一只小白鼠，可以分开两瓶水，如下图所示：</p>
<p>将老鼠作为判断工具，放在中间，尝随便一瓶，就可以知道哪瓶有毒。</p>
<p>然后两只老鼠是如何判断四瓶水的呢？</p>
<p>将第一瓶和第二瓶作为一组，给一个老鼠去尝，如果老鼠死掉了，那么就可以判定毒药在</p>
<p>I 或者 II 组，然后让第二只老鼠去尝，就可以知道哪瓶是毒药了。（如果幸运的话是不会死老鼠的，死两只小鼠来判断是最坏的情况）。同理，三只小鼠判断8瓶水中的1瓶毒药是这样的：</p>
<p>也就是三只小鼠可以判断2^3瓶水。</p>
<p>应该很容易明白了吧，如果需要判断1000瓶水，最坏的情况是使用N只小鼠判断。</p>
<p>则有2^(N-1)&lt;=1000&lt;=2^(N);N=10.</p>
<p>这小学生要学的也太难了8。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo插入图片问题</title>
    <url>/hexo/hexo-pic/</url>
    <content><![CDATA[<h2 id="问题开始"><a href="#问题开始" class="headerlink" title="问题开始"></a>问题开始</h2><p>网上找了半天hexo搭建博客插入图片的案例，类似于<code>![图片alt](图片路径)</code>这样的都不太好使，原因也是众说纷纭，<br>有的说是hexo版本问题，得上升至3.0以上，<br>有的说是路径问题（那肯定是路径问题，就是不知道哪儿错了），<br>有的在source文件夹下建一个img文件夹，然后在下面放图片，但是localhost:4000/images/1.png确实能访问到你在yourHexoBlog/source/img/1.png这张图片（hexo g命令执行编译后在yourHexoBlog/public文件夹下确实有img/1.png），但是hexo generate编译后页面上显示生成的路径却<strong>有时候</strong>不对（感觉这样用还是不太稳定），localhost:4000上控制台一看显示是<code>&lt;img src=&quot;/.fun//1.png&quot; alt=&quot;&quot;&gt;</code>（我的blog后缀为.fun），hexo g编译时候也是就很神奇。</p>
<a id="more"></a>
<h2 id="继续查…"><a href="#继续查…" class="headerlink" title="继续查…"></a>继续查…</h2><p><a href="https://hexo.io/zh-cn/docs/asset-folders" target="_blank" rel="noopener">hexo中文官方文档-资源文件夹</a><br>在这里，我终于能成功地在首页和blog详情页都显示我的图片</p>





<!-- ========================================== -->
<!--  -->
<!--  -->
<!-- ![图片加载失败](http://glooo.fun/img/1.png) -->


<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% asset_img images/example.jpg width height image description %&#125;</span><br></pre></td></tr></table></figure>

<p>介绍一下<strong>参数</strong>吧</p>
<ul>
<li>第一个参数<code>asset_img</code> 代表这是一张图片 不用改动</li>
<li>第二个参数写.md同名文件夹下的images文件夹里的图片（放images文件夹外边就不好使了），下面有.md同名文件夹配置介绍，有需要的小伙伴们可以看下</li>
<li>第三，四个参数（可选）设置图片大小，纯数字，width和height，单位px（但可能受border或者padding影响小于设置的数字大小），（实际情况它是等比例缩小的，受width影响而不受height影响）</li>
<li>第五个参数（可选）写图片描述，他会显示在你的图片下方正中央<br>注：（各个参数间用空格隔开）</li>
</ul>
<p>注：这个<code></code>可以放在文字中也可以另起一行放置</p>
<h2 id="md同名文件夹配置"><a href="#md同名文件夹配置" class="headerlink" title=".md同名文件夹配置"></a>.md同名文件夹配置</h2><p>插入图片之前需要配置一下.md同名文件夹</p>
<ol>
<li>首先把yourHexoBlog目录下的站点配置文件_config.yml里的<code>post_asset_folder:</code>设置为<code>true</code></li>
<li>在yourHexoBlog目录下执行:<code>npm install hexo-asset-image --save</code></li>
<li>在yourHexoBlog目录下运行hexo new “博文名(最好是英文名)”来生成.md文件的博客时，会在_post目录下看到一个与博客同名的文件夹。(在这个文件夹里创建images文件夹，把博客里要用到的图片都放在创建的images文件夹中)</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="网络远程图片"><a href="#网络远程图片" class="headerlink" title="网络远程图片"></a>网络远程图片</h3><p>可以用 语法<code>![图片加载失败](http://glooo.fun/img/1.png)</code><br>例如：<br><a href="http://glooo.fun/img/1.png">下图地址</a><br><img src="http://glooo.fun/img/1.png" alt="图片加载失败"><br>注：[]中写图片加载失败时代替的文字（相当于img标签中的alt）<br>但是，该语法用在本地图片容易出现路径问题（偶尔也好使，不稳定）。</p>
<h3 id="本地图片"><a href="#本地图片" class="headerlink" title="本地图片"></a>本地图片</h3><p><strong><font color="red">如果不实用第三方图床的话墙裂推荐!!!</font></strong><br>可以用下面的语法放图片</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 注意参数</span><br><span class="line">  &#123;%asset_img &lt;images/example.jpg&gt; &lt;width&gt; &lt;height&gt; &lt;image-description&gt;%&#125;</span><br></pre></td></tr></table></figure>

<p>例如我在<code>&lt;.md同名文件夹&gt;/images/pic.png</code>文件夹下存着一张pic.png，设置它的width为600px（默认为width占满），height根据width和原图等比例缩放，并添加图片描述<code>这是一个宽600px的图片</code>，用上述语法引用它的方式是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;%asset_img images/pic.png 600 600 &apos;这是一个图片&apos;%&#125;</span><br></pre></td></tr></table></figure>


<p>width确定后，有时height可以去掉（按width等比例缩放）。width、height、description都可省略。</p>
<h3 id="放图片之前，先配置post-asset-folder，步骤在"><a href="#放图片之前，先配置post-asset-folder，步骤在" class="headerlink" title="放图片之前，先配置post_asset_folder，步骤在"></a>放图片之前，先配置<code>post_asset_folder</code>，步骤在</h3><p><a href="/hexo/hexo-pic/#md同名文件夹配置">.md同名文件夹配置</a></p>
<p><strong>大家如果有更好的方法或者别的什么问题建议都可以在下边登录自己的github账号进行评论哦～～</strong></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>git pull &amp; git fetch的区别</title>
    <url>/Git/gitPull-gitFetch/</url>
    <content><![CDATA[<h1 id="相同点：都是更新代码"><a href="#相同点：都是更新代码" class="headerlink" title="相同点：都是更新代码"></a>相同点：都是更新代码</h1><h1 id="不同点："><a href="#不同点：" class="headerlink" title="不同点："></a>不同点：</h1><ol>
<li>git fetch 相当于是从远程获取最新到本地，不会自动merge<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">　git fetch orgin master //将远程仓库的master分支下载到本地当前branch中</span><br><span class="line"></span><br><span class="line">　git <span class="built_in">log</span> -p master  ..origin/master //比较本地的master分支和origin/master分支的差别</span><br><span class="line"></span><br><span class="line">　git merge origin/master //进行合并</span><br></pre></td></tr></table></figure>

</li>
</ol>
<a id="more"></a>
<p>  也可以用以下指令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git fetch origin master:tmp //从远程仓库master分支获取最新，在本地建立tmp分支</span><br><span class="line"></span><br><span class="line">git diff tmp //將當前分支和tmp進行對比</span><br><span class="line"></span><br><span class="line">git merge tmp //合并tmp分支到当前分支</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>git pull：相当于是从远程获取最新版本并merge到本地<br><code>git pull origin master</code></li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>git pull看起来像git fetch+get merge，但是根据commit ID来看的话，他们实际的实现原理是不一样的。<br><strong>不要用git pull，用git fetch和git merge代替它。</strong><br>git pull的问题是它把过程的细节都隐藏了起来，以至于你不用去了解git中各种类型分支的区别和使用方法。当然，多数时候这是没问题的，但一旦代码有问题，你很难找到出错的地方。看起来git pull的用法会使你吃惊，简单看一下git的使用文档应该就能说服你。<br>将下载（fetch）和合并（merge）放到一个命令里的另外一个弊端是，你的本地工作目录在未经确认的情况下就会被远程分支更新。当然，除非你关闭所有的安全选项，否则git pull在你本地工作目录还不至于造成不可挽回的损失，但很多时候我们宁愿做的慢一些，也不愿意返工重来。</p>
<p>本文参考<a href="https://www.cnblogs.com/qiu-Ann/p/7902855.html" target="_blank" rel="noopener">菜鸟正在进化</a>大佬和<a href="https://blog.csdn.net/weixin_41975655/article/details/82887273" target="_blank" rel="noopener">马恩光</a>大佬的blog，灰常感谢大佬们～～～</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>ssh</title>
    <url>/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/ssh/</url>
    <content><![CDATA[<p>命令行输入ssh-keygen时，</p>



<p>不输入目录地址，则在默认地址默认生成一个ssh密钥<br>若之前就有，则会提示Overwrite？（覆盖）</p>
<a id="more"></a>
<p>如果生成一个后还想生成，<br>公司项目一般用一个，自己要是再写项目，需要另起一个ssh<br>则先命令行cd进入存放id_rsa和id_rsa.pub的目录，ssh-keygen 输入id_rsa 直接在该目录生成id_rsa和id_rsa.pub文件</p>
<!-- 
<p><img src="images/1.png" alt=""><br><img src="2019-08-06-ssh/1.png" alt=""><br><img src="/2019-08-06-ssh/1.png" alt=""><br><img src="/2019-08-06-ssh/images/1.png" alt=""><br><img src="/2019-08-06-ssh/img/1.png" alt=""><br><img src="/img/1.png" alt=""><br><img src="img/1.png" alt=""><br><img src="/img/1.png" alt=""><br><img src="img/1.png" alt=""> –&gt;</p>
-->]]></content>
      <categories>
        <category>前端技术</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Quill富文本编辑器</title>
    <url>/Quill/quill/</url>
    <content><![CDATA[<p>Quill是一个非常实用的一款富文本编辑器<br>标签：黑白风 美观 无表格<br>网络图片上传（可以通过复制网络图片并粘贴解决）<br>她最完美的地方在于她的代码高亮功能，她本身就支持了<code>higlight.js</code><br>支持行内编辑模式，可自定义<br>优点多，缺点也明显</p>
<a id="more"></a>
<p>本文转载自<a href="https://www.jianshu.com/p/b237372f15cc" target="_blank" rel="noopener">正在修炼的西瓜君</a>大佬的博文</p>
<h1 id="Quill的使用"><a href="#Quill的使用" class="headerlink" title="Quill的使用"></a>Quill的使用</h1><h2 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h2><p>开始构建一个quill编辑项目包括引入文件、创建自定义工具栏、创建编辑容器以及初始化这几部分。<br>直接上代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- 引入css文件 --&gt;</span><br><span class="line">&lt;link href=<span class="string">"https://cdn.quilljs.com/1.0.0/quill.snow.css"</span> rel=<span class="string">"stylesheet"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 自定义编辑器工具栏 --&gt;</span><br><span class="line">&lt;div id=<span class="string">"toolbar"</span>&gt;</span><br><span class="line">  &lt;button <span class="class"><span class="keyword">class</span></span>=<span class="string">"ql-bold"</span>&gt;Bold&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">  &lt;button class="ql-italic"&gt;Italic&lt;/</span>button&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;!-- 创建编辑容器 --&gt;</span></span><br><span class="line"><span class="regexp">&lt;div id="editor"&gt;</span></span><br><span class="line"><span class="regexp">  &lt;p&gt;Hello World!&lt;/</span>p&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;!-- 引入js文件 --&gt;</span></span><br><span class="line"><span class="regexp">&lt;script src="https:/</span><span class="regexp">/cdn.quilljs.com/</span><span class="number">1.0</span><span class="number">.0</span>/quill.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;!-- 初始化编辑器，snow主题 --&gt;</span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">  var editor = new Quill('#editor', &#123;</span></span><br><span class="line"><span class="string">    modules: &#123; toolbar: '#toolbar' &#125;,</span></span><br><span class="line"><span class="string">    theme: 'snow'</span></span><br><span class="line"><span class="string">  &#125;);</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Quill库文件"><a href="#Quill库文件" class="headerlink" title="Quill库文件"></a>Quill库文件</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- 主要的库文件，js --&gt;</span><br><span class="line">&lt;script src=<span class="string">"//cdn.quilljs.com/1.3.6/quill.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;script src="/</span><span class="regexp">/cdn.quilljs.com/</span><span class="number">1.3</span><span class="number">.6</span>/quill.min.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;!-- css文件，有两个主题，snow和bubble --&gt;</span></span><br><span class="line"><span class="string">&lt;link href="</span><span class="comment">//cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet"&gt;</span></span><br><span class="line">&lt;link href=<span class="string">"//cdn.quilljs.com/1.3.6/quill.bubble.css"</span> rel=<span class="string">"stylesheet"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 没有主题的核心构建, 不必要的模块（使用不需要引入） --&gt;</span><br><span class="line">&lt;link href=<span class="string">"//cdn.quilljs.com/1.3.6/quill.core.css"</span> rel=<span class="string">"stylesheet"</span>&gt;</span><br><span class="line">&lt;script src=<span class="string">"//cdn.quilljs.com/1.3.6/quill.core.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>以上就是quill的库文件了，但要实现代码高亮的话需要自己引入<code>highlight.js</code>库，只需要引入就可以了，不需要额外的配置，所以完整的引入，以我的项目为参考：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代码高亮采用dracula主题，可去highlight官网配置</span></span><br><span class="line">&lt;link href=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.15.6/styles/dracula.min.css"</span> rel=<span class="string">"stylesheet"</span>&gt;</span><br><span class="line"><span class="comment">// 采用snow主题</span></span><br><span class="line">&lt;link href=<span class="string">"https://cdn.quilljs.com/1.3.6/quill.snow.css"</span> rel=<span class="string">"stylesheet"</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// highlight.js的主要js文件</span></span><br><span class="line">&lt;script src=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.15.6/highlight.min.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ quill的主要js文件</span></span><br><span class="line"><span class="regexp">&lt;script src="https:/</span><span class="regexp">/cdn.quilljs.com/</span><span class="number">1.3</span><span class="number">.6</span>/quill.min.js<span class="string">"&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="创建编辑器"><a href="#创建编辑器" class="headerlink" title="创建编辑器"></a>创建编辑器</h2><p>quill的使用也很简单，引入上面的资源之后就可以开始创建编辑器了。</p>
<p>首先需要定义编辑器的工具栏，有两种方式，一种是直接html创建，一种是通过js创建，相对来说html更加直观一些，这里就简单的放两个示例介绍一下。</p>
<p>通过一个js数组来配置初始化容器：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> toolbarOptions = [</span><br><span class="line">  [<span class="string">'bold'</span>, <span class="string">'italic'</span>, <span class="string">'underline'</span>, <span class="string">'strike'</span>],        <span class="comment">// 切换按钮</span></span><br><span class="line">  [<span class="string">'blockquote'</span>, <span class="string">'code-block'</span>],</span><br><span class="line"></span><br><span class="line">  [&#123; <span class="string">'header'</span>: <span class="number">1</span> &#125;, &#123; <span class="string">'header'</span>: <span class="number">2</span> &#125;],               <span class="comment">// 用户自定义按钮值</span></span><br><span class="line">  [&#123; <span class="string">'list'</span>: <span class="string">'ordered'</span>&#125;, &#123; <span class="string">'list'</span>: <span class="string">'bullet'</span> &#125;],</span><br><span class="line">  [&#123; <span class="string">'script'</span>: <span class="string">'sub'</span>&#125;, &#123; <span class="string">'script'</span>: <span class="string">'super'</span> &#125;],      <span class="comment">// 上标/下标</span></span><br><span class="line">  [&#123; <span class="string">'indent'</span>: <span class="string">'-1'</span>&#125;, &#123; <span class="string">'indent'</span>: <span class="string">'+1'</span> &#125;],          <span class="comment">// 减少缩进/缩进</span></span><br><span class="line">  [&#123; <span class="string">'direction'</span>: <span class="string">'rtl'</span> &#125;],                         <span class="comment">// 文本下划线</span></span><br><span class="line"></span><br><span class="line">  [&#123; <span class="string">'size'</span>: [<span class="string">'small'</span>, <span class="literal">false</span>, <span class="string">'large'</span>, <span class="string">'huge'</span>] &#125;],  <span class="comment">// 用户自定义下拉</span></span><br><span class="line">  [&#123; <span class="string">'header'</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="literal">false</span>] &#125;],</span><br><span class="line"></span><br><span class="line">  [&#123; <span class="string">'color'</span>: [] &#125;, &#123; <span class="string">'background'</span>: [] &#125;],          <span class="comment">// 主题默认下拉，使用主题提供的值</span></span><br><span class="line">  [&#123; <span class="string">'font'</span>: [] &#125;],</span><br><span class="line">  [&#123; <span class="string">'align'</span>: [] &#125;],</span><br><span class="line"></span><br><span class="line">  [<span class="string">'clean'</span>]                                         <span class="comment">// 清除格式</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> quill = <span class="keyword">new</span> Quill(<span class="string">'#editor'</span>, &#123;</span><br><span class="line">  modules: &#123;</span><br><span class="line">    toolbar: toolbarOptions</span><br><span class="line">  &#125;,</span><br><span class="line">  theme: <span class="string">'snow'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>通过html来创建工具栏冰初始化容器：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"toolbar-container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"ql-formats"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">"ql-font"</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">"ql-size"</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"ql-formats"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"ql-bold"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"ql-italic"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"ql-underline"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"ql-strike"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"ql-formats"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">"ql-color"</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">"ql-background"</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"ql-formats"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"ql-script"</span> <span class="attr">value</span>=<span class="string">"sub"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"ql-script"</span> <span class="attr">value</span>=<span class="string">"super"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"ql-formats"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"ql-header"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"ql-header"</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"ql-blockquote"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"ql-code-block"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"ql-formats"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"ql-list"</span> <span class="attr">value</span>=<span class="string">"ordered"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"ql-list"</span> <span class="attr">value</span>=<span class="string">"bullet"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"ql-indent"</span> <span class="attr">value</span>=<span class="string">"-1"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"ql-indent"</span> <span class="attr">value</span>=<span class="string">"+1"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"ql-formats"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"ql-direction"</span> <span class="attr">value</span>=<span class="string">"rtl"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">"ql-align"</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"ql-formats"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"ql-link"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"ql-image"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"ql-video"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"ql-formula"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"ql-formats"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"ql-clean"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"editor"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> quill = <span class="keyword">new</span> Quill(<span class="string">'#editor'</span>, &#123;</span></span><br><span class="line">    modules: &#123;</span><br><span class="line"><span class="javascript">      toolbar: <span class="string">'#toolbar-container'</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>ok，这样配置并初始化之后就可以完美展示编辑器了，来看一下成果图：</p>


<h2 id="获取内容"><a href="#获取内容" class="headerlink" title="获取内容"></a>获取内容</h2><p>最终的结果是我们需要获取编辑的内容并保存到服务器中，这个不用多讲，获取容器的内容即可，但需要注意的是需要在获取的内容外包上两个div容器，不然展示页面不能展示编辑时所见的效果，同样，展示界面也需要引入quill的css以及highlight的css。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 提交表单</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sub_post</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> html = <span class="built_in">document</span>.querySelector(<span class="string">'#editor'</span>).children[<span class="number">0</span>].innerHTML;</span><br><span class="line">    html = <span class="string">'&lt;div class="ql-container ql-snow"&gt;&lt;div class="ql-editor"&gt;'</span>+html+<span class="string">"&lt;/div&gt;&lt;/div&gt;"</span>;</span><br><span class="line">    $(<span class="string">'[name=content]'</span>).val(html);</span><br><span class="line"></span><br><span class="line">    $(<span class="string">"#submitForm"</span>).submit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>perfect</p>
]]></content>
      <categories>
        <category>Quill</category>
      </categories>
      <tags>
        <tag>富文本编辑器</tag>
        <tag>Quill</tag>
      </tags>
  </entry>
  <entry>
    <title>JS的hasOwnProperty</title>
    <url>/js/has-own-pro/</url>
    <content><![CDATA[<p><code>hasOwnProperty</code>表示是否有自己的属性。这个方法会查找一个对象是否有某个属性，但是<strong>不会去查找它的原型链</strong>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    fn: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> </span><br><span class="line">    &#125;,</span><br><span class="line">    c:&#123;</span><br><span class="line">        d: <span class="number">5</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj.hasOwnProperty(<span class="string">'a'</span>));  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.hasOwnProperty(<span class="string">'fn'</span>));  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.hasOwnProperty(<span class="string">'c'</span>));  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.c.hasOwnProperty(<span class="string">'d'</span>));  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.hasOwnProperty(<span class="string">'d'</span>));  <span class="comment">// false, obj对象没有d属性</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="built_in">String</span>();</span><br><span class="line"><span class="comment">// split方法是String这个对象的方法，str对象本身是没有这个split这个属性的</span></span><br><span class="line"><span class="built_in">console</span>.log(str.hasOwnProperty(<span class="string">'split'</span>));  <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.prototype.hasOwnProperty(<span class="string">'split'</span>));  <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>


<p>转载自CSDN博主「颜值界扛把子」的原创文章<br>原文链接：<a href="https://blog.csdn.net/i_dont_know_a/article/details/84324051" target="_blank" rel="noopener">https://blog.csdn.net/i_dont_know_a/article/details/84324051</a></p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>AJAX</title>
    <url>/ajax/ajax/</url>
    <content><![CDATA[<h2 id="GET-还是-POST？"><a href="#GET-还是-POST？" class="headerlink" title="GET 还是 POST？"></a>GET 还是 POST？</h2><p>与 POST 相比，GET 更简单也更快，并且在大部分情况下都能用。</p>
<h3 id="然而，在以下情况中，请使用-POST-请求："><a href="#然而，在以下情况中，请使用-POST-请求：" class="headerlink" title="然而，在以下情况中，请使用 POST 请求："></a>然而，在以下情况中，请使用 POST 请求：</h3><a id="more"></a>
<p>无法使用缓存文件（更新服务器上的文件或数据库）<br>向服务器发送大量数据（POST 没有数据量限制）<br>发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠</p>
<p>AJAX 指的是异步 JavaScript 和 XML（Asynchronous JavaScript and XML）。</p>
<p>XMLHttpRequest 对象如果要用于 AJAX 的话，其 open() 方法的 async 参数必须设置为 true：</p>
<p>通过 AJAX，JavaScript 无需等待服务器的响应，而是：</p>
<p>在等待服务器响应时执行其他脚本<br>当响应就绪后对响应进行处理</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">xmlhttp.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xmlhttp.readyState==<span class="number">4</span> &amp;&amp; xmlhttp.status==<span class="number">200</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>).innerHTML=xmlhttp.responseText;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"/try/ajax/ajax_info.txt"</span>,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.send();</span><br></pre></td></tr></table></figure>

<p>Async = false<br>如需使用 async=false，请将 open() 方法中的第三个参数改为 false：</p>
<p>xmlhttp.open(“GET”,”test1.txt”,false);<br>我们不推荐使用 async=false，但是对于一些小型的请求，也是可以的。</p>
<p>请记住，JavaScript 会等到服务器响应就绪才继续执行。如果服务器繁忙或缓慢，应用程序会挂起或停止。</p>
<p>注意：当您使用 async=false 时，请不要编写 onreadystatechange 函数 - 把代码放到 send() 语句后面即可：</p>
<p>实例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"/try/ajax/ajax_info.txt"</span>,<span class="literal">false</span>);</span><br><span class="line">xmlhttp.send();</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>).innerHTML=xmlhttp.responseText;</span><br></pre></td></tr></table></figure>

<p>服务器响应<br>如需获得来自服务器的响应，请使用 XMLHttpRequest 对象的 responseText 或 responseXML 属性。</p>
<p>属性    描述<br>responseText    获得字符串形式的响应数据。<br>responseXML    获得 XML 形式的响应数据。</p>
<p>如果来自服务器的响应并非 XML，请使用 responseText 属性。</p>
<h3 id="responseXML"><a href="#responseXML" class="headerlink" title="responseXML"></a>responseXML</h3><p>responseXML 属性<br>如果来自服务器的响应是 XML，而且需要作为 XML 对象进行解析，请使用 responseXML 属性：</p>
<p>实例<br>请求 cd_catalog.xml 文件，并解析响应：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">xmlDoc=xmlhttp.responseXML;</span><br><span class="line">txt=<span class="string">""</span>;</span><br><span class="line">x=xmlDoc.getElementsByTagName(<span class="string">"ARTIST"</span>);</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;x.length;i++)</span><br><span class="line">&#123;</span><br><span class="line">    txt=txt + x[i].childNodes[<span class="number">0</span>].nodeValue + <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>).innerHTML=txt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>ajax</category>
      </categories>
      <tags>
        <tag>ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>时间戳问题（JS）</title>
    <url>/js/timestamp/</url>
    <content><![CDATA[<p>最近后台给我发来了时间戳，学习了一下，也遇到了一些问题，在这里总结下～</p>
<a id="more"></a>



<h1 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h1><p> 时间戳指的是格林威治时间1970年01月01日00时00分00秒(<strong>北京时间1970年01月01日08时00分00秒</strong>)起至现在的总<strong>秒(ms)</strong>数。也就是说从北京时间1970年01月01日08时00分00秒到现在过了多少秒，时间戳就是多少。<br>比如：<br>    &emsp;时间戳为1，该时间戳对应的时间就是北京时间1970年01月01日08时00分01秒<br>    &emsp;时间戳为60，该时间戳对应的时间就是北京时间1970年01月01日08时01分00秒<br>    &emsp;时间戳为60*60=3600，该时间戳对应的时间就是北京时间1970年01月01日09时00分00秒<br>    &emsp;时间戳为60*60*24=86400，该时间戳对应的时间就是北京时间1970年01月02日08时00分00秒<br>    &emsp;时间戳为60*60*24*365=31,536,000，该时间戳对应的时间就是北京时间1971年01月01日08时00分00秒<br>    ……以此类推</p>
<h1 id="new-Date"><a href="#new-Date" class="headerlink" title="new Date()"></a>new Date()</h1><pre><code>众所周知，js中一般用`new Date()`创建时间，表示现在的时间。</code></pre><h1 id="JS获取当前时间戳的方法"><a href="#JS获取当前时间戳的方法" class="headerlink" title="JS获取当前时间戳的方法"></a>JS获取当前时间戳的方法</h1><pre><code>* &amp;emsp;`var timestamp = Date.parse(new  Date()); // 不推荐使用，因为毫秒级别的数值被转化为000 ，不准确！`

* &amp;emsp;`var timestamp = (new Date()).valueOf(); // 获取当前毫秒的时间戳，准确！`

* &amp;emsp;`var timestamp = new Date() . get Time(); // 返回数值单位是毫秒；`</code></pre><h1 id="JS获取指定时间戳的方式"><a href="#JS获取指定时间戳的方式" class="headerlink" title="JS获取指定时间戳的方式"></a>JS获取指定时间戳的方式</h1><pre><code>`var timestamp = (new Date(&quot; 2000/01/01 10:10:15&quot;)).getTime()/1000;`</code></pre><h1 id="时间转换成时间戳"><a href="#时间转换成时间戳" class="headerlink" title="时间转换成时间戳"></a>时间转换成时间戳</h1><pre><code>`var timestamp= new Date(946692615000) // 直接用new date(要转换的时间戳)，参数是毫秒`
其中注意时间戳一定要是int型，否则转换失败。parseInt()转一下最好。</code></pre><h1 id="计算当前日期的周一与周日"><a href="#计算当前日期的周一与周日" class="headerlink" title="计算当前日期的周一与周日"></a>计算当前日期的周一与周日</h1><pre><code><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">Date</span>=<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">var</span> selectTime = <span class="built_in">Date</span>.getTime();<span class="comment">//获取时间戳</span></span><br><span class="line"><span class="keyword">var</span> selectDay = <span class="built_in">Date</span>.getDay();<span class="comment">//获取星期</span></span><br><span class="line"><span class="keyword">var</span> oneDayLong = <span class="number">24</span> * <span class="number">3600</span> * <span class="number">1000</span>;<span class="comment">//定义一天有多少毫秒</span></span><br><span class="line"><span class="keyword">var</span> MondayTime = selectTime - (selectDay - <span class="number">1</span>) * oneDayLong;</span><br><span class="line"><span class="keyword">var</span> monday = <span class="keyword">new</span> <span class="built_in">Date</span>(MondayTime)<span class="comment">//时间戳再转回时间</span></span><br><span class="line"><span class="keyword">var</span> SundayTime = selectTime - (selectDay - <span class="number">7</span>) * oneDayLong;</span><br><span class="line"><span class="keyword">var</span> sundayTime = <span class="keyword">new</span> <span class="built_in">Date</span>(SundayTime)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(monday)</span><br><span class="line"><span class="built_in">console</span>.log(sundayTime)</span><br></pre></td></tr></table></figure></code></pre><h1 id="计算某一日是周几"><a href="#计算某一日是周几" class="headerlink" title="计算某一日是周几"></a>计算某一日是周几</h1><pre><code>&amp;emsp;当我们知道某一&apos;yyyy-mm-dd&apos;日期时便可以计算出当前是星期几，公式如下：

&amp;emsp;基姆拉尔森计算公式
&amp;emsp;W= (d+2*m+3*(m+1)/5+y+y/4-y/100+y/400) mod 7
&amp;emsp;在公式中d表示日期中的日数，m表示月份数，y表示年数。(其中mod意思是取余计算，js用的是%)</code></pre><h1 id="通过两个时间戳的差值计算相隔几日"><a href="#通过两个时间戳的差值计算相隔几日" class="headerlink" title="通过两个时间戳的差值计算相隔几日"></a>通过两个时间戳的差值计算相隔几日</h1><pre><code><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">dValue(ctime) &#123;<span class="comment">//ctime为一个时间戳</span></span><br><span class="line">  <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime() <span class="comment">// 毫秒</span></span><br><span class="line">  <span class="keyword">var</span> dv = now - ctime<span class="comment">// 差值</span></span><br><span class="line">  <span class="keyword">let</span> dvDay = dv / (<span class="number">1000</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>)</span><br><span class="line">  <span class="comment">// getTime()得出的是毫秒数</span></span><br><span class="line">  <span class="comment">//dvDay是相隔的天数</span></span><br><span class="line">  <span class="keyword">return</span> dvDay;</span><br><span class="line">  <span class="keyword">if</span> (dvDay &gt;<span class="number">7</span>) &#123;<span class="comment">//与now相隔大于七天的doSomething</span></span><br><span class="line">      ...</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">      ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h1 id="JS把时间格式化显示"><a href="#JS把时间格式化显示" class="headerlink" title="JS把时间格式化显示"></a>JS把时间格式化显示</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">formatTime(number, format) &#123;</span><br><span class="line">  <span class="keyword">let</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>(number)</span><br><span class="line">  <span class="keyword">let</span> newArr = []</span><br><span class="line">  <span class="keyword">let</span> formatArr = [<span class="string">'Y'</span>, <span class="string">'M'</span>, <span class="string">'D'</span>, <span class="string">'h'</span>, <span class="string">'m'</span>, <span class="string">'s'</span>]</span><br><span class="line">  newArr.push(time.getFullYear())</span><br><span class="line">  newArr.push(<span class="keyword">this</span>.formatNumber(time.getMonth() + <span class="number">1</span>))</span><br><span class="line">  newArr.push(<span class="keyword">this</span>.formatNumber(time.getDate()))</span><br><span class="line"></span><br><span class="line">  newArr.push(<span class="keyword">this</span>.formatNumber(time.getHours()))</span><br><span class="line">  newArr.push(<span class="keyword">this</span>.formatNumber(time.getMinutes()))</span><br><span class="line">  newArr.push(<span class="keyword">this</span>.formatNumber(time.getSeconds()))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> newArr) &#123;</span><br><span class="line">    format = format.replace(formatArr[i], newArr[i])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> format</span><br><span class="line">&#125;,</span><br><span class="line">formatNumber(n) &#123;</span><br><span class="line">  n = n.toString()</span><br><span class="line">  <span class="keyword">return</span> n[<span class="number">1</span>] ? n : <span class="string">'0'</span> + n</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>调用<code>formatTime(timestamp, &#39;Y-M-D-h-m-s&#39;)</code><br>(timestamp为时间戳)</p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>详解element的DateTimePicker 日期时间选择器</title>
    <url>/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/datetimepicker/</url>
    <content><![CDATA[<p>未完待续…</p>
<a id="more"></a>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"block"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">el-date-picker</span></span></span><br><span class="line"><span class="tag">     <span class="attr">v-model</span>=<span class="string">"value1"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">type</span>=<span class="string">"datetime"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">placeholder</span>=<span class="string">"选择日期时间"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">el-date-picker</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">   <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">     data() &#123;</span><br><span class="line"><span class="javascript">       <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">          value1: <span class="string">''</span></span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>readonly 完全只读   boolean 默认false(可读可写)<br>disabled 禁用       boolean 默认false(不禁用)<br>editable 文本框可输入 boolean 默认true(可输入)<br><code>:editable = false</code><br>clearable 显示清除按钮 boolean 默认true(显示)<br>size 框大小 string <code>large &gt; small &gt; mini</code><br><code>size = &quot;mini&quot;</code><br>placeholder <em>非范围选择时</em>的占位内容 string<br>start-placeholder 范围选择时开始日期的占位内容    string<br>end-placeholder 范围选择时结束日期的占位内容 string<br>time-arrow-control 是否使用箭头进行时间选择 boolean false<br>&emsp;<code>:time-arrow-control = true</code><br>&emsp;true需要点击arrow箭头选择时间，false 时选择时间是上下滑动</p>



<p>type 显示类型 string <code>year/month/date/week/ datetime/datetimerange/daterange</code><br>&emsp;默认值date<br>format 显示在输入框中的格式 string 默认”yyyy-MM-dd HH:mm:ss”<br>align 对齐方式 string left/center/right 默认left<br>popper-class DateTimePicker 下拉框的类名 string</p>
]]></content>
      <categories>
        <category>前端技术</category>
      </categories>
      <tags>
        <tag>前端技术</tag>
        <tag>elementUI</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo代码高亮</title>
    <url>/hexo/hexo%E6%B5%A0%EF%BD%87%E7%88%9C%E6%A5%82%E6%A8%B9%E5%AF%92/</url>
    <content><![CDATA[<p>Hexo高亮</p>
<a id="more"></a>
<p>我的主题是next<br>在站点配置文件（博客根目录_config.yml）中找到[Ctrl+F(Mac下Command+F)]highlight字段</p>
<p>highlight:<br>  enable: true          启动 or 关闭高亮<br>  line_number: true     显示行号<br>  auto_detect: false    自动检查<br>  tab_replace:          缩进大小</p>
<p>在主题配置文件（博客的themes文件夹/你的主题文件夹/_config.yml）中找到[Ctrl+F(Mac下Command+F)]highlight_theme<br>该属性的值可以有五种：<br>                    normal<br>                    night<br>                    night eighties<br>                    night blue<br>                    night bright<br>如下图：<br>normal</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 我们的数据对象</span></span><br><span class="line"><span class="keyword">var</span> data = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 该对象被加入到一个 Vue 实例中</span></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: data</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得这个实例上的属性</span></span><br><span class="line"><span class="comment">// 返回源数据中对应的字段</span></span><br><span class="line">vm.a == data.a <span class="comment">// =&gt; true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置属性也会影响到原始数据</span></span><br><span class="line">vm.a = <span class="number">2</span></span><br><span class="line">data.a <span class="comment">// =&gt; 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ……反之亦然</span></span><br><span class="line">data.a = <span class="number">3</span></span><br><span class="line">vm.a <span class="comment">// =&gt; 3</span></span><br></pre></td></tr></table></figure>

<p>night</p>


<p>night eighties（透明度是night的80%）</p>


<p>night blue</p>


<p>night bright（亮黑）</p>

]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>vue随笔（一）</title>
    <url>/vue/vue/</url>
    <content><![CDATA[<p>本文记录自己学习Vue的历程～～<br>v-bind<br>v-model<br>v-on<br>v-if<br>v-for<br>组件<br>    小型 独立 可复用<br>    父作用域将数据传到子作用域<br>        prop</p>
<p>与自定义元素的关系<br>你可能已经注意到 Vue 组件非常类似于自定义元素——它是 Web 组件规范的一部分，这是因为 Vue 的组件语法部分参考了该规范。例如 Vue 组件实现了 Slot API 与 is 特性。但是，还是有几个关键差别：</p>
<a id="more"></a>

<ol>
<li><p>Web Components 规范已经完成并通过，但未被所有浏览器原生实现。目前 Safari 10.1+、Chrome 54+ 和 Firefox 63+ 原生支持 Web Components。相比之下，Vue 组件不需要任何 polyfill，并且在所有支持的浏览器 (IE9 及更高版本) 之下表现一致。必要时，Vue 组件也可以包装于原生自定义元素之内。</p>
</li>
<li><p>Vue 组件提供了纯自定义元素所不具备的一些重要功能，最突出的是跨组件数据流、自定义事件通信以及构建工具集成。</p>
</li>
</ol>
<p>虽然 Vue 内部没有使用自定义元素，不过在应用使用自定义元素、或以自定义元素形式发布时，依然有很好的互操作性。Vue CLI 也支持将 Vue 组件构建成为原生的自定义元素。</p>
<p>所有的 Vue 组件都是 Vue 实例，并且接受相同的选项对象 (一些根实例特有的选项除外)。</p>
<p>属性与视图的值同步更新</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 我们的数据对象</span><br><span class="line">var data = &#123; a: 1 &#125;</span><br><span class="line"></span><br><span class="line">// 该对象被加入到一个 Vue 实例中</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  data: data</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 获得这个实例上的属性</span><br><span class="line">// 返回源数据中对应的字段</span><br><span class="line">vm.a == data.a // =&gt; <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">// 设置属性也会影响到原始数据</span><br><span class="line">vm.a = 2</span><br><span class="line">data.a // =&gt; 2</span><br><span class="line"></span><br><span class="line">// ……反之亦然</span><br><span class="line">data.a = 3</span><br><span class="line">vm.a // =&gt; 3</span><br></pre></td></tr></table></figure>

<p>当这些数据改变时，视图会进行重渲染。值得注意的是只有当实例被创建时 data 中存在的属性才是响应式的。也就是说如果你添加一个新的属性，比如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vm.b = <span class="string">'hi'</span></span><br></pre></td></tr></table></figure>

<p>那么对 b 的改动将不会触发任何视图的更新。如果你知道你会在晚些时候需要一个属性，但是一开始它为空或不存在，那么你仅需要设置一些初始值。比如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  newTodoText: <span class="string">''</span>,</span><br><span class="line">  visitCount: 0,</span><br><span class="line">  hideCompletedTodos: <span class="literal">false</span>,</span><br><span class="line">  todos: [],</span><br><span class="line">  error: null</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>冻结的Object.freeze()，这会阻止修改现有的属性，也意味着响应系统无法再追踪变化。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">  foo: <span class="string">'bar'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Object.freeze(obj)</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  data: obj</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123; foo &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;!-- 这里的 `foo` 不会更新！ --&gt;</span><br><span class="line">  &lt;button v-on:click=<span class="string">"foo = 'baz'"</span>&gt;Change it&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>前缀 $，它用的都是vue自己的属性，以便与用户定义的属性区分开来。例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">var data = &#123; a: 1 &#125;</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el: <span class="string">'#example'</span>,</span><br><span class="line">  data: data</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">vm.<span class="variable">$data</span> === data // =&gt; <span class="literal">true</span></span><br><span class="line">vm.<span class="variable">$el</span> === document.getElementById(<span class="string">'example'</span>) // =&gt; <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">// <span class="variable">$watch</span> 是一个实例方法</span><br><span class="line">vm.<span class="variable">$watch</span>(<span class="string">'a'</span>, <span class="keyword">function</span> (newValue, oldValue) &#123;</span><br><span class="line">  // 这个回调将在 `vm.a` 改变后调用</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>生命周期钩子==》给了用户在创建vue过程中不同阶段添加自己代码的机会。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">created:<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line"></span><br><span class="line">&#125;//在一个实例被创建之后执行的代码</span><br></pre></td></tr></table></figure>

<p>还有的如：mounted,updated,destroyed</p>
<p><i>不要在选项属性或回调上使用箭头函数，比如 created: () =&gt; console.log(this.a) 或 vm.$watch(‘a’, newValue =&gt; this.myMethod())。因为箭头函数并没有 this，this 会作为变量一直向上级词法作用域查找，直至找到为止，经常导致 Uncaught TypeError: Cannot read property of undefined 或 Uncaught TypeError: this.myMethod is not a function 之类的错误。</i></p>
<h1 id="模版语法"><a href="#模版语法" class="headerlink" title="模版语法"></a>模版语法</h1><p><b>Vue.js 使用了基于 HTML 的模板语法，允许开发者声明式地将 DOM 绑定至底层 Vue 实例的数据。所有 Vue.js 的模板都是合法的 HTML ，所以能被遵循规范的浏览器和 HTML 解析器解析。</b></p>
<p><b>在底层的实现上，Vue 将模板编译成虚拟 DOM 渲染函数。结合响应系统，Vue 能够智能地计算出最少需要重新渲染多少组件，并把 DOM 操作次数减到最少。</b></p>
<p><b>如果你熟悉虚拟 DOM 并且偏爱 JavaScript 的原始力量，你也可以不用模板，直接写渲染 (render) 函数，使用可选的 JSX 语法。</b></p>
<h2 id="插值"><a href="#插值" class="headerlink" title="插值"></a>插值</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>双大括号</p>
<p>通过使用 v-once 指令，你也能执行一次性地插值，当数据改变时，插值处的内容不会更新。但请留心这会影响到该节点上的其它数据绑定：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;span v-once&gt;这个将不会改变: &#123;&#123; msg &#125;&#125;&lt;/span&gt;</span><br></pre></td></tr></table></figure>

<p>html代码需要用v-html</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;span v-html=<span class="string">"rawHtml"</span>&gt;&lt;/span&gt;</span><br></pre></td></tr></table></figure>

<p>这个 span 的内容将会被替换成为属性值 rawHtml，直接作为 HTML——会忽略解析属性值中的数据绑定。注意，你不能使用 v-html 来复合局部模板，因为 Vue 不是基于字符串的模板引擎。反之，对于用户界面 (UI)，组件更适合作为可重用和可组合的基本单位。<br>你的站点上动态渲染的任意 HTML 可能会非常危险，因为它很容易导致 XSS 攻击。请只对可信内容使用 HTML 插值，绝不要对用户提供的内容使用插值。<br>（v-html不能多重复合html内容，所以组件比v-html更好，更可重用，更可复合，并且v-html动态渲染html很容易导致XSS攻击，请只对可信内容使用 HTML 插值，绝不要对用户提供的内容使用插值。）</p>
<h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><p>对于布尔特性 (它们只要存在就意味着值为 true)，v-bind 工作起来略有不同，在这个例子中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;button v-bind:disabled=<span class="string">"isButtonDisabled"</span>&gt;Button&lt;/button&gt;</span><br></pre></td></tr></table></figure>

<p>如果 isButtonDisabled 的值是 null、undefined 或 false，则 disabled 特性甚至不会被包含在渲染出来的 button 元素中。<br>（代码中的isButtonDisabled可以不为boolean值，但是如果值为null，undefined，false，则disabled属性都根本不会被渲染出来，）</p>
<h3 id="使用Js表达式"><a href="#使用Js表达式" class="headerlink" title="使用Js表达式"></a>使用Js表达式</h3><p>迄今为止，在我们的模板中，我们一直都只绑定简单的属性键值。但实际上，对于所有的数据绑定，Vue.js 都提供了完全的 JavaScript 表达式支持。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;&#123; number + 1 &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; ok ? <span class="string">'YES'</span> : <span class="string">'NO'</span> &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; message.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>) &#125;&#125;</span><br><span class="line"></span><br><span class="line">&lt;div v-bind:id=<span class="string">"'list-' + id"</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>这些表达式会在所属 Vue 实例的数据作用域下作为 JavaScript 被解析。有个限制就是，每个绑定都只能包含单个表达式，所以下面的例子都不会生效。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;!-- 这是语句，不是表达式 --&gt;</span><br><span class="line">&#123;&#123; var a = 1 &#125;&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- 流控制也不会生效，请使用三元表达式 --&gt;</span><br><span class="line">&#123;&#123; <span class="keyword">if</span> (ok) &#123; <span class="built_in">return</span> message &#125; &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>（可以使用表达式，但是必须是单个表达式）</p>
<p><i>模板表达式都被放在沙盒中，只能访问全局变量的一个白名单，如 Math 和 Date 。你不应该在模板表达式中试图访问用户定义的全局变量。</i></p>
<h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><h3 id="v"><a href="#v" class="headerlink" title="v-"></a>v-</h3><p>v-if<br>v-bind<br>v-for<br>v-on</p>
<h3 id="动态参数"><a href="#动态参数" class="headerlink" title="动态参数"></a>动态参数</h3><p>从 2.6.0 开始，可以用方括号括起来的 JavaScript 表达式作为一个指令的参数：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;a v-bind:[attributeName]=<span class="string">"url"</span>&gt; ... &lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p>这里的 attributeName 会被作为一个 JavaScript 表达式进行动态求值，求得的值将会作为最终的参数来使用。例如，如果你的 Vue 实例有一个 data 属性 attributeName，其值为 “href”，那么这个绑定将等价于 v-bind:href。</p>
<p>同样地，你可以使用动态参数为一个动态的事件名绑定处理函数：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;a v-on:[eventName]=<span class="string">"doSomething"</span>&gt; ... &lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p>同样地，当 eventName 的值为 “focus” 时，v-on:[eventName] 将等价于 v-on:focus。</p>
<p>（v-冒号后的参数可以动态改变，比如v-on:click=”dosomething”可以动态修改为v-on:focus=”dosomething”，用的是<br>v-on:[eventName]=”dosomething”）</p>
<p>对动态参数的值的约束<br>动态参数预期会求出一个字符串，异常情况下值为 null。这个特殊的 null 值可以被显性地用于移除绑定。任何其它非字符串类型的值都将会触发一个警告。<br>（动态参数预期会求出一个字符串，动态参数异常情况下值为null～努力了～，null可以被显性地用于移除绑定，其他任何非字符串类型的值都将会触发一个警告）</p>
<p>对动态参数表达式的约束<br>动态参数表达式有一些语法约束，因为某些字符，例如空格和引号，放在 HTML 特性名里是无效的。同样，在 DOM 中使用模板时你需要回避大写键名。</p>
<p>例如，下面的代码是无效的：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;!-- 这会触发一个编译警告 --&gt;</span><br><span class="line">&lt;a v-bind:[<span class="string">'foo'</span> + bar]=<span class="string">"value"</span>&gt; ... &lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p>变通的办法是使用没有空格或引号的表达式，或用计算属性替代这种复杂表达式。</p>
<p>另外，如果你在 DOM 中使用模板 (直接在一个 HTML 文件里撰写模板)，需要留意浏览器会把特性名全部强制转为小写：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;!-- 在 DOM 中使用模板时这段代码会被转换为 `v-bind:[someattr]` --&gt;</span><br><span class="line">&lt;a v-bind:[someAttr]=<span class="string">"value"</span>&gt; ... &lt;/a&gt;</span><br></pre></td></tr></table></figure>

<h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><p>.prevent 对于触发的事件调用event.preventDefault()：</p>
<h3 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h3><p>v-bind :<br>v-on   @</p>
<h1 id="计算属性和侦听器"><a href="#计算属性和侦听器" class="headerlink" title="计算属性和侦听器"></a>计算属性和侦听器</h1><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><p>模板内的表达式非常便利，但是设计它们的初衷是用于简单运算的。在模板中放入太多的逻辑会让模板过重且难以维护。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    fun: <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于任何复杂逻辑，你都应当使用计算属性。</p>
<p>Vue 知道 vm.reversedMessage 依赖于 vm.message，因此当 vm.message 发生改变时，所有依赖 vm.reversedMessage 的绑定也会更新。而且最妙的是我们已经以声明的方式创建了这种依赖关系：计算属性的 getter 函数是没有副作用 (side effect) 的，这使它更易于测试和理解。<br>（依赖的变量发生变化时，computed属性对应的函数的返回值也会发生变化）<br>计算属性是基于它们的响应式依赖进行缓存。只在相关响应式依赖发生改变时它们才会重新求值。这就意味着只要 message 还没有发生改变，多次访问 reversedMessage 计算属性会立即返回之前的计算结果，而不必再次执行函数。</p>
<h3 id="计算属性的-setter"><a href="#计算属性的-setter" class="headerlink" title="计算属性的 setter"></a>计算属性的 setter</h3><p>计算属性默认只有 getter ，不过在需要时你也可以提供一个 setter ：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  fullName: &#123;</span><br><span class="line">    // getter</span><br><span class="line">    get: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">      <span class="built_in">return</span> this.firstName + <span class="string">' '</span> + this.lastName</span><br><span class="line">    &#125;,</span><br><span class="line">    // setter</span><br><span class="line">    <span class="built_in">set</span>: <span class="keyword">function</span> (newValue) &#123;</span><br><span class="line">      var names = newValue.split(<span class="string">' '</span>)</span><br><span class="line">      this.firstName = names[0]</span><br><span class="line">      this.lastName = names[names.length - 1]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在再运行 vm.fullName = ‘John Doe’ 时，setter 会被调用，vm.firstName 和 vm.lastName 也会相应地被更新。</p>
<h2 id="侦听器"><a href="#侦听器" class="headerlink" title="侦听器"></a>侦听器</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">    a: <span class="keyword">function</span>(val)&#123;</span><br><span class="line">        this.b = this.c + val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Vue 通过 watch 选项提供了一个更通用的方法，来响应数据的变化。当需要在数据变化时执行异步或开销较大的操作时，这个方式是最有用的。</p>
<p>在这个示例中，使用 watch 选项允许我们执行异步操作 (访问一个 API)，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的。</p>
<p>除了 watch 选项之外，您还可以使用命令式的 vm.$watch </p>
<h1 id="Class和Style绑定"><a href="#Class和Style绑定" class="headerlink" title="Class和Style绑定"></a>Class和Style绑定</h1><h2 id="绑定HTML-Class"><a href="#绑定HTML-Class" class="headerlink" title="绑定HTML Class"></a>绑定HTML Class</h2><h3 id="对象语法"><a href="#对象语法" class="headerlink" title="对象语法"></a>对象语法</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"&#123;active: isActive&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>isActive</code> =》Boolean</p>
<p>传入多个属性来动态切换多个class，v-bind:class也可以与普通的class属性共存</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> </span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"static"</span></span></span><br><span class="line"><span class="tag"> <span class="attr">v-bind:class</span>=<span class="string">"&#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">      active:isActive,</span></span></span><br><span class="line"><span class="tag"><span class="string">      'text-danger':hasError&#125;"</span></span></span><br><span class="line"><span class="tag">  &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data:&#123;</span><br><span class="line">  isActive: <span class="literal">true</span>,</span><br><span class="line">  hasError: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>渲染结果</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"static active"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>当 isActive 或者 hasError 变化时，class 列表将相应地更新。</p>
<p>也可以：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"classObject"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  classObject: &#123;</span><br><span class="line">    active: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">'text-danger'</span>: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>渲染结果和上面一样</p>
<p><strong>我们也可以在这里绑定一个返回对象的计算属性。这是一个常用且强大的模式：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"classObject"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  isActive: <span class="literal">true</span>,</span><br><span class="line">  error: <span class="literal">null</span></span><br><span class="line">&#125;,</span><br><span class="line">computed: &#123;</span><br><span class="line">  classObject: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      active: <span class="keyword">this</span>.isActive &amp;&amp; !<span class="keyword">this</span>.error,</span><br><span class="line">      <span class="string">'text-danger'</span>: <span class="keyword">this</span>.error &amp;&amp; <span class="keyword">this</span>.error.type === <span class="string">'fatal'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="数组语法"><a href="#数组语法" class="headerlink" title="数组语法"></a>数组语法</h3><p><strong><em>Gzy有话说：</em></strong> <strong>绑定时数组语法和对象语法不同，对象语法的冒号后边是Boolean，数组中是代替class名的key值，key对应的value才是渲染出来的class名</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"[activeClass,errorClass]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  activeClass: <span class="string">'active'</span>,</span><br><span class="line">  errorClass: <span class="string">'text-danger'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>渲染结果为：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"active text-danger"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果你也想根据条件切换列表中的 class，可以用三元表达式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"[isActive ? activeClass : '', errorClass]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这样写将始终添加 errorClass，但是只有在 isActive 是 truthy 时才添加 activeClass。<br><em>在 JavaScript 中，truthy（真值）指的是在布尔值上下文中，转换后的值为真的值。所有值都是真值，除非它们被定义为 假值（即除 false、0、””、null、undefined 和 NaN 以外皆为真值）。</em></p>
<p>不过，当有多个条件 class 时这样写有些繁琐。所以<strong>在数组语法中也可以使用对象语法：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"[&#123; active: isActive &#125;, errorClass]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="用在组件上"><a href="#用在组件上" class="headerlink" title="用在组件上"></a>用在组件上</h3><p>当在一个自定义组件上使用 class 属性时，这些类将被添加到该组件的根元素上面。这个元素上已经存在的类<strong>不会被覆盖</strong>。</p>
<p>例如，如果你声明了这个组件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'my-component'</span>, &#123;</span><br><span class="line">  template: <span class="string">'&lt;p class="foo bar"&gt;Hi&lt;/p&gt;'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>然后在使用它的时候添加一些 class：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">class</span>=<span class="string">"baz boo"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>HTML 将被渲染为:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"foo bar baz boo"</span>&gt;</span>Hi<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="绑定内联样式"><a href="#绑定内联样式" class="headerlink" title="绑定内联样式"></a>绑定内联样式</h2><h3 id="对象语法-1"><a href="#对象语法-1" class="headerlink" title="对象语法"></a>对象语法</h3><p>v-bind:style 的对象语法十分直观——看着非常像 CSS，但其实是一个 JavaScript 对象。CSS 属性名可以用驼峰式 (camelCase) 或短横线分隔 (kebab-case，记得用引号括起来) 来命名：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"&#123; color: activeColor, fontSize: fontSize + 'px' &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  activeColor: <span class="string">'red'</span>,</span><br><span class="line">  fontSize: <span class="number">30</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>直接绑定到一个样式对象通常更好，这会让模板更清晰：<br><code>&lt;div v-bind:style=&quot;styleObject&quot;&gt;&lt;/div&gt;</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  styleObject: &#123;</span><br><span class="line">    color: <span class="string">'red'</span>,</span><br><span class="line">    fontSize: <span class="string">'13px'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同样的，对象语法常常结合返回对象的计算属性使用。</p>
<h3 id="数组语法-1"><a href="#数组语法-1" class="headerlink" title="数组语法"></a>数组语法</h3><p>v-bind:style 的数组语法可以将多个样式对象应用到同一个元素上：<br><code>&lt;div v-bind:style=&quot;[baseStyles, overridingStyles]&quot;&gt;&lt;/div&gt;</code></p>
<h3 id="自动添加前缀"><a href="#自动添加前缀" class="headerlink" title="自动添加前缀"></a>自动添加前缀</h3><p><em>当 v-bind:style 使用需要添加浏览器引擎前缀的 CSS 属性时，如 transform，Vue.js 会自动侦测并添加相应的前缀。</em><br><code>-webkit-transform</code></p>
<h3 id="多重值"><a href="#多重值" class="headerlink" title="多重值"></a>多重值</h3><p>从2.3.0起你可以为style绑定中的属性提供一个包含多个值的数组，常用于多个带前缀的值<br><code>&lt;div :style=&quot;{ display: [&#39;-webkit-box&#39;, &#39;-ms-flexbox&#39;, &#39;flex&#39;] }&quot;&gt;&lt;/div&gt;</code><br>这样写只会渲染数组中最后一个被浏览器支持的值。在本例中，如果浏览器支持不带浏览器前缀的 flexbox，那么就只会渲染 display: flex。</p>
<h1 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h1><h2 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h2><h2 id="v-else"><a href="#v-else" class="headerlink" title="v-else"></a>v-else</h2><h2 id="v-else-if"><a href="#v-else-if" class="headerlink" title="v-else-if"></a>v-else-if</h2><h2 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h2><p> v-show的元素始终保留在DOM中，只是简单切换display<br> 注意： v-show不支持<code>template</code>元素和<code>v-else</code></p>
<h2 id="v-if-vs-v-show"><a href="#v-if-vs-v-show" class="headerlink" title="v-if vs v-show"></a>v-if vs v-show</h2><p>v-if 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被<em>销毁</em>和<em>重建</em>。</p>
<p>v-if 也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会<em>开始</em>渲染条件块。</p>
<p>相比之下，v-show 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地<em>基于 CSS 进行切换</em>。</p>
<p><strong><em>一般来说，v-if 有更高的切换开销，而 v-show 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 v-show 较好；如果在运行时条件很少改变，则使用 v-if 较好。</em></strong></p>
<h2 id="v-if-与-v-for-一起使用"><a href="#v-if-与-v-for-一起使用" class="headerlink" title="v-if 与 v-for 一起使用"></a>v-if 与 v-for 一起使用</h2><p>不推荐他俩同时使用<br>v-for比v-if有更高的优先级</p>
<h2 id="用key管理可复用的元素"><a href="#用key管理可复用的元素" class="headerlink" title="!用key管理可复用的元素"></a>!用key管理可复用的元素</h2><p>Vue 会尽可能高效地渲染元素，通常会复用已有元素而不是从头开始渲染。这么做除了使 Vue 变得非常快之外，还有其它一些好处。例如，如果你允许用户在不同的登录方式之间切换：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">"loginType === 'username'"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"Enter your username"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"Enter your email address"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>那么在上面的代码中切换 loginType 将<strong>不会清除用户已经输入的内容</strong>。因为两个模板使用了相同的元素，<code>&lt;input&gt;</code>不会被替换掉——仅仅是替换了它的 placeholder。<br>这样也不总是符合实际需求，所以 Vue 为你提供了一种方式来表达“这两个元素是完全独立的，不要复用它们”。只需添加一个具有唯一值的 <code>key</code> 属性即可：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">"loginType === 'username'"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"Enter your username"</span> <span class="attr">key</span>=<span class="string">"username-input"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"Enter your email address"</span> <span class="attr">key</span>=<span class="string">"email-input"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><em>现在，每次切换时，输入框都将被重新渲染。</em><br>注意，<code>&lt;label&gt;</code> 元素仍然会被高效地复用，因为它们没有添加 key 属性。</p>
<h1 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h1><h2 id="用-v-for-把一个数组对应为一组元素"><a href="#用-v-for-把一个数组对应为一组元素" class="headerlink" title="用 v-for 把一个数组对应为一组元素"></a>用 v-for 把一个数组对应为一组元素</h2><p>在 v-for 块中，我们可以访问所有父作用域的属性。v-for 还支持一个可选的第二个参数，即当前项的索引。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"example-2"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in items"</span>&gt;</span></span><br><span class="line">    &#123;&#123; parentMessage &#125;&#125; - &#123;&#123; index &#125;&#125; - &#123;&#123; item.message &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> example2 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#example-2'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    parentMessage: <span class="string">'Parent'</span>,</span><br><span class="line">    items: [</span><br><span class="line">      &#123; <span class="attr">message</span>: <span class="string">'Foo'</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">message</span>: <span class="string">'Bar'</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>你也可以用 of 替代 in 作为分隔符，因为它更接近 JavaScript 迭代器的语法：<br><code>&lt;div v-for=&quot;item of items&quot;&gt;&lt;/div&gt;</code></p>
<h2 id="在-v-for-里使用对象"><a href="#在-v-for-里使用对象" class="headerlink" title="在 v-for 里使用对象"></a>在 v-for 里使用对象</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(value, name) in object"</span>&gt;</span></span><br><span class="line">  &#123;&#123; name &#125;&#125;: &#123;&#123; value &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>value是键值，name是键名，也可以直接用value键值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#v-for-object'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    object: &#123;</span><br><span class="line">      title: <span class="string">'How to do lists in Vue'</span>,</span><br><span class="line">      author: <span class="string">'Jane Doe'</span>,</span><br><span class="line">      publishedAt: <span class="string">'2016-04-10'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>还可以用第三个参数作为索引：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(value, name, index) in object"</span>&gt;</span></span><br><span class="line">  &#123;&#123; index &#125;&#125;. &#123;&#123; name &#125;&#125;: &#123;&#123; value &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>索引.键名.键值</code><br>在遍历对象时，会按 <code>Object.keys()</code> 的结果遍历，但是不能保证它的结果在不同的 JavaScript 引擎下都一致。</p>
<h2 id="维护状态"><a href="#维护状态" class="headerlink" title="维护状态"></a>维护状态</h2><p><strong>不要使用对象或数组之类的非基本类型值作为 v-for 的 key。请用字符串或数值类型的值。</strong></p>
<h2 id="数组更新检测"><a href="#数组更新检测" class="headerlink" title="数组更新检测"></a>数组更新检测</h2><h2 id="显示过滤-排序后的结果"><a href="#显示过滤-排序后的结果" class="headerlink" title="显示过滤/排序后的结果"></a>显示过滤/排序后的结果</h2><p>有时我们想要显示一个数组经过过滤或排序后的结果，但是还不想改变原数组，这时可以创建一个计算属性，返回过滤或排序后的结果。例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"n in evenNumbers"</span>&gt;</span>&#123;&#123;n&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data:&#123;</span><br><span class="line">  numbers:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">&#125;</span><br><span class="line">computed:&#123;</span><br><span class="line">  evenNumbers:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.number.filter(</span><br><span class="line">      <span class="function"><span class="keyword">function</span>(<span class="params">number</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number % <span class="number">2</span> === <span class="number">0</span></span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Array.filter(function(currentValue,index,arr), thisValue)</code>方法<strong>创建一个新的数组</strong>，新数组中的元素是通过检查指定数组中符合条件的所有元素。<br>currentValue    必须。当前元素的值<br>index    可选。当前元素的索引值<br>arr    可选。当前元素属于的数组对象<br>thisValue    可选。对象作为该执行回调时使用，传递给函数，用作 “this” 的值。<br>如果省略了 thisValue ，”this” 的值为 “undefined”</p>
<p><code>filter()</code> 不会对空数组进行检测。<br><code>filter()</code> 不会改变原始数组。</p>
<p>在计算属性不适用的情况下 (例如，在嵌套 v-for 循环中) 你可以使用一个方法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"n in even(numbers)"</span>&gt;</span>&#123;&#123; n &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  numbers: [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ]</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">  even: <span class="function"><span class="keyword">function</span> (<span class="params">numbers</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> numbers.filter(<span class="function"><span class="keyword">function</span> (<span class="params">number</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> number % <span class="number">2</span> === <span class="number">0</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="在v-for里使用值范围"><a href="#在v-for里使用值范围" class="headerlink" title="在v-for里使用值范围"></a>在v-for里使用值范围</h2><p>v-for 也可以接受整数。在这种情况下，它会把模板重复对应次数。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">"n in 10"</span>&gt;</span>&#123;&#123; n &#125;&#125; <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>输出：<code>1 2 3 4 5 6 7 8 9 10</code></p>
<h2 id="在-lt-template-gt-上使用v-for"><a href="#在-lt-template-gt-上使用v-for" class="headerlink" title="在&lt;template&gt;上使用v-for"></a>在<code>&lt;template&gt;</code>上使用v-for</h2><p>用带v-for的<code>template</code>循环渲染一段包含多个元素的内容</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; item.msg &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"divider"</span> <span class="attr">role</span>=<span class="string">"presentation"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="v-for-与-v-if一同使用"><a href="#v-for-与-v-if一同使用" class="headerlink" title="v-for 与 v-if一同使用"></a>v-for 与 v-if一同使用</h2><p>当它们处于同一节点，v-for 的优先级比 v-if 更高，这意味着 v-if 将分别重复运行于每个 v-for 循环中。当你只想为部分项渲染节点时，这种优先级的机制会十分有用。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"todo in todos"</span> <span class="attr">v-if</span>=<span class="string">"!todo.isComplete"</span>&gt;</span></span><br><span class="line">  &#123;&#123; todo &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面的代码将只渲染未完成的 todo。</p>
<p>而如果你的目的是有条件地跳过循环的执行，那么可以将 v-if 置于外层元素 (或 <template>)上。如：</template></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-if</span>=<span class="string">"todos.length"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"todo in todos"</span>&gt;</span></span><br><span class="line">    &#123;&#123; todo &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>&gt;</span>No todos left!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="在组件上使用v-for"><a href="#在组件上使用v-for" class="headerlink" title="在组件上使用v-for"></a>在组件上使用v-for</h2><p>注意：2.2.0+ 的版本里，当在组件上使用 v-for 时，key 现在是必须的。(:key=”item.id”)<br><strong>然而，任何数据都不会被自动传递到组件里，因为组件有自己独立的作用域。为了把迭代数据传递到组件里，我们要使用 prop：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-for</span>=<span class="string">"(item, index) in items"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-bind:item</span>=<span class="string">"item"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-bind:index</span>=<span class="string">"index"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-bind:key</span>=<span class="string">"item.id"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>不自动将 item 注入到组件里的原因是，这会使得组件与 v-for 的运作紧密耦合。明确组件数据的来源能够使组件在其他场合重复使用。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span></span></span><br><span class="line"><span class="tag">    <span class="attr">is</span>=<span class="string">"todo-item"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-for</span>=<span class="string">"(todo, index) in todos"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-bind:key</span>=<span class="string">"todo.id"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-bind:title</span>=<span class="string">"todo.title"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-on:remove</span>=<span class="string">"todos.splice(index, 1)"</span></span></span><br><span class="line"><span class="tag">  &gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意这里的 is=”todo-item” 属性。这种做法在使用 DOM 模板时是十分必要的，因为在<code>&lt;ul&gt;</code>元素内只有<code>&lt;li&gt;</code> 元素会被看作有效内容。这样做实现的效果与<code>&lt;todo-item&gt;</code> 相同，但是可以避开一些潜在的浏览器解析错误。</p>
<h1 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h1><h2 id="监听事件"><a href="#监听事件" class="headerlink" title="监听事件"></a>监听事件</h2><p>v-on监听DOM事件</p>
<h2 id="事件处理方法"><a href="#事件处理方法" class="headerlink" title="事件处理方法"></a>事件处理方法</h2><h2 id="内联处理器中的方法"><a href="#内联处理器中的方法" class="headerlink" title="内联处理器中的方法"></a>内联处理器中的方法</h2><p>有时也需要在内联语句处理器中访问原始的 DOM 事件。可以用特殊变量 <code>$event</code> 把它传入方法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"warn('Form cannot be submitted yet.', $event)"</span>&gt;</span></span><br><span class="line">  Submit</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  warn: <span class="function"><span class="keyword">function</span> (<span class="params">message, event</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 现在我们可以访问原生事件对象</span></span><br><span class="line">    <span class="keyword">if</span> (event) event.preventDefault()</span><br><span class="line">    alert(message)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h2><ul>
<li>.stop</li>
<li>.prevent</li>
<li>.capture</li>
<li>.self</li>
<li>.once</li>
<li>.passive</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 阻止单击事件继续传播 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 提交事件不再重载页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">"onSubmit"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 修饰符可以串联 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop.prevent</span>=<span class="string">"doThat"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 只有修饰符 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 添加事件监听器时使用事件捕获模式 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 即元素自身触发的事件先在此处理，然后才交由内部元素进行处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.capture</span>=<span class="string">"doThis"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 只当在 event.target 是当前元素自身时触发处理函数 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 即事件不是从内部元素触发的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.self</span>=<span class="string">"doThat"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2.1.4新增 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 点击事件将只会触发一次，不像其它只能对原生的 DOM 事件起作用的修饰符，.once 修饰符还能被用到自定义的组件事件上。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.once</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2.3.0新增 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 滚动事件的默认行为 (即滚动行为) 将会立即触发 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 而不会等待 `onScroll` 完成  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这其中包含 `event.preventDefault()` 的情况 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Vue 还对应 addEventListener 中的 passive 选项提供了 .passive 修饰符。 这个 .passive 修饰符尤其能够提升移动端的性能。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:scroll.passive</span>=<span class="string">"onScroll"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li>使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生。因此，用 v-on:click.prevent.self 会阻止所有的点击，而 v-on:click.self.prevent 只会阻止对元素自身的点击。</li>
<li>不要把 .passive 和 .prevent 一起使用，因为 .prevent 将会被忽略，同时浏览器可能会向你展示一个警告。请记住，.passive 会告诉浏览器你不想阻止事件的默认行为。</li>
</ul>
<h2 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h2><p>在监听键盘事件时，我们经常需要检查详细的按键。Vue 允许为 v-on 在监听键盘事件时添加按键修饰符：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 只有在 `key` 是 `Enter` 时调用 `vm.submit()` --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.enter</span>=<span class="string">"submit"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>你可以直接将 KeyboardEvent.key 暴露的任意有效按键名转换为 kebab-case 来作为修饰符。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.page-down</span>=<span class="string">"onPageDown"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在上述示例中，处理函数只会在 <code>$event.key</code> 等于 PageDown 时被调用。</p>
<h3 id="按键码"><a href="#按键码" class="headerlink" title="按键码"></a>按键码</h3><p>keyCode 的事件用法已经被废弃了并可能不会被最新的浏览器支持。</p>
<p>使用 keyCode 特性也是允许的：<br><code>&lt;input v-on:keyup.13=&quot;submit&quot;&gt;</code><br>为了在必要的情况下支持<em>旧浏览器</em>，Vue 提供了绝大多数常用的按键码的别名：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.enter</span><br><span class="line">.tab</span><br><span class="line">.delete (捕获“删除”和“退格”键)</span><br><span class="line">.esc</span><br><span class="line">.space</span><br><span class="line">.up</span><br><span class="line">.down</span><br><span class="line">.left</span><br><span class="line">.right</span><br></pre></td></tr></table></figure>

<p>有一些按键 (.esc 以及所有的方向键) 在 IE9 中有不同的 key 值, 如果你想支持 IE9，这些内置的别名应该是首选。</p>
<p>你还可以通过全局 config.keyCodes 对象自定义按键修饰符别名：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可以使用 `v-on:keyup.f1`</span></span><br><span class="line">Vue.config.keyCodes.f1 = <span class="number">112</span></span><br></pre></td></tr></table></figure>

<h2 id="系统修饰键"><a href="#系统修饰键" class="headerlink" title="系统修饰键"></a>系统修饰键</h2><p><a href="https://cn.vuejs.org/v2/guide/events.html#%E7%B3%BB%E7%BB%9F%E4%BF%AE%E9%A5%B0%E9%94%AE" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/events.html#%E7%B3%BB%E7%BB%9F%E4%BF%AE%E9%A5%B0%E9%94%AE</a><br>可以用如下修饰符来实现仅在按下相应按键时才触发鼠标或键盘事件的监听器。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.ctrl</span><br><span class="line">.alt</span><br><span class="line">.shift</span><br><span class="line">.meta</span><br></pre></td></tr></table></figure>

<p>注意：在 Mac 系统键盘上，meta 对应 command 键 (⌘)。在 Windows 系统键盘 meta 对应 Windows 徽标键 (⊞)。在 Sun 操作系统键盘上，meta 对应实心宝石键 (◆)。在其他特定键盘上，尤其在 MIT 和 Lisp 机器的键盘、以及其后继产品，比如 Knight 键盘、space-cadet 键盘，meta 被标记为“META”。在 Symbolics 键盘上，meta 被标记为“META”或者“Meta”。</p>
<p>例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Alt + C --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.alt.67</span>=<span class="string">"clear"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Ctrl + Click --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click.ctrl</span>=<span class="string">"doSomething"</span>&gt;</span>Do something<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>请注意修饰键与常规按键不同，在和 keyup 事件一起用时，事件触发时修饰键必须处于按下状态。换句话说，只有在按住 ctrl 的情况下释放其它按键，才能触发 keyup.ctrl。而单单释放 ctrl 也不会触发事件。如果你想要这样的行为，请为 ctrl 换用 keyCode：keyup.17。</strong></p>
<h3 id="exact修饰符"><a href="#exact修饰符" class="headerlink" title=".exact修饰符"></a>.exact修饰符</h3><p>.exact 修饰符允许你控制由精确的系统修饰符组合触发的事件。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 即使 Alt 或 Shift 被一同按下时也会触发 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.ctrl</span>=<span class="string">"onClick"</span>&gt;</span>A<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 有且只有 Ctrl 被按下的时候才触发 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.ctrl.exact</span>=<span class="string">"onCtrlClick"</span>&gt;</span>A<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 没有任何系统修饰符被按下的时候才触发 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.exact</span>=<span class="string">"onClick"</span>&gt;</span>A<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="鼠标按钮修饰符"><a href="#鼠标按钮修饰符" class="headerlink" title="鼠标按钮修饰符"></a>鼠标按钮修饰符</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.left</span><br><span class="line">.right</span><br><span class="line">.middle</span><br></pre></td></tr></table></figure>

<p>这些修饰符会限制处理函数仅响应特定的鼠标按钮。</p>
<h1 id="表单输入绑定"><a href="#表单输入绑定" class="headerlink" title="表单输入绑定"></a>表单输入绑定</h1><p>注意：v-model 会忽略所有表单元素的 value、checked、selected 特性的初始值而总是将 Vue 实例的数据作为数据来源。你应该通过 JavaScript 在组件的 data 选项中声明初始值。</p>
<p>v-model 在内部为不同的输入元素使用不同的属性并抛出不同的事件：</p>
<ul>
<li>text 和 textarea 元素使用 value 属性和 input 事件；</li>
<li>checkbox 和 radio 使用 checked 属性和 change 事件；</li>
<li>select 字段将 value 作为 prop 并将 change 作为事件。</li>
</ul>
<p><em>对于需要使用输入法 (如中文、日文、韩文等) 的语言，你会发现 v-model 不会在输入法组合文字过程中得到更新(输入拼音选择文字前不会更新)。如果你也想处理这个过程，请使用 input 事件。</em></p>
<p>在文本区域插值 (<code>&lt;textarea&gt;&lt;/textarea&gt;</code>) 并不会生效，应用 v-model 来代替。</p>
<h2 id="值绑定"><a href="#值绑定" class="headerlink" title="值绑定"></a>值绑定</h2><h2 id="修饰符-1"><a href="#修饰符-1" class="headerlink" title="修饰符"></a>修饰符</h2><h3 id="lazy"><a href="#lazy" class="headerlink" title=".lazy"></a>.lazy</h3><p>在默认情况下，v-model 在每次 input 事件触发后将输入框的值与数据进行同步 (除了上述输入法组合文字时)。你可以添加 lazy 修饰符，从而转变为使用 change 事件进行同步：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在“change”时而非“input”时更新 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.lazy</span>=<span class="string">"msg"</span> &gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="number"><a href="#number" class="headerlink" title=".number"></a>.number</h3><p>如果想自动将用户的输入值转为数值类型，可以给 v-model 添加 number 修饰符：</p>
<p><code>&lt;input v-model.number=&quot;age&quot; type=&quot;number&quot;&gt;</code><br>这通常很有用，因为即使在 type=”number” 时，HTML 输入元素的值也总会返回字符串。如果这个值无法被 parseFloat() 解析，则会返回原始的值。</p>
<h3 id="trim"><a href="#trim" class="headerlink" title=".trim"></a>.trim</h3><p>如果要自动过滤用户输入的首尾空白字符，可以给 v-model 添加 trim 修饰符：</p>
<p><code>&lt;input v-model.trim=&quot;msg&quot;&gt;</code></p>
<h1 id="组件基础"><a href="#组件基础" class="headerlink" title="组件基础"></a>组件基础</h1><h2 id="data必须是一个函数"><a href="#data必须是一个函数" class="headerlink" title="data必须是一个函数"></a>data必须是一个函数</h2><p>当我们定义这个 <code>&lt;button-counter&gt;</code> 组件时，你可能会发现它的 data 并不是像这样直接提供一个对象：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  count: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>取而代之的是，一个组件的 data 选项必须是一个函数，因此每个实例可以维护一份被返回对象的独立的拷贝：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果 Vue 没有这条规则，点击一个按钮就可能会互相影响data。</p>


<h2 id="全局注册-amp-局部注册"><a href="#全局注册-amp-局部注册" class="headerlink" title="全局注册 &amp; 局部注册"></a>全局注册 &amp; 局部注册</h2><p>全局注册</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'my-component-name'</span>, &#123;</span><br><span class="line">  <span class="comment">// ... options ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>全局注册的组件可以用在其被注册之后的任何 (通过 new Vue) 新创建的 Vue 根实例，也包括其组件树中的所有子组件的模板中。</p>
<h2 id="通过Prop向子组件传递数据"><a href="#通过Prop向子组件传递数据" class="headerlink" title="通过Prop向子组件传递数据"></a>通过Prop向子组件传递数据</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'blog-post'</span>, &#123;</span><br><span class="line">  props: [<span class="string">'title'</span>],</span><br><span class="line">  template: <span class="string">'&lt;h3&gt;&#123;&#123; title &#125;&#125;&lt;/h3&gt;'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>一个组件默认可以拥有任意数量的 prop，任何值都可以传递给任何 prop。<br>一个 prop 被注册之后，你就可以像这样把数据作为一个自定义特性传递进来：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">title</span>=<span class="string">"My journey with Vue"</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">title</span>=<span class="string">"Blogging with Vue"</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">title</span>=<span class="string">"Why Vue is so fun"</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="单个根元素"><a href="#单个根元素" class="headerlink" title="单个根元素"></a>单个根元素</h2><p>可以合并到一个对象中通过prop发送</p>
<h2 id="监听子组件事件"><a href="#监听子组件事件" class="headerlink" title="监听子组件事件"></a>监听子组件事件</h2><p>$emit</p>
<h2 id="使用组件抛出一个值"><a href="#使用组件抛出一个值" class="headerlink" title="使用组件抛出一个值"></a>使用组件抛出一个值</h2><p>有的时候用一个事件来抛出一个特定的值是非常有用的。例如我们可能想让 <code>&lt;blog-post&gt;</code> 组件决定它的文本要放大多少。这时可以使用 $emit 的第二个参数来提供这个值：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"$emit('enlarge-text', 0.1)"</span>&gt;</span></span><br><span class="line">  Enlarge text</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后当在父级组件监听这个事件的时候，我们可以通过 <code>$event</code> 访问到被抛出的这个值：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blog-post</span></span></span><br><span class="line"><span class="tag">  <span class="attr">...</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:enlarge-text</span>=<span class="string">"postFontSize += $event"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>或者，如果这个事件处理函数是一个方法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blog-post</span></span></span><br><span class="line"><span class="tag">  <span class="attr">...</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:enlarge-text</span>=<span class="string">"onEnlargeText"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>那么这个值将会作为第一个参数传入这个方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  onEnlargeText: <span class="function"><span class="keyword">function</span> (<span class="params">enlargeAmount</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.postFontSize += enlargeAmount</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="在组件上使用v-model"><a href="#在组件上使用v-model" class="headerlink" title="在组件上使用v-model"></a>在组件上使用v-model</h3><p>自定义事件也可以用于创建支持 <code>v-model</code> 的自定义输入组件。记住：<br><code>&lt;input v-model=&quot;searchText&quot;&gt;</code><br>等价于：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-bind:value</span>=<span class="string">"searchText"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:input</span>=<span class="string">"searchText = $event.target.value"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br></pre></td></tr></table></figure>

<p>当用在组件上时，v-model 则会这样：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">custom-input</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-bind:value</span>=<span class="string">"searchText"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:input</span>=<span class="string">"searchText = $event"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">custom-input</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>将其 value 特性绑定到一个名叫 value 的 prop 上<br>在其 input 事件被触发时，将新的值通过自定义的 input 事件抛出<br>写成代码之后是这样的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">'custom-input'</span>, &#123;</span><br><span class="line">  props: [<span class="string">'value'</span>],</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;input</span></span><br><span class="line"><span class="string">      v-bind:value="value"</span></span><br><span class="line"><span class="string">      v-on:input="$emit('input', $event.target.value)"</span></span><br><span class="line"><span class="string">    &gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>现在 v-model 就应该可以在这个组件上完美地工作起来了：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">custom-input</span> <span class="attr">v-model</span>=<span class="string">"searchText"</span>&gt;</span><span class="tag">&lt;/<span class="name">custom-input</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><a href="https://cn.vuejs.org/v2/guide/components.html#%E7%9B%91%E5%90%AC%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BA%8B%E4%BB%B6" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/components.html#%E7%9B%91%E5%90%AC%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BA%8B%E4%BB%B6</a></p>
<h2 id="通过插槽分发内容"><a href="#通过插槽分发内容" class="headerlink" title="通过插槽分发内容"></a>通过插槽分发内容</h2><p><strong>slot</strong></p>
<h2 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h2><p><strong>is</strong></p>
<h2 id="解析DOM模版时的注意事项"><a href="#解析DOM模版时的注意事项" class="headerlink" title="解析DOM模版时的注意事项"></a>解析DOM模版时的注意事项</h2><p>有些 HTML 元素，诸如 <code>&lt;ul&gt;</code>、<code>&lt;ol&gt;</code>、<code>&lt;table&gt;</code> 和 <code>&lt;select&gt;</code>，对于哪些元素可以出现在其内部是有严格限制的。而有些元素，诸如 <code>&lt;li&gt;</code>、<code>&lt;tr&gt;</code>和 <code>&lt;option&gt;</code>，只能出现在其它某些特定的元素内部。</p>
<p>这会导致我们使用这些有约束条件的元素时遇到一些问题。例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">blog-post-row</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post-row</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个自定义组件 <code>&lt;blog-post-row&gt;</code> 会被作为无效的内容提升到外部，并导致最终渲染结果出错。幸好这个特殊的 is 特性给了我们一个变通的办法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span> <span class="attr">is</span>=<span class="string">"blog-post-row"</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>需要注意的是如果我们从以下来源使用模板的话，这条限制是不存在的：</p>
<ul>
<li>字符串(例如:<code>template:&#39;...&#39;</code>)</li>
<li>单文件组件(.vue)</li>
<li><code>&lt;script type=&quot;text/x-template&quot;&gt;</code></li>
</ul>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>echarts</title>
    <url>/uncategorized/echarts/</url>
    <content><![CDATA[<h1 id="Echarts"><a href="#Echarts" class="headerlink" title="Echarts"></a>Echarts</h1><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p>ECharts，一个使用 JavaScript 实现的开源可视化库，可以流畅的运行在 PC 和移动设备上，兼容当前绝大部分浏览器（IE8/9/10/11，Chrome，Firefox，Safari等）</p>
]]></content>
  </entry>
  <entry>
    <title>hexo搭建博客</title>
    <url>/hexo/hexoBuild/</url>
    <content><![CDATA[<h4 id="01-source"><a href="#01-source" class="headerlink" title="01. source"></a>01. source</h4><p>资源文件夹是存放用户资源的地方。除 <em>posts 文件夹之外，开头命名为</em> (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。</p>
<h4 id="02-scaffolds"><a href="#02-scaffolds" class="headerlink" title="02. scaffolds"></a>02. scaffolds</h4><p>模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</p>
<p>Hexo的模板是指在新建的markdown文件中默认填充的内容。例如，如果您修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
