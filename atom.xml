<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Gzy&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/6d800b9bdea894ae91a0c1cdb20f4c2e</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://glooo.fun/"/>
  <updated>2019-12-23T09:17:10.000Z</updated>
  <id>http://glooo.fun/</id>
  
  <author>
    <name>Gzy</name>
    <email>guozheyuan@xiaomi.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Typescript学习</title>
    <link href="http://glooo.fun/typescript/typescript/"/>
    <id>http://glooo.fun/typescript/typescript/</id>
    <published>2019-12-20T07:48:48.000Z</published>
    <updated>2019-12-23T09:17:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="typescript"><a href="#typescript" class="headerlink" title="typescript"></a>typescript</h1><p>typescript是Javascript的一个超集，主要提供了类型系统和ES6的支持，由微软开发。<br>比JS多了接口、泛型、类、枚举类型等概念。<br>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g typescript</span><br></pre></td></tr></table></figure><p>以上命令会在全局环境下安装 <code>tsc</code> 命令，安装完成之后，我们就可以在任何地方执行 <code>tsc</code> 命令了。<br><font color="red">编译</font>一个 TypeScript 文件很简单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc hello.ts</span><br></pre></td></tr></table></figure><p>我们约定使用 TypeScript 编写的文件以 <code>.ts</code> 为后缀，用 TypeScript 编写 React 时，以 <code>.tsx</code> 为后缀。</p><h1 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h1><p>TypeScript 最大的优势便是增强了编辑器和 IDE 的功能，包括代码补全、接口提示、跳转到定义、重构等。</p><p>推荐使用 <a href="https://code.visualstudio.com/" target="_blank" rel="noopener"><strong>Visual Studio Code</strong></a></p><p>它是一款开源，跨终端的轻量级编辑器，内置了 TypeScript 支持。另外，它本身也由 typescript 编写。</p><a id="more"></a><h1 id="Hello-Typescript"><a href="#Hello-Typescript" class="headerlink" title="Hello Typescript"></a>Hello Typescript</h1><p>TypeScript 中，使用 <code>:</code> 指定变量的类型，<code>:</code> 的前后有没有空格都可以。</p><p>TypeScript 只会进行静态检查，如果发现有错误，编译的时候就会报错。</p><p>TypeScript 编译的时候即使报错了，还是会生成编译结果，我们仍然可以使用这个编译之后的文件。</p><p>如果要在报错的时候终止 js 文件的生成，可以在 tsconfig.json 中配置 noEmitOnError 即可。关于 tsconfig.json，请参阅<a href="https://zhongsp.gitbooks.io/typescript-handbook/content/doc/handbook/tsconfig.json.html" target="_blank" rel="noopener">官方手册（中文版）</a>。</p><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><ul><li>原始数据类型</li><li>任意值</li><li>类型推论</li><li>联合类型</li><li>对象的类型——接口</li><li>数组的类型</li><li>函数的类型</li><li>类型断言</li><li>声明文件</li><li>内置对象</li></ul><h2 id="原始数据类型"><a href="#原始数据类型" class="headerlink" title="原始数据类型"></a>原始数据类型</h2><p>JavaScript 的类型分为两种：<strong>原始数据类型</strong>（Primitive data types）和对象类型（Object types）。<br>原始数据类型包括：<strong>布尔值</strong>、<strong>数值</strong>、<strong>字符串</strong>、<strong>null</strong>、<strong>undefined</strong> 以及 ES6 中的新类型 <strong>Symbol</strong></p><h3 id="布尔"><a href="#布尔" class="headerlink" title="布尔"></a>布尔</h3><h3 id="数值"><a href="#数值" class="headerlink" title="数值"></a>数值</h3><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h3 id="空值"><a href="#空值" class="headerlink" title="空值"></a>空值</h3><p>JavaScript 没有空值（Void）的概念，在 TypeScript 中，可以用 void 表示没有任何返回值的函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">alertName</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">    alert(<span class="string">'My name is Tom'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明一个 void 类型的变量没有什么用，因为你只能将它赋值为 <strong>undefined</strong> 和 <strong>null</strong> ：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> unusable: <span class="keyword">void</span> = <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure><h3 id="Null和Undefined"><a href="#Null和Undefined" class="headerlink" title="Null和Undefined"></a>Null和Undefined</h3><p>在 TypeScript 中，可以使用 <strong>null</strong> 和 <strong>undefined</strong> 来定义这两个原始数据类型：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> u: <span class="literal">undefined</span> = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> n: <span class="literal">null</span> = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p>与 void 的区别是，undefined 和 null 是所有类型的子类型。也就是说 undefined 类型的变量，可以赋值给 number 类型的变量：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这样不会报错</span></span><br><span class="line"><span class="keyword">let</span> num: number = <span class="literal">undefined</span>;</span><br><span class="line"><span class="comment">// 这样也不会报错</span></span><br><span class="line"><span class="keyword">let</span> u: <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> num: number = u;</span><br></pre></td></tr></table></figure><p>而 void 类型的变量不能赋值给 number 类型的变量：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> u: <span class="keyword">void</span>;</span><br><span class="line"><span class="keyword">let</span> num: number = u;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Type 'void' is not assignable to type 'number'.</span></span><br></pre></td></tr></table></figure><h2 id="任意值"><a href="#任意值" class="headerlink" title="任意值"></a>任意值</h2><p>任意值（Any）用来表示允许赋值为<strong>任意类型</strong>。</p><h3 id="什么是任意值类型"><a href="#什么是任意值类型" class="headerlink" title="什么是任意值类型?"></a>什么是任意值类型?</h3><p>如果是一个普通类型，在赋值过程中改变类型是不被允许的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myFavoriteNumber: string = <span class="string">'seven'</span>;</span><br><span class="line">myFavoriteNumber = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts(2,1): error TS2322: Type 'number' is not assignable to type 'string'.</span></span><br></pre></td></tr></table></figure><p>但如果是 any 类型，则允许被赋值为任意类型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myFavoriteNumber: any = <span class="string">'seven'</span>;</span><br><span class="line">myFavoriteNumber = <span class="number">7</span>;</span><br></pre></td></tr></table></figure><h3 id="任意值的属性和方法"><a href="#任意值的属性和方法" class="headerlink" title="任意值的属性和方法"></a>任意值的属性和方法</h3><p>在任意值上访问任何属性都是允许的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> anyThing: any = <span class="string">'hello'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(anyThing.myName);</span><br><span class="line"><span class="built_in">console</span>.log(anyThing.myName.firstName);</span><br></pre></td></tr></table></figure><p>也允许调用任何方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> anyThing: any = <span class="string">'Tom'</span>;</span><br><span class="line">anyThing.setName(<span class="string">'Jerry'</span>);</span><br><span class="line">anyThing.setName(<span class="string">'Jerry'</span>).sayHello();</span><br><span class="line">anyThing.myName.setFirstName(<span class="string">'Cat'</span>);</span><br></pre></td></tr></table></figure><blockquote><p>可以认为，声明一个变量为任意值之后，对它的任何操作，返回值的类型都是<strong>任意值</strong>。</p></blockquote><h3 id="未声明类型的变量"><a href="#未声明类型的变量" class="headerlink" title="未声明类型的变量"></a>未声明类型的变量</h3><p>变量如果在声明的时候，未指定其类型，那么它会被识别为任意值类型：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意：下面声明却未赋值的时候，才会被默认指定为任意类型；</span></span><br><span class="line"><span class="comment">// 如果声明后指定了值但未指定类型，ts就会自动进行类型推论，此时就不是任意类型(any)了。</span></span><br><span class="line"><span class="keyword">let</span> something; </span><br><span class="line">something = <span class="string">'seven'</span>;</span><br><span class="line">something = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">something.setName(<span class="string">'Tom'</span>);</span><br></pre></td></tr></table></figure><p>等价于</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> something: any;</span><br><span class="line">something = <span class="string">'seven'</span>;</span><br><span class="line">something = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">something.setName(<span class="string">'Tom'</span>);</span><br></pre></td></tr></table></figure><h2 id="类型推论"><a href="#类型推论" class="headerlink" title="类型推论"></a>类型推论</h2><p>如果没有明确的指定类型，那么 TypeScript 会依照类型推论（Type Inference）的规则推断出一个类型。</p><h3 id="什么是类型推论"><a href="#什么是类型推论" class="headerlink" title="什么是类型推论"></a>什么是类型推论</h3><p>以下代码虽然没有指定类型，但是会在编译的时候报错：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myFavoriteNumber = <span class="string">'seven'</span>; <span class="comment">// 声明并赋值，则自动识别类型为string，不是any类型</span></span><br><span class="line">myFavoriteNumber = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts(2,1): error TS2322: Type 'number' is not assignable to type 'string'.</span></span><br></pre></td></tr></table></figure><p>事实上，它等价于：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myFavoriteNumber: string = <span class="string">'seven'</span>;</span><br><span class="line">myFavoriteNumber = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts(2,1): error TS2322: Type 'number' is not assignable to type 'string'.</span></span><br></pre></td></tr></table></figure><p>TypeScript 会在没有明确的指定类型的时候推测出一个类型，这就是类型推论。</p><p><strong>如果定义的时候没有赋值，不管之后有没有赋值，都会被推断成 <code>any</code> 类型而完全不被类型检查：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myFavoriteNumber;</span><br><span class="line">myFavoriteNumber = <span class="string">'seven'</span>;</span><br><span class="line">myFavoriteNumber = <span class="number">7</span>;</span><br></pre></td></tr></table></figure><h2 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h2><p>联合类型（Union Types）表示取值可以为多种类型中的一种。</p><h2 id="对象的类型-接口"><a href="#对象的类型-接口" class="headerlink" title="对象的类型-接口"></a>对象的类型-接口</h2><h2 id="数组的类型"><a href="#数组的类型" class="headerlink" title="数组的类型"></a>数组的类型</h2><p>在 TypeScript 中，数组类型有多种定义方式，比较灵活。</p><h3 id="（常用）「类型-方括号」表示法"><a href="#（常用）「类型-方括号」表示法" class="headerlink" title="（常用）「类型 + 方括号」表示法"></a>（常用）「类型 + 方括号」表示法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fibonacci: number[] = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>];</span><br></pre></td></tr></table></figure><p>数组的项中不允许出现其他的类型：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fibonacci: number[] = [<span class="number">1</span>, <span class="string">'1'</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Type 'string' is not assignable to type 'number'.</span></span><br></pre></td></tr></table></figure><p>数组的一些方法的参数也会根据数组在定义时约定的类型进行限制：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fibonacci: number[] = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>];</span><br><span class="line">fibonacci.push(<span class="string">'8'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Argument of type '"8"' is not assignable to parameter of type 'number'.</span></span><br></pre></td></tr></table></figure><p>上例中，<code>push</code> 方法只允许传入 <code>number</code> 类型的参数，但是却传了一个 <code>string</code> 类型的参数，所以报错了。这里 ‘8’ 是一个字符串字面量类型，会在后续章节中详细介绍。</p><h3 id="数组泛型表示法：「Array」"><a href="#数组泛型表示法：「Array」" class="headerlink" title="数组泛型表示法：「Array」"></a>数组泛型表示法：「Array<elemtype>」</elemtype></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fibonacci: <span class="built_in">Array</span>&lt;number&gt; = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>];</span><br></pre></td></tr></table></figure><h3 id="用接口表示数组"><a href="#用接口表示数组" class="headerlink" title="用接口表示数组"></a>用接口表示数组</h3><p>接口也可以用来描述数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">interface NumberArray &#123;</span><br><span class="line">    [index: number]: number;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> fibonacci: NumberArray = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>];</span><br></pre></td></tr></table></figure><p>上面的NumberArray 表示：只要索引的类型是数字时，那么值的类型必须是数字。</p><blockquote><p>虽然接口也可以用来描述数组，但是我们一般不会这么做，因为这种方式比前两种方式复杂多了。<br>不过有一种情况例外，那就是它常用来表示类数组。</p></blockquote><h3 id="类数组"><a href="#类数组" class="headerlink" title="类数组"></a>类数组</h3><p>类数组（Array-like Object）不是数组类型，比如 arguments对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> args: number[] = <span class="built_in">arguments</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Type 'IArguments' is missing the following properties from type 'number[]': pop, push, concat, join, and 24 more.</span></span><br></pre></td></tr></table></figure><p>上例中，arguments 实际上是一个类数组，不能用普通的数组的方式来描述，而应该用接口：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> args: &#123;</span><br><span class="line">    [index: number]: number;</span><br><span class="line">    length: number;</span><br><span class="line">    callee: <span class="built_in">Function</span>;</span><br><span class="line">  &#125; = <span class="built_in">arguments</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，我们除了约束当索引的类型是数字时，值的类型必须是数字之外，也约束了它还有 length 和 callee 两个属性。<br>事实上常用的类数组都有自己的接口定义，如 IArguments, NodeList, HTMLCollection 等：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> args: IArguments = <span class="built_in">arguments</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>其中 <code>IArguments</code> 是 TypeScript 中定义好了的类型</strong>，它实际上就是：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">interface IArguments &#123;</span><br><span class="line">    [index: number]: any;</span><br><span class="line">    length: number;</span><br><span class="line">    callee: <span class="built_in">Function</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="any-在数组中的应用"><a href="#any-在数组中的应用" class="headerlink" title="any 在数组中的应用"></a>any 在数组中的应用</h3><p>一个比较常见的做法是，用 any 表示数组中允许出现任意类型：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list: any[] = [<span class="string">'xcatliu'</span>, <span class="number">25</span>, &#123; <span class="attr">website</span>: <span class="string">'http://xcatliu.com'</span> &#125;];</span><br></pre></td></tr></table></figure><h2 id="函数的类型"><a href="#函数的类型" class="headerlink" title="函数的类型"></a>函数的类型</h2><p>JS中有两种常见的定义函数的方式：</p><ul><li>函数声明</li><li>函数表达式</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 函数表达式</span></span><br><span class="line"><span class="keyword">let</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h3><p>一个函数有输入和输出，要在 TypeScript 中对其进行约束，需要把输入和输出都考虑到，其中函数声明的类型定义较简单：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x: number, y: number</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，输入多余的（或者少于要求的）参数，是不被允许的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x: number, y: number</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts(4,1): error TS2346: Supplied parameters do not match any signature of call target.</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x: number, y: number</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts(4,1): error TS2346: Supplied parameters do not match any signature of call target.</span></span><br></pre></td></tr></table></figure><h3 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h3><p>如果要我们现在写一个对函数表达式（Function Expression）的定义，可能会写成这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mySum = <span class="function"><span class="keyword">function</span> (<span class="params">x: number, y: number</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这是<strong>可以通过编译</strong>的，不过事实上，上面的代码<strong>只对等号右侧的匿名函数进行了类型定义</strong>，而等号左边的 <code>mySum</code> ，是通过赋值操作进行类型推论而推断出来的。如果需要我们手动给 mySum 添加类型，则应该是这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// !!!</span></span><br><span class="line"><span class="keyword">let</span> mySum: <span class="function">(<span class="params">x: number, y: number</span>) =&gt;</span> number = <span class="function"><span class="keyword">function</span> (<span class="params">x: number, y: number</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>在 TypeScript 的类型定义中，<code>=&gt;</code> 用来表示函数的定义，左边是输入类型，需要用括号括起来，右边是输出类型。</strong><br>在 ES6 中，=&gt; 叫做箭头函数。</p><h3 id="用接口定义函数的形状"><a href="#用接口定义函数的形状" class="headerlink" title="用接口定义函数的形状"></a>用接口定义函数的形状</h3><p>我们也可以使用接口的方式来定义一个函数需要符合的形状：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">interface SearchFunc &#123;</span><br><span class="line">    (source: string, <span class="attr">subString</span>: string): boolean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mySearch: SearchFunc;</span><br><span class="line">mySearch = <span class="function"><span class="keyword">function</span>(<span class="params">source: string, subString: string</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> source.search(subString) !== <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述<code>mySearch</code>函数需要满足接口中的条件：两个string类型的参数和一个bool类型的返回值。</p><h3 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h3><p>前面提到，输入多余的（或者少于要求的）参数，是不允许的。那么如何定义可选的参数呢？</p><p>与接口中的可选属性类似，我们用 <strong>?</strong> 表示可选的参数：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildName</span>(<span class="params">firstName: <span class="built_in">string</span>, lastName?: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (lastName) &#123;</span><br><span class="line">        <span class="keyword">return</span> firstName + <span class="string">' '</span> + lastName;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> firstName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> tomcat = buildName(<span class="string">'Tom'</span>, <span class="string">'Cat'</span>);</span><br><span class="line"><span class="keyword">let</span> tom = buildName(<span class="string">'Tom'</span>);</span><br></pre></td></tr></table></figure><p>需要注意的是，<strong>可选参数必须接在必需参数后面</strong>。换句话说，可选参数后面不允许再出现必需参数了：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildName</span>(<span class="params">firstName?: <span class="built_in">string</span>, lastName: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (firstName) &#123;</span><br><span class="line">        <span class="keyword">return</span> firstName + <span class="string">' '</span> + lastName;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> lastName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> tomcat = buildName(<span class="string">'Tom'</span>, <span class="string">'Cat'</span>);</span><br><span class="line"><span class="keyword">let</span> tom = buildName(<span class="literal">undefined</span>, <span class="string">'Tom'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.ts(1,40): error TS1016: A required parameter cannot follow an optional parameter.</span></span><br></pre></td></tr></table></figure><h3 id="参数默认值"><a href="#参数默认值" class="headerlink" title="参数默认值"></a>参数默认值</h3><p>在 ES6 中，我们允许给函数的参数添加默认值，TypeScript 会将添加了默认值的参数识别为<strong>可选参数</strong>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildName</span>(<span class="params">firstName: <span class="built_in">string</span>, lastName: <span class="built_in">string</span> = 'Cat'</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> firstName + <span class="string">' '</span> + lastName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> tomcat = buildName(<span class="string">'Tom'</span>, <span class="string">'Cat'</span>);</span><br><span class="line"><span class="keyword">let</span> tom = buildName(<span class="string">'Tom'</span>);</span><br></pre></td></tr></table></figure><p><strong>此时就不受「可选参数必须接在必需参数后面」的限制了</strong>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildName</span>(<span class="params">firstName: <span class="built_in">string</span> = 'Tom', lastName: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> firstName + <span class="string">' '</span> + lastName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> tomcat = buildName(<span class="string">'Tom'</span>, <span class="string">'Cat'</span>);</span><br><span class="line"><span class="keyword">let</span> cat = buildName(<span class="literal">undefined</span>, <span class="string">'Cat'</span>);</span><br></pre></td></tr></table></figure><h3 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h3><p>ES6 中，可以使用 …rest 的方式获取函数中的剩余参数（rest 参数）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">push</span>(<span class="params">array, ...items</span>) </span>&#123;</span><br><span class="line">    items.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">        array.push(item);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = [];</span><br><span class="line">push(a, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>事实上，items 是一个数组。所以我们可以用数组的类型来定义它：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">push</span>(<span class="params">array: any[], ...items: any[]</span>) </span>&#123;</span><br><span class="line">    items.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">        array.push(item);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = [];</span><br><span class="line">push(a, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>注意，rest 参数只能是最后一个参数。</p><h3 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h3><p>重载允许一个函数接受不同数量或类型的参数时，作出不同的处理。<br>比如，我们需要实现一个函数 reverse，输入数字 123 的时候，输出反转的数字 321，输入字符串 ‘hello’ 的时候，输出反转的字符串 ‘olleh’。<br>利用联合类型，我们可以这么实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span>(<span class="params">x: number | string</span>): <span class="title">number</span> | <span class="title">string</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">'number'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Number</span>(x.toString().split(<span class="string">''</span>).reverse().join(<span class="string">''</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">'string'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> x.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而这样有一个缺点，就是不能够精确的表达，输入为数字的时候，输出也应该为数字，输入为字符串的时候，输出也应该为字符串。<br>这时，我们可以使用重载定义多个 reverse 的函数类型：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span>(<span class="params">x: number</span>): <span class="title">number</span>;</span></span><br><span class="line"><span class="function"><span class="title">function</span> <span class="title">reverse</span>(<span class="params">x: string</span>): <span class="title">string</span>;</span></span><br><span class="line"><span class="function"><span class="title">function</span> <span class="title">reverse</span>(<span class="params">x: number | string</span>): <span class="title">number</span> | <span class="title">string</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">'number'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Number</span>(x.toString().split(<span class="string">''</span>).reverse().join(<span class="string">''</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">'string'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> x.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上例中，我们重复定义了多次函数 reverse，前几次都是函数定义，最后一次是函数实现。在编辑器的代码提示中，可以正确的看到前两个提示。</p><blockquote><p>注意：TypeScript 会优先从最前面的函数定义开始匹配，所以多个函数定义如果有包含关系，需要优先把精确的定义写在前面。</p></blockquote><h2 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;typescript&quot;&gt;&lt;a href=&quot;#typescript&quot; class=&quot;headerlink&quot; title=&quot;typescript&quot;&gt;&lt;/a&gt;typescript&lt;/h1&gt;&lt;p&gt;typescript是Javascript的一个超集，主要提供了类型系统和ES6的支持，由微软开发。&lt;br&gt;比JS多了接口、泛型、类、枚举类型等概念。&lt;br&gt;安装&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install -g typescript&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;以上命令会在全局环境下安装 &lt;code&gt;tsc&lt;/code&gt; 命令，安装完成之后，我们就可以在任何地方执行 &lt;code&gt;tsc&lt;/code&gt; 命令了。&lt;br&gt;&lt;font color=&quot;red&quot;&gt;编译&lt;/font&gt;一个 TypeScript 文件很简单：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tsc hello.ts&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;我们约定使用 TypeScript 编写的文件以 &lt;code&gt;.ts&lt;/code&gt; 为后缀，用 TypeScript 编写 React 时，以 &lt;code&gt;.tsx&lt;/code&gt; 为后缀。&lt;/p&gt;
&lt;h1 id=&quot;编辑器&quot;&gt;&lt;a href=&quot;#编辑器&quot; class=&quot;headerlink&quot; title=&quot;编辑器&quot;&gt;&lt;/a&gt;编辑器&lt;/h1&gt;&lt;p&gt;TypeScript 最大的优势便是增强了编辑器和 IDE 的功能，包括代码补全、接口提示、跳转到定义、重构等。&lt;/p&gt;
&lt;p&gt;推荐使用 &lt;a href=&quot;https://code.visualstudio.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Visual Studio Code&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;它是一款开源，跨终端的轻量级编辑器，内置了 TypeScript 支持。另外，它本身也由 typescript 编写。&lt;/p&gt;
    
    </summary>
    
      <category term="typescript" scheme="http://glooo.fun/categories/typescript/"/>
    
    
      <category term="typescript" scheme="http://glooo.fun/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>鼠标选中文本的样式，Css之selection</title>
    <link href="http://glooo.fun/css/css-selection/"/>
    <id>http://glooo.fun/css/css-selection/</id>
    <published>2019-12-18T03:12:11.000Z</published>
    <updated>2019-12-24T07:05:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="user-select"><a href="#user-select" class="headerlink" title="user-select"></a>user-select</h1><p>有时鼠标点按钮会造成 <em>文字被选中</em> 造成不好的用户体验，这时可以设置一个<code>user-select: none</code>来提高用户体验。</p><h1 id="selection"><a href="#selection" class="headerlink" title="::selection"></a>::selection</h1><p>有时，为了色彩搭配，需要用<code>::selection</code>来修改默认选中文字的颜色或背景颜色等；有时，也通过<code>::selection</code>设置选中高亮。<br>语法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">::selection</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">background</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 或采用下面局部的方式 */</span></span><br><span class="line"><span class="selector-class">.div</span><span class="selector-pseudo">::selection</span> &#123; <span class="comment">/* 无空格 */</span></span><br><span class="line">  <span class="attribute">color</span>:red;</span><br><span class="line">  <span class="attribute">background</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::selection</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>:red;</span><br><span class="line">  <span class="attribute">background</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：设置::selection的时候要设置在最外层显示的那个块(div,p,span等)上。</p></blockquote><p>并不是选中后所有css属性都可以触发。据测试，只有<code>background</code>和<code>color</code>可用作为高亮样式。<br>而且，目前这种方法支持 webkit 的浏览器、Firefox 和 IE10。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;user-select&quot;&gt;&lt;a href=&quot;#user-select&quot; class=&quot;headerlink&quot; title=&quot;user-select&quot;&gt;&lt;/a&gt;user-select&lt;/h1&gt;&lt;p&gt;有时鼠标点按钮会造成 &lt;em&gt;文字被选中&lt;/em&gt; 造成不好的用户体
      
    
    </summary>
    
      <category term="css" scheme="http://glooo.fun/categories/css/"/>
    
    
      <category term="css" scheme="http://glooo.fun/tags/css/"/>
    
      <category term="selection" scheme="http://glooo.fun/tags/selection/"/>
    
  </entry>
  
  <entry>
    <title>CSS右上角tag标签的实现方法</title>
    <link href="http://glooo.fun/css/css-left-top-tag/"/>
    <id>http://glooo.fun/css/css-left-top-tag/</id>
    <published>2019-12-17T02:44:08.000Z</published>
    <updated>2019-12-17T12:43:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>例如：</p><p>图片来自<a href="http://www.webfront-js.com/articaldetail/15.html" target="_blank" rel="noopener">http://www.webfront-js.com/articaldetail/15.html</a><br>又如：</p><p>这些样式是怎么实现的呢？我们来探讨下。<br>这一类地“标签”通常由CSS3的rotate来实现，且大多时候是通过一像素一像素地调节位置来实现。</p><p>画了个草图，大概就是有个大的div，大的div中要在右上角添加一个tag。先实现左边的css。<br>所以要把左边的图变成右边的，需要用到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">transform-origin: left 100%;</span><br><span class="line">transform: translate(29.29%, -100%) rotate(45deg);</span><br></pre></td></tr></table></figure><p>其中用到了<code>translate</code>的百分比属性，它与<code>margin</code>和<code>padding</code>不同，它的百分比是相对于它本身的宽高进行计算的。所以当我们不确定div高度的情况下，也可以通过<code>translateY(-100%)</code>来向上移动一个它本身高度的距离，即把它放在<code>big-div</code>上面。<code>translateX(29.29%)</code>，<code>29.29%</code>是上面计算的数值。<br>而且重要的一点是，要把旋转中心点设置在<code>.tag</code>的<code>div</code>的左下角，即<code>transform-origin: left -100%;</code>，第一个参数为水平，第二个参数为垂直。</p><p>抛此砖引你玉～<br>原文链接：<a href="http://www.webfront-js.com/articaldetail/15.html" target="_blank" rel="noopener">http://www.webfront-js.com/articaldetail/15.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;例如：&lt;/p&gt;

&lt;p&gt;图片来自&lt;a href=&quot;http://www.webfront-js.com/articaldetail/15.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.webfront-js.com/arti
      
    
    </summary>
    
      <category term="css" scheme="http://glooo.fun/categories/css/"/>
    
    
      <category term="css" scheme="http://glooo.fun/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>用CSS的border做一个三角形</title>
    <link href="http://glooo.fun/css/css-triangle/"/>
    <id>http://glooo.fun/css/css-triangle/</id>
    <published>2019-12-16T02:18:39.000Z</published>
    <updated>2019-12-17T09:49:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用CSS做一个三角形"><a href="#用CSS做一个三角形" class="headerlink" title="用CSS做一个三角形"></a>用CSS做一个三角形</h1><p>将一个div的宽度和高度设为0，接着设置边框样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.triangle</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">50px</span> solid black;</span><br><span class="line">  <span class="attribute">border-right</span>: <span class="number">50px</span> solid red;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">50px</span> solid yellow;</span><br><span class="line">  <span class="attribute">border-left</span>: <span class="number">50px</span> solid green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>border都为50px，并且不同颜色，结果如下图所示：</p><p>当height和width不为0时，</p><p>当其他边框设置为transparent(颜色和其父元素相同，即设置透明)时，就可以出现一个直角三角形（高50px，宽100px的三角形）。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.triangle</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">50px</span> solid black;</span><br><span class="line">  <span class="attribute">border-right</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">  <span class="attribute">border-left</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 下面代码更简洁 */</span></span><br><span class="line"><span class="selector-class">.triangle</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">  <span class="attribute">border-top-color</span>: black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果如下所示：</p><p>这样写出来的三角形实际上还是占据一个正方形的位置</p><p>为了使三角形所占空间尽可能缩小，我们可以<font color="pink">不设置下边框</font></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.triangle</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">  <span class="attribute">border-top-color</span>: black;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，三角形所占区域就变为了：</p><p>同理还可以画出各种三角形：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 上图从左到右，从上到下 */</span></span><br><span class="line"><span class="selector-class">.triangle1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">50px</span> solid <span class="built_in">rgb</span>(<span class="number">246</span>, <span class="number">255</span>, <span class="number">227</span>);</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">200px</span> solid black;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.triangle2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">50px</span> solid <span class="built_in">rgb</span>(<span class="number">246</span>, <span class="number">255</span>, <span class="number">227</span>);</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">200px</span> solid red;</span><br><span class="line">  <span class="attribute">border-top</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.triangle3</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">50px</span> solid <span class="built_in">rgb</span>(<span class="number">246</span>, <span class="number">255</span>, <span class="number">227</span>);</span><br><span class="line">  <span class="attribute">border-left</span>: <span class="number">200px</span> solid yellow;</span><br><span class="line">  <span class="attribute">border-right</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.triangle4</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">50px</span> solid <span class="built_in">rgb</span>(<span class="number">246</span>, <span class="number">255</span>, <span class="number">227</span>);</span><br><span class="line">  <span class="attribute">border-right</span>: <span class="number">200px</span> solid green;</span><br><span class="line">  <span class="attribute">border-left</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.triangle5</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">50px</span> solid <span class="built_in">rgb</span>(<span class="number">246</span>, <span class="number">255</span>, <span class="number">227</span>);</span><br><span class="line">  <span class="attribute">border-right</span>: <span class="number">50px</span> solid green;</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">50px</span> solid yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.triangle6</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">50px</span> solid <span class="built_in">rgb</span>(<span class="number">246</span>, <span class="number">255</span>, <span class="number">227</span>);</span><br><span class="line">  <span class="attribute">border-right</span>: <span class="number">50px</span> solid green;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">50px</span> solid yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.triangle7</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">50px</span> solid <span class="built_in">rgb</span>(<span class="number">246</span>, <span class="number">255</span>, <span class="number">227</span>);</span><br><span class="line">  <span class="attribute">border-left</span>: <span class="number">50px</span> solid yellow;</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">50px</span> solid yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.triangle8</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">50px</span> solid <span class="built_in">rgb</span>(<span class="number">246</span>, <span class="number">255</span>, <span class="number">227</span>);</span><br><span class="line">  <span class="attribute">border-left</span>: <span class="number">50px</span> solid green;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">50px</span> solid yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>推荐一篇<a href="https://www.cnblogs.com/luoyeguichen/p/5029752.html" target="_blank" rel="noopener">CSS实现三角形图标原理解析</a></p><h1 id="CSS实现右上角tag"><a href="#CSS实现右上角tag" class="headerlink" title="CSS实现右上角tag"></a>CSS实现右上角tag</h1><p>用CSS实现右上角小tag的方法详见另一篇：<a href="http://glooo.fun/css/background-image/css-left-top-tag/">CSS右上角tag标签的实现方法</a><br>例子：</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;用CSS做一个三角形&quot;&gt;&lt;a href=&quot;#用CSS做一个三角形&quot; class=&quot;headerlink&quot; title=&quot;用CSS做一个三角形&quot;&gt;&lt;/a&gt;用CSS做一个三角形&lt;/h1&gt;&lt;p&gt;将一个div的宽度和高度设为0，接着设置边框样式&lt;/p&gt;
&lt;figure c
      
    
    </summary>
    
      <category term="css" scheme="http://glooo.fun/categories/css/"/>
    
    
      <category term="css" scheme="http://glooo.fun/tags/css/"/>
    
      <category term="border" scheme="http://glooo.fun/tags/border/"/>
    
      <category term="三角形" scheme="http://glooo.fun/tags/%E4%B8%89%E8%A7%92%E5%BD%A2/"/>
    
      <category term="triangle" scheme="http://glooo.fun/tags/triangle/"/>
    
  </entry>
  
  <entry>
    <title>background-image属性学习</title>
    <link href="http://glooo.fun/css/background-image/"/>
    <id>http://glooo.fun/css/background-image/</id>
    <published>2019-12-12T07:06:08.000Z</published>
    <updated>2019-12-17T02:54:32.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>background-image</code>是一种常见的CSS添加背景图片的方式<br>常用的还有<code>&lt;img&gt;</code>标签</p><p>两种方式都可以，但是<code>background-image</code>多用于给元素添加<strong>背景</strong>图片，<code>&lt;img&gt;</code>则用于添加图片，实际应用中，<code>background-image</code>应用更广泛，通常配合div一起修改css样式。</p><p>但是有时会出现404，问题多半出在引用图片的路径上。如果是本机跑跑项目，绝对路径没有问题，但是项目越大，代码逻辑越复杂，绝对路径就很影响代码的维护与可读性。<br>所以，建议用相对路径。<br>在webpack搭建的vue项目中，图片一般放在<code>src/assets</code>或<code>src/static</code>中，项目中常常也有放在第三方图床上动态加载的。</p><hr><blockquote><p><strong>assets/static文件夹的区别</strong><br>&emsp;相同点：资源在html中使用，都是可以的。<br>&emsp;不同点：使用assets下面的资源，在js中使用的话，路径要经过webpack中file-loader编译，路径不能直接写。<br>&emsp;assets中的文件会经过webpack打包，重新编译，推荐该方式。而static中的文件，不会经过编译。项目在经过打包后，会生成dist文件夹，static中的文件只是复制一遍而已。简单来说，static中建议放一些外部第三方，自己的放到assets，别人的放到static中。<br>注意：如果把图片放在assets与static中，html页面可以使用；但在动态绑定中，assets路径的图片会加载失败，因为webpack使用的是commenJS规范，必须使用require才可以，具体代码如下：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"hook"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h3</span>&gt;</span>演示钩子的组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>直接使用路径<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../../assets/11.png"</span> <span class="attr">alt</span>=<span class="string">"图片加载失败"</span> <span class="attr">title</span>=<span class="string">"assets中的图片"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../../../static/11.png"</span> <span class="attr">alt</span>=<span class="string">"图片加载失败"</span> <span class="attr">title</span>=<span class="string">"static中的图片"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>动态绑定路径<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"assetsURL"</span> <span class="attr">alt</span>=<span class="string">"图片加载失败"</span> <span class="attr">title</span>=<span class="string">"assets中的图片"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"staticURL"</span> <span class="attr">alt</span>=<span class="string">"图片加载失败"</span> <span class="attr">title</span>=<span class="string">"static中的图片"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data ()&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    assetsURL: <span class="built_in">require</span>(<span class="string">'../../assets/11.png'</span>), <span class="comment">// 此处有require</span></span><br><span class="line">    staticURL: <span class="string">'../../../static/11.png'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>原文链接：<a href="https://blog.csdn.net/qq_41115965/article/details/80796211" target="_blank" rel="noopener">https://blog.csdn.net/qq_41115965/article/details/80796211</a></p><hr><h1 id="background"><a href="#background" class="headerlink" title="background"></a>background</h1><p>使用<code>background-image</code>时，通常要配合</p><h2 id="background-image-url-lt-url-gt-背景图片路径"><a href="#background-image-url-lt-url-gt-背景图片路径" class="headerlink" title="background-image: url( &lt;url&gt; ) - 背景图片路径"></a><code>background-image: url( &lt;url&gt; )</code> - 背景图片路径</h2><ul><li>元素的背景是元素的总大小，包括填充(content)和边界(border)和内边距(padding)，（但不包括外边距）。</li><li>默认情况下，background-image放置在元素的<strong>左上角</strong>，并<strong>重复显示</strong>在垂直和水平方向。</li><li>提示：请设置一种可用的背景颜色，这样的话，假如背景图像不可用，可以使用背景色带代替。<h3 id="属性值"><a href="#属性值" class="headerlink" title="属性值"></a>属性值</h3></li></ul><ul><li>none - 无图像背景会显示(默认)</li><li>url(‘URL’) - 图像的URL，可多个值</li><li>linear-gradient() - 创建一个线性渐变的 “图像”(从上到下)</li><li>radial-gradient() - 用径向渐变创建 “图像”。 (center to edges)</li><li>repeating-linear-gradient() - 创建重复的线性渐变 “图像”。</li><li>repeating-radial-gradient() - 创建重复的径向渐变 “图像”</li><li>inherit    指定背景图像应该从父元素继承</li></ul><p>多个URL图片CSS设置如下：</p><h2 id="background-repeat-拉伸-or-拉伸"><a href="#background-repeat-拉伸-or-拉伸" class="headerlink" title="background-repeat - 拉伸 or 拉伸"></a><code>background-repeat</code> - 拉伸 or 拉伸</h2><ul><li>repeat (默认)</li><li>repeat    背景图像将向垂直和水平方向重复。这是默认</li><li>repeat-x    只有水平位置会重复背景图像</li><li>repeat-y    只有垂直位置会重复背景图像</li><li>no-repeat    不会重复（<strong>最常用</strong>）</li><li>inherit 继承父元素</li></ul><p>(下图淡黄色是border，我设置透明度为0.5)</p><h2 id="background-size"><a href="#background-size" class="headerlink" title="background-size"></a><code>background-size</code></h2><p><font color="yellowgreen">经常会有设置完<code>bakcground-image</code>，图片不显示的情况，可能就是没有设置<code>background-size</code>导致的，图片默认显示原始大小，从左上角展开，大于div的部分被裁掉。</font></p><ul><li>length - 设置背景图片高度和宽度。第一个值设置<strong>宽度</strong>，第二个值设置的<strong>高度</strong>。如果只给出一个值，第二个是设置为 auto(自动)。</li><li>percentage - 将计算相对于<em>背景定位区域</em>(div)的百分比。第一个值设置<strong>宽度</strong>，第二个值设置的<strong>高度</strong>。如果只给出一个值，第二个是设置为”auto(自动)”。</li><li>cover - 此时<strong>会保持图像的纵横比</strong>并将图像<strong>缩放成将完全覆盖 背景定位区域(div) 的最小大小</strong>。</li><li>contain - 此时<strong>会保持图像的纵横比</strong>并将图像<strong>缩放成将适合背景定位区域的最大大小</strong>。</li></ul><p>不常用：</p><h2 id="background-blend-mode-属性定义了背景层的混合模式（图片与颜色）"><a href="#background-blend-mode-属性定义了背景层的混合模式（图片与颜色）" class="headerlink" title="background-blend-mode 属性定义了背景层的混合模式（图片与颜色）"></a><code>background-blend-mode</code> 属性定义了背景层的混合模式（图片与颜色）</h2><ul><li>normal    默认值。设置正常的混合模式</li><li>multiply    正片叠底模式</li><li>screen    滤色模式</li><li>overlay    叠加模式</li><li>darken    变暗模式</li><li>lighten    变亮模式</li><li>color-dodge    颜色减淡模式</li><li>saturation    饱和度模式</li><li>color    颜色模式</li><li>luminosity    亮度模式</li></ul><h2 id="background-attachment-是否滚动"><a href="#background-attachment-是否滚动" class="headerlink" title="background-attachment 是否滚动"></a><code>background-attachment</code> 是否滚动</h2><p>背景图像是否固定或者随着页面的其余部分滚动</p><ul><li>scroll    背景图片随着页面的滚动而滚动(默认)</li><li>fixed    背景图片不会随着页面的滚动而滚动</li><li>local    背景图片会随着元素内容的滚动而滚动</li><li>initial    设置该属性的默认值</li><li>inherit    指定 background-attachment 的设置应该从父元素继承</li></ul><h2 id="background-clip-指定背景绘制区域"><a href="#background-clip-指定背景绘制区域" class="headerlink" title="background-clip 指定背景绘制区域"></a><code>background-clip</code> 指定背景绘制区域</h2><ul><li>border-box    (默认值)。背景绘制在边框方框内（剪切成边框方框）- <font color="yellowgreen">border内(border+padding+content)</font></li><li>padding-box    背景绘制在衬距方框内（剪切成衬距方框）- <font color="yellowgreen">padding内(padding+content)</font></li><li>content-box    背景绘制在内容方框内（剪切成内容方框）- <font color="yellowgreen">content内(content)</font></li></ul><h2 id="background-color-背景颜色"><a href="#background-color-背景颜色" class="headerlink" title="background-color - 背景颜色"></a><code>background-color</code> - 背景颜色</h2><p>元素的背景是元素的总大小，跟随<code>background-clip</code>选定的区域而定，默认为border+border+content。</p><h2 id="background-position-设置背景图像的起始位置"><a href="#background-position-设置背景图像的起始位置" class="headerlink" title="background-position 设置背景图像的起始位置"></a><code>background-position</code> 设置背景图像的起始位置</h2><p>属性值：(如果只指定一个值，则另一个默认为center)</p><ul><li>left top</li><li>left center</li><li>left bottom</li><li>right top</li><li>right center</li><li>right bottom</li><li>center top</li><li>center center</li><li>center bottom</li><li>x% y% - 第一个值是水平位置，第二个值是垂直。左上角是0％0％。右下角是100％100％。如果仅指定了一个值，其他值将是50％。 。默认值为：0％0％</li><li>xpos ypos - 第一个值是水平位置，第二个值是垂直。左上角是0。单位可以是像素（0px0px）或任何其他 CSS单位。如果仅指定了一个值，其他值将是50％。你可以混合使用％和positions</li><li>inherit    指定background-position属性设置应该从父元素继承</li></ul><h2 id="background-origin-指定background-position的相对于什么的位置"><a href="#background-origin-指定background-position的相对于什么的位置" class="headerlink" title="background-origin 指定background-position的相对于什么的位置"></a><code>background-origin</code> 指定background-position的相对于什么的位置</h2><p>如果<code>background-attachment</code>是固定<code>fixed</code>，这个属性无效。</p><ul><li>border-box    相对于border的background-position位置</li><li>padding-box    相对于padding的background-position位置</li><li>content-box 相对于content的background-position位置</li></ul><p>参考<a href="https://www.runoob.com/cssref/css3-pr-background.html" target="_blank" rel="noopener">菜鸟教程</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;background-image&lt;/code&gt;是一种常见的CSS添加背景图片的方式&lt;br&gt;常用的还有&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;标签&lt;/p&gt;
&lt;p&gt;两种方式都可以，但是&lt;code&gt;background-image&lt;/code&gt;多用于给元素添加&lt;strong&gt;背景&lt;/strong&gt;图片，&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;则用于添加图片，实际应用中，&lt;code&gt;background-image&lt;/code&gt;应用更广泛，通常配合div一起修改css样式。&lt;/p&gt;
&lt;p&gt;但是有时会出现404，问题多半出在引用图片的路径上。如果是本机跑跑项目，绝对路径没有问题，但是项目越大，代码逻辑越复杂，绝对路径就很影响代码的维护与可读性。&lt;br&gt;所以，建议用相对路径。&lt;br&gt;在webpack搭建的vue项目中，图片一般放在&lt;code&gt;src/assets&lt;/code&gt;或&lt;code&gt;src/static&lt;/code&gt;中，项目中常常也有放在第三方图床上动态加载的。&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;assets/static文件夹的区别&lt;/strong&gt;&lt;br&gt;&amp;emsp;相同点：资源在html中使用，都是可以的。&lt;br&gt;&amp;emsp;不同点：使用assets下面的资源，在js中使用的话，路径要经过webpack中file-loader编译，路径不能直接写。&lt;br&gt;&amp;emsp;assets中的文件会经过webpack打包，重新编译，推荐该方式。而static中的文件，不会经过编译。项目在经过打包后，会生成dist文件夹，static中的文件只是复制一遍而已。简单来说，static中建议放一些外部第三方，自己的放到assets，别人的放到static中。&lt;br&gt;注意：如果把图片放在assets与static中，html页面可以使用；但在动态绑定中，assets路径的图片会加载失败，因为webpack使用的是commenJS规范，必须使用require才可以，具体代码如下：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;hook&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;演示钩子的组件&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;直接使用路径&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;../../assets/11.png&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;alt&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;图片加载失败&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;title&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;assets中的图片&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;../../../static/11.png&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;alt&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;图片加载失败&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;title&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;static中的图片&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;br&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;动态绑定路径&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;:src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;assetsURL&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;alt&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;图片加载失败&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;title&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;assets中的图片&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;:src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;staticURL&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;alt&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;图片加载失败&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;title&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;static中的图片&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;data ()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    assetsURL: &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;../../assets/11.png&#39;&lt;/span&gt;), &lt;span class=&quot;comment&quot;&gt;// 此处有require&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    staticURL: &lt;span class=&quot;string&quot;&gt;&#39;../../../static/11.png&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="css" scheme="http://glooo.fun/categories/css/"/>
    
    
      <category term="css" scheme="http://glooo.fun/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>Vue的组件为什么要export default</title>
    <link href="http://glooo.fun/vue/export-default/"/>
    <id>http://glooo.fun/vue/export-default/</id>
    <published>2019-12-11T09:50:25.000Z</published>
    <updated>2019-12-11T09:53:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>Vue 的模块机制</p><p>Vue 是通过 webpack 实现的模块化，因此可以使用 import 来引入模块，例如：</p><p>此外，你还可以在 bulid/webpack.base.conf.js 文件中修改相关配置：</p><p>　意思是，你的模块可以省略 “.js”，”.vue”，“.json” 后缀，weebpack 会在之后自动添加上；可以用 “@” 符号代替 “src” 字符串等。</p><p>　　export 用来导出模块，Vue 的单文件组件通常需要导出一个对象，这个对象是 Vue 实例的选项对象，以便于在其它地方可以使用 import 引入。而 new Vue() 相当于一个构造函数，在入口文件 main.js 构造根组件的同时，如果根组件还包含其它子组件，那么 Vue 会通过引入的选项对象构造其对应的 Vue 实例，最终形成一棵组件树。</p><p>　　export 和export default 的区别在于：export 可以导出多个命名模块，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//demo1.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> str = <span class="string">'hello world'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　对应的引入方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//demo2.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; str, f &#125; <span class="keyword">from</span> <span class="string">'demo1'</span></span><br></pre></td></tr></table></figure><p>export default 只能导出一个默认模块，这个模块可以匿名，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//demo1.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    a: <span class="string">'hello'</span>,</span><br><span class="line">    b: <span class="string">'world'</span>      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　对应的引入方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//demo2.js</span></span><br><span class="line"><span class="keyword">import</span> obj <span class="keyword">from</span> <span class="string">'demo1'</span></span><br></pre></td></tr></table></figure><p>　　引入的时候可以给这个模块取任意名字，例如 “obj”，且不需要用大括号括起来。<br>转载自<a href="https://www.cnblogs.com/win-and-coffee/p/10186649.html" target="_blank" rel="noopener">Vue的组件为什么要export default</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Vue 的模块机制&lt;/p&gt;
&lt;p&gt;Vue 是通过 webpack 实现的模块化，因此可以使用 import 来引入模块，例如：&lt;/p&gt;

&lt;p&gt;此外，你还可以在 bulid/webpack.base.conf.js 文件中修改相关配置：&lt;/p&gt;


&lt;p&gt;　意思是，你的模块
      
    
    </summary>
    
      <category term="vue" scheme="http://glooo.fun/categories/vue/"/>
    
    
      <category term="vue" scheme="http://glooo.fun/tags/vue/"/>
    
      <category term="export" scheme="http://glooo.fun/tags/export/"/>
    
  </entry>
  
  <entry>
    <title>css box-shadow阴影效果生成的阴影区域，遮挡不了哪些页面元素</title>
    <link href="http://glooo.fun/css/css-shadow/"/>
    <id>http://glooo.fun/css/css-shadow/</id>
    <published>2019-12-10T08:04:09.000Z</published>
    <updated>2019-12-10T08:06:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="css-box-shadow阴影效果生成的阴影区域，遮挡不了哪些页面元素"><a href="#css-box-shadow阴影效果生成的阴影区域，遮挡不了哪些页面元素" class="headerlink" title="css box-shadow阴影效果生成的阴影区域，遮挡不了哪些页面元素?"></a>css box-shadow阴影效果生成的阴影区域，遮挡不了哪些页面元素?</h1><p>如果页面中存在绝对定位（position:absolute）或固定定位（position:fixed）的元素时，这些元素与主文档流并不在同一平面（你可以把它们想象成漂浮在空中的），这样的话地面物体的阴影肯定不能遮挡空中物体啦！<br><strong>你可以把含box-shadow属性的元素也弄成绝对定位或固定定位的，并且把z-index属性弄得比其他漂浮元素都大</strong>，这样它的阴影就能遮盖所有其他元素了。<br>一句话概括，就是要把它弄成最高的那一层！</p><p>补充一点：即使是在同一平面（所有元素都在地面，没有漂浮在空中的元素），那么如果含有box-shadow属性的元素后面还有其他元素，那么它的阴影也是没法遮盖后面的元素的。</p><p>追问<br>谢谢回答，我把有阴影元素使用了相对定位（position: relative），发现生成的阴影可以覆盖页面所有元素了，你可以解释一下使用了分别使用了绝对定位、固定定位、相对定位后的元素和未指定定位元素，他们之间的层次顺序是这样的吧。</p><p>来源<a href="https://zhidao.baidu.com/question/1452766081847510940.html" target="_blank" rel="noopener">https://zhidao.baidu.com/question/1452766081847510940.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;css-box-shadow阴影效果生成的阴影区域，遮挡不了哪些页面元素&quot;&gt;&lt;a href=&quot;#css-box-shadow阴影效果生成的阴影区域，遮挡不了哪些页面元素&quot; class=&quot;headerlink&quot; title=&quot;css box-shadow阴影效果生成
      
    
    </summary>
    
      <category term="css" scheme="http://glooo.fun/categories/css/"/>
    
    
      <category term="css" scheme="http://glooo.fun/tags/css/"/>
    
      <category term="box-shadow" scheme="http://glooo.fun/tags/box-shadow/"/>
    
  </entry>
  
  <entry>
    <title>vue使用element-ui的el-input监听不了键盘事件解决</title>
    <link href="http://glooo.fun/elementUI/el-input-keyup/"/>
    <id>http://glooo.fun/elementUI/el-input-keyup/</id>
    <published>2019-12-09T09:10:09.000Z</published>
    <updated>2019-12-09T09:13:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>vue使用element-ui的el-input监听不了键盘事件，原因应该是element-ui自身封装了一层div在input标签外面，把原来的事件隐藏了，所以如下代码运行是无响应的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"name"</span> <span class="attr">placeholder</span>=<span class="string">"账号"</span> @<span class="attr">keyup.enter</span>=<span class="string">"doLogin"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在执行的时候事件是定义在input外面的div上的，所有没有响应。</p><p>解决方法需要在事件后面加上<code>.native</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"name"</span> <span class="attr">placeholder</span>=<span class="string">"账号"</span> @<span class="attr">keyup.enter.native</span>=<span class="string">"doLogin"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br></pre></td></tr></table></figure><p>事件native的官方链接：<a href="https://cn.vuejs.org/v2/guide/components.html#给组件绑定原生事件" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/components.html#给组件绑定原生事件</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;vue使用element-ui的el-input监听不了键盘事件，原因应该是element-ui自身封装了一层div在input标签外面，把原来的事件隐藏了，所以如下代码运行是无响应的：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;
      
    
    </summary>
    
      <category term="elementUI" scheme="http://glooo.fun/categories/elementUI/"/>
    
    
      <category term="elementUI" scheme="http://glooo.fun/tags/elementUI/"/>
    
      <category term="vue" scheme="http://glooo.fun/tags/vue/"/>
    
      <category term="el-input" scheme="http://glooo.fun/tags/el-input/"/>
    
      <category term="keyup" scheme="http://glooo.fun/tags/keyup/"/>
    
  </entry>
  
  <entry>
    <title>JS获取某月的天数</title>
    <link href="http://glooo.fun/js/js-getDate/"/>
    <id>http://glooo.fun/js/js-getDate/</id>
    <published>2019-12-09T03:18:24.000Z</published>
    <updated>2019-12-09T03:32:44.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> year = date.getFullYear(); <span class="comment">// 获取当前的年份</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> month = date.getMonth() + <span class="number">1</span>; <span class="comment">// 获取当前年的总月数(一般为12个月)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> lastDay = <span class="keyword">new</span> <span class="built_in">Date</span>(year,month,<span class="number">0</span>).getDate() <span class="comment">// 获取year年，month月的天数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime() <span class="comment">// 获取当前时间戳，单位为毫秒</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>关于时间戳，敬请参考我的这篇文章<a href="http://glooo.fun/js/timestamp/">http://glooo.fun/js/timestamp/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; date = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; year = date.getFullYear(); &lt;span class=&quot;comment&quot;&gt;// 获取当前的年份&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; month = date.getMonth() + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 获取当前年的总月数(一般为12个月)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; lastDay = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;(year,month,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;).getDate() &lt;span class=&quot;comment&quot;&gt;// 获取year年，month月的天数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; time = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;().getTime() &lt;span class=&quot;comment&quot;&gt;// 获取当前时间戳，单位为毫秒&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="js" scheme="http://glooo.fun/categories/js/"/>
    
    
      <category term="js" scheme="http://glooo.fun/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Network的headers参数意义</title>
    <link href="http://glooo.fun/network-request/f12-network-headers/"/>
    <id>http://glooo.fun/network-request/f12-network-headers/</id>
    <published>2019-12-06T06:54:48.000Z</published>
    <updated>2019-12-23T03:34:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>Google浏览器 =&gt; F12(或右键 =&gt; 检查) =&gt; Network =&gt; XHR =&gt; 点开其中一个请求（无请求可刷新页面）</p><h1 id="General"><a href="#General" class="headerlink" title="General"></a><strong>General</strong></h1><p><code>Request URL</code><br><code>Request Method: HEAD</code><br><code>Status Code: 200</code><br><code>Remote Address: &lt;IP地址&gt;</code><br><code>Referrer Policy: no-referrer-when-downgrade</code></p><h1 id="Response-Headers"><a href="#Response-Headers" class="headerlink" title="Response Headers"></a><strong>Response Headers</strong></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">access-control-allow-credentials: true</span><br><span class="line">access-control-allow-headers: Accept,X-PINGARUNER,CONTENT-TYPE,X-Requested-With</span><br><span class="line">access-control-allow-methods: GET,POST,OPTIONS</span><br><span class="line">access-control-allow-origin: http://www.glooo.fun</span><br><span class="line">cache-control: no-cache, no-store, max-age=0, must-revalidate</span><br><span class="line">content-length: 115</span><br><span class="line">content-type: text/plain;charset=UTF-8</span><br><span class="line">date: Mon, 09 Dec 2019 03:47:34 GMT</span><br><span class="line">eagleeye-traceid: 0b52066415758632546064907eee7f</span><br><span class="line">expires: 0</span><br><span class="line">p3p: CP=IVAa PSAa</span><br><span class="line">pragma: no-cache</span><br><span class="line">server: Tengine/Aserver</span><br><span class="line">set-cookie: umdata_=GA1549CC1C2EF656ABB79E83E30100C9480E708; Max-Age=31536000; Expires=Tue, 08-Dec-2020 03:47:34 GMT; Domain=ynuf.aliapp.org; Path=/</span><br><span class="line">status: 200</span><br><span class="line">strict-transport-security: max-age=31536000 ; includeSubDomains</span><br><span class="line">strict-transport-security: max-age=0</span><br><span class="line">timing-allow-origin: *</span><br><span class="line">ufe-result: A6</span><br><span class="line">x-application-context: umid-web:cn-prod:7001</span><br><span class="line">x-content-type-options: nosniff</span><br><span class="line">x-xss-protection: 1; mode=block</span><br></pre></td></tr></table></figure><h1 id="Request-Headers"><a href="#Request-Headers" class="headerlink" title="Request Headers"></a><strong>Request Headers</strong></h1><h1 id="Form-Data"><a href="#Form-Data" class="headerlink" title="Form Data"></a>Form Data</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Google浏览器 =&amp;gt; F12(或右键 =&amp;gt; 检查) =&amp;gt; Network =&amp;gt; XHR =&amp;gt; 点开其中一个请求（无请求可刷新页面）&lt;/p&gt;
&lt;h1 id=&quot;General&quot;&gt;&lt;a href=&quot;#General&quot; class=&quot;headerl
      
    
    </summary>
    
      <category term="network-request" scheme="http://glooo.fun/categories/network-request/"/>
    
    
      <category term="Network" scheme="http://glooo.fun/tags/Network/"/>
    
      <category term="调试" scheme="http://glooo.fun/tags/%E8%B0%83%E8%AF%95/"/>
    
      <category term="Google" scheme="http://glooo.fun/tags/Google/"/>
    
  </entry>
  
  <entry>
    <title>css中的scoped</title>
    <link href="http://glooo.fun/css/css-scoped/"/>
    <id>http://glooo.fun/css/css-scoped/</id>
    <published>2019-12-05T03:04:00.000Z</published>
    <updated>2019-12-09T03:40:34.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span></span><br><span class="line"> main &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在vue文件中的style标签上，有一个特殊的属性：scoped。当一个style标签拥有scoped属性时，它的CSS样式就只能作用于当前的组件，也就是说，该样式只能适用于当前组件元素。通过该属性，可以使得组件之间的样式不互相污染。如果一个项目中的所有style标签全部加上了scoped，相当于实现了样式的模块化。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
      <category term="css" scheme="http://glooo.fun/categories/css/"/>
    
    
      <category term="css" scheme="http://glooo.fun/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>git stash</title>
    <link href="http://glooo.fun/git/git-stash/"/>
    <id>http://glooo.fun/git/git-stash/</id>
    <published>2019-12-04T07:01:47.000Z</published>
    <updated>2019-12-16T03:52:44.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="git" scheme="http://glooo.fun/categories/git/"/>
    
    
      <category term="git" scheme="http://glooo.fun/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>【Mac】如何查看本机IP地址 &amp;&amp; 把自己的电脑作为本地服务器让同一局域网下电脑访问</title>
    <link href="http://glooo.fun/ip/mac-see-ip/"/>
    <id>http://glooo.fun/ip/mac-see-ip/</id>
    <published>2019-12-02T09:23:20.000Z</published>
    <updated>2019-12-04T03:12:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mac-Os下查看本机IP"><a href="#Mac-Os下查看本机IP" class="headerlink" title="Mac Os下查看本机IP"></a>Mac Os下查看本机IP</h1><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>终端下输入: </p><blockquote><p><code>ifconfig</code></p></blockquote><p>第二个inet后的地址就是你当前电脑的ip地址。</p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>终端下输入:</p><blockquote><p><code>ifconfig | grep &quot;inet&quot;</code></p></blockquote><p>inet后的地址就是你当前电脑的ip地址。</p><p>我的ip地址是：<code>10.231.92.181</code></p><p>可以用两种方法校验一下</p><h1 id="把电脑变成本地服务器"><a href="#把电脑变成本地服务器" class="headerlink" title="把电脑变成本地服务器"></a>把电脑变成本地服务器</h1><p>同局域网内(相同Wi-Fi下)，把自己的电脑作为本地服务器，其他电脑可访问本地服务器项目</p><p>本地服务器运行项目<br>服务器中：</p><blockquote><p><code>http://localhost:8080/login?user=&#39;admin&#39;</code>或<br><code>http://127.0.0.1:8080/login?user=&#39;admin&#39;</code></p></blockquote><p>其他电脑用第一步中获取的本地服务器ip地址（我的是<code>10.231.92.181</code>）替换<code>localhost</code>或<code>127.0.0.1</code><br>例如：</p><blockquote><p><code>http://10.231.92.181:8080/login?user=&#39;admin&#39;</code></p></blockquote><p>这样，就可以在同一局域网下电脑访问其他电脑的本地项目了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Mac-Os下查看本机IP&quot;&gt;&lt;a href=&quot;#Mac-Os下查看本机IP&quot; class=&quot;headerlink&quot; title=&quot;Mac Os下查看本机IP&quot;&gt;&lt;/a&gt;Mac Os下查看本机IP&lt;/h1&gt;&lt;h2 id=&quot;方法一&quot;&gt;&lt;a href=&quot;#方法一&quot; c
      
    
    </summary>
    
      <category term="ip" scheme="http://glooo.fun/categories/ip/"/>
    
    
      <category term="mac" scheme="http://glooo.fun/tags/mac/"/>
    
      <category term="ip" scheme="http://glooo.fun/tags/ip/"/>
    
      <category term="本地服务器" scheme="http://glooo.fun/tags/%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>git submodule 子模块</title>
    <link href="http://glooo.fun/git/git-submodule/"/>
    <id>http://glooo.fun/git/git-submodule/</id>
    <published>2019-12-02T06:41:04.000Z</published>
    <updated>2019-12-04T07:44:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="子模块"><a href="#子模块" class="headerlink" title="子模块"></a>子模块</h1><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><p>首先，<br>两个项目是独立的，<br>如果其中一个项目想要引用另一个项目（子模块）的文件，则可以将子模块添加进项目中来。</p><blockquote><p>（要添加进哪个文件夹，就在哪个文件夹下执行以下命令）<br>  <code>git submodule add &lt;submodule_url&gt; &lt;local_src&gt;</code> </p></blockquote><p><code>submodule_url</code>是子模块的地址<br><code>local_src</code>是本地路径，选填</p><p>添加子项目（子模块）后会出现<code>.gitmodules</code>文件，<br>这是一个配置文件，记录项目的URL和本地子目录之间的映射，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// .gitmodules文件</span><br><span class="line">[submodule `&lt;submodule_name&gt;`]</span><br><span class="line">  path = `&lt;local_directory&gt;`</span><br><span class="line">  url = `&lt;remote_url&gt;`</span><br><span class="line">  branch = `&lt;remote_update_branch_name&gt;` # 可选</span><br></pre></td></tr></table></figure><p>（我把子模块一般放在src文件夹下，子模块名为base）</p><p><code>.gitmodules</code>在git版本控制中，<br>其他参与项目的人通过<code>.gitmodules</code>获得子项目的情况。</p><p>并且在父仓库的git 配置文件中加入了submodule段。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 在.git/config下</span><br><span class="line"># 增加了submodule段</span><br><span class="line">[submodule &quot;sub&quot;]</span><br><span class="line">    url = &lt;submodule_url&gt;</span><br></pre></td></tr></table></figure><p>添加子仓库之后，主仓库的对应目录下(/src），并不是我们要的子模块文件和代码，而是对应的<code>commit id</code>。</p><h3 id="检出"><a href="#检出" class="headerlink" title="检出"></a>检出</h3><p>克隆一个包含子仓库的仓库目录，并不会clone下子仓库的文件，只是会克隆下<code>.gitmodule</code>描述文件，需要进一步克隆子仓库文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git submodule init  # 初始化本地配置文件(.submodule文件)</span><br><span class="line">git submodule update  # 同步远端submodule源码</span><br></pre></td></tr></table></figure><p>或者使用组合指令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule update --init --recursive</span><br></pre></td></tr></table></figure><p>此时子目录在一个未命名分支,此时子仓库有改动并没有检测到。</p><p>在子仓库，切换到master分支，并git pull最新代码之后，回到主仓库目录，会显示子仓库修改，需要在主仓库提交修改，即修改指定的<code>commit id</code>。</p><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><p>如果在本地修改子仓库，在主仓库 <code>git status</code>会显示子仓库有修改。</p><p>需要先在子仓库提交，然后再到主仓库提交代码。</p><h3 id="删除子模块"><a href="#删除子模块" class="headerlink" title="删除子模块"></a>删除子模块</h3><p>删除子仓库</p><ul><li><code>git rm --cached &lt;本地文件夹&gt;</code></li><li>删除.gitmodules里相关部分</li><li>删除.git/config 文件里相关字段</li><li>手动删除子模块残留的目录，清理脏文件</li></ul><blockquote><p>注：<code>.git/config</code>文件夹比较隐蔽，可通过命令行进入，<br>先进入主模块文件夹，执行<code>cd .git</code>，<br>（接着，Mac可通过<code>open .</code>打开文件夹，删除相应字段）<br> <code>vim config</code> 删掉submodule信息<br> <code>cd modules</code><br> <code>rm -rf *</code> 注意一定要慎重！千万别敲错了，或者可以到文件夹手动删除，防止删错误<br> <code>cd ../..</code></p></blockquote><blockquote><p>如果未按照上述步骤删除，可能残留在.git/modudles文件夹内。</p></blockquote><h2 id="clone的项目中包含子模块"><a href="#clone的项目中包含子模块" class="headerlink" title="clone的项目中包含子模块"></a>clone的项目中包含子模块</h2><p>如果你<code>git clone &lt;url&gt;</code>的项目中包含子模块submodule，<br><code>clone</code>和<code>pull</code>主项目的的时候不会同时拉到submodule的代码，<br>需要先本地初始化<code>.gitmodules</code>，<br>即：</p><blockquote><p>git submodule init</p></blockquote><p>再同步远端<code>submodule</code>源码，<br>即</p><blockquote><p>git submodule update</p></blockquote><p>如果希望<code>clone main project</code>的时候拉到所有<code>submodule</code>代码，<br>可以使用下面的命令<br><code>git clone --recurse-submodules &lt;main_project_url&gt;  # 获取主项目和所有子项目源码</code></p><h2 id="操作submodules源码"><a href="#操作submodules源码" class="headerlink" title="操作submodules源码"></a>操作submodules源码</h2><p>命令行进入子模块所在文件夹，<br>可执行Git操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 子模块git操作和一般项目git操作一样</span><br><span class="line"></span><br><span class="line">  git fetch  # 拉取submodule远端源码</span><br><span class="line">  git merge origin/&lt;branch_name&gt;  # 合并submodule远端源码</span><br><span class="line">  git pull  # 获取submodule远端源码合并到当前分支</span><br><span class="line">  git checkout &lt;branch_name&gt;  # 切换submodule的branch</span><br><span class="line">  git commit -m &quot;change_summary&quot;  # 提交submodule的commit</span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 更新submodule源码，默认更新的branch是master，如果要修改branch，在.gitmodule中设置</span><br><span class="line">git submodule update --remote &lt;submodule_name&gt;  </span><br><span class="line"></span><br><span class="line"># 更新所有submodule源码，默认更新.gitmodule中设置的跟踪分支，未设置则跟踪master</span><br><span class="line">git submodule update --remote</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 当submodule commits提交有问题的时候放弃整个push</span><br><span class="line">git push --recurse-submodules=check</span><br><span class="line"></span><br><span class="line"># 分开提交submodule和main project</span><br><span class="line">git push --recurse-submodules=on-demand</span><br></pre></td></tr></table></figure><h2 id="其他技巧"><a href="#其他技巧" class="headerlink" title="其他技巧"></a>其他技巧</h2><h3 id="git-submodule-foreach"><a href="#git-submodule-foreach" class="headerlink" title="git submodule foreach"></a>git submodule foreach</h3><p>用’foreach’关键字同时管理多个submodules，<br>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># stash所有submodules</span><br><span class="line">git submodule foreach &apos;git stash&apos;</span><br><span class="line"></span><br><span class="line"># 所有submodules创建新分支</span><br><span class="line">git submodule foreach &apos;git checkout -b &lt;branch_name&gt;&apos;</span><br></pre></td></tr></table></figure><p>注：<code>git add</code> 只是把文件加到git版本控制里，并不等于就被stash起来了，<code>git add</code>和<code>git stash</code> 没有必然的关系，但是执行<code>git stash</code> 能正确存储的前提是文件必须在git版本控制中才行。</p><h3 id="简写提升效率"><a href="#简写提升效率" class="headerlink" title="简写提升效率"></a>简写提升效率</h3><p>submodules的命令很长，为提升效率，可以创建 <code>alias</code> ，记录在<code>.git/config</code>路径下。如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config alias.spush &apos;push --recurse-submodules=on-demand&apos;</span><br><span class="line">git config alias.supdate &apos;submodule update --remote --merge&apos;</span><br></pre></td></tr></table></figure><p>这样，可以使用下面的命令来提高效率</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git spush</span><br><span class="line">git supdate</span><br></pre></td></tr></table></figure><p>参考<br>Sisyphus235的<a href="https://www.jianshu.com/p/0107698498af" target="_blank" rel="noopener">简书</a><br>工程人在路上的<a href="https://blog.csdn.net/xingqingly/article/details/80698246" target="_blank" rel="noopener">CSDN</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;子模块&quot;&gt;&lt;a href=&quot;#子模块&quot; class=&quot;headerlink&quot; title=&quot;子模块&quot;&gt;&lt;/a&gt;子模块&lt;/h1&gt;&lt;h2 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h2&gt;&lt;h
      
    
    </summary>
    
      <category term="git" scheme="http://glooo.fun/categories/git/"/>
    
    
      <category term="git" scheme="http://glooo.fun/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>JS的includes函数</title>
    <link href="http://glooo.fun/js/includes/"/>
    <id>http://glooo.fun/js/includes/</id>
    <published>2019-11-28T03:55:52.000Z</published>
    <updated>2019-12-04T08:00:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>先来举个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> site = [<span class="string">'runoob'</span>, <span class="string">'google'</span>, <span class="string">'taobao'</span>];</span><br><span class="line"> </span><br><span class="line">site.includes(<span class="string">'runoob'</span>); </span><br><span class="line"><span class="comment">// true </span></span><br><span class="line"> </span><br><span class="line">site.includes(<span class="string">'baidu'</span>); </span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure><p><code>includes()</code> 方法用来判断一个数组是否包含一个指定的值。如果是返回 true，否则false。</p><p><code>includes(searchElement,fromIndex)</code><br><code>searchElement</code>    必须。需要查找的元素值。<br><code>fromIndex</code>    可选。从该索引处开始查找 <code>searchElement</code> 。如果为负值，则按升序从 <code>array.length + fromIndex</code> 的索引开始搜索。默认为 0，如果计算出的索引小于 0，则整个数组都会被搜索。<br>例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">2</span>);     <span class="comment">// true</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">4</span>);     <span class="comment">// false</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">3</span>, <span class="number">3</span>);  <span class="comment">// false</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">3</span>, <span class="number">-1</span>); <span class="comment">// true</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="literal">NaN</span>].includes(<span class="literal">NaN</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;先来举个例子：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br
      
    
    </summary>
    
      <category term="js" scheme="http://glooo.fun/categories/js/"/>
    
    
      <category term="js" scheme="http://glooo.fun/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>window.open()和window.location.href</title>
    <link href="http://glooo.fun/js/open-location-href/"/>
    <id>http://glooo.fun/js/open-location-href/</id>
    <published>2019-11-28T03:47:41.000Z</published>
    <updated>2019-12-02T07:04:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="open"><a href="#open" class="headerlink" title="open()"></a>open()</h1><p><code>open()</code>方法用于打开一个新的浏览器窗口或查找一个已命名的窗口。<br><code>window.open(URL,name,features,replace)</code><br>参数<strong>可选</strong>:</p><ul><li><strong>URL</strong>:<em>可选字符串，声明了要在新窗口中显示的文档的 URL。如果省略了这个参数，或者为空字符串，那么新窗口就不会显示任何文档。</em></li><li><strong>name</strong>:<em>可选字符串，该字符串是一个由逗号分隔的特征列表，其中包括数字、字母和下划线，该字符声明了新窗口的名称。这个名称可以用作标记 <code>&lt;a&gt;</code> 和 <code>&lt;form&gt;</code> 的属性 target 的值。如果该参数指定了一个已经存在的窗口，那么 open() 方法就不再创建一个新窗口，而只是返回对指定窗口的引用。在这种情况下，features 将被忽略。</em></li><li><strong>features</strong>:<em>可选字符串，声明了新窗口要显示的标准浏览器的特征。如果省略该参数，新窗口将具有所有标准特征。在窗口特征这个表格中，我们对该字符串的格式进行了详细的说明。</em></li><li><strong>replace</strong>:<em>一个可选的布尔值。规定了装载到窗口的 URL 是在窗口的浏览历史中创建一个新条目，还是替换浏览历史中的当前条目。支持下面的值：true - URL 替换浏览历史中的当前条目；false - URL 在浏览历史中创建新的条目。</em></li></ul><p><strong><em>注：请不要混淆方法 Window.open() 与方法 Document.open()，这两者的功能完全不同。为了使你的代码清楚明白，请使用 Window.open()，而不要使用 open()。</em></strong></p><p>一次打开多个新窗口只需要</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写两行</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">window</span>.open(<span class="string">"http://www.glooo.fun/"</span>)</span><br><span class="line">  <span class="built_in">window</span>.open(<span class="string">"https://github.com/Glooo/"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行下面代码时，打开一个<code>200px*100px</code>的新窗口，写有<code>This is &#39;myWindow&#39;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">myWindow=<span class="built_in">window</span>.open(<span class="string">''</span>,<span class="string">''</span>,<span class="string">'width=200,height=100'</span>) <span class="comment">// 浏览器全屏模式下不生效</span></span></span><br><span class="line"><span class="javascript">myWindow.document.write(<span class="string">"This is 'myWindow'"</span>)</span></span><br><span class="line"><span class="javascript">myWindow.focus() <span class="comment">// 系统将键盘焦点赋予窗口</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>窗口特征</strong>(Window Features)</p><ol><li>channelmode=yes|no|1|0    是否使用剧院模式显示窗口。默认为 no。</li><li>directories=yes|no|1|0    是否添加目录按钮。默认为 yes。</li><li>fullscreen=yes|no|1|0    是否使用全屏模式显示浏览器。默认是 no。处于全屏模式的窗口必须同时处于剧院模式。</li><li>height=pixels    窗口文档显示区的高度。以像素计。</li><li>left=pixels    窗口的 x 坐标。以像素计。</li><li>location=yes|no|1|0    是否显示地址字段。默认是 yes。</li><li>menubar=yes|no|1|0    是否显示菜单栏。默认是 yes。</li><li>resizable=yes|no|1|0    窗口是否可调节尺寸。默认是 yes。</li><li>scrollbars=yes|no|1|0    是否显示滚动条。默认是 yes。</li><li>status=yes|no|1|0    是否添加状态栏。默认是 yes。</li><li>titlebar=yes|no|1|0    是否显示标题栏。默认是 yes。</li><li>toolbar=yes|no|1|0    是否显示浏览器的工具栏。默认是 yes。</li><li>top=pixels    窗口的 y 坐标。</li><li>width=pixels    窗口的文档显示区的宽度。以像素计。</li></ol><h1 id="window-location-href-“http-glooo-fun-quot"><a href="#window-location-href-“http-glooo-fun-quot" class="headerlink" title="window.location.href = “http://glooo.fun/&quot;"></a>window.location.href = “<a href="http://glooo.fun/&quot;">http://glooo.fun/&quot;</a></h1><ul><li><p><code>self.location.href=&quot;/url&quot;</code> 当前页面打开URL页面</p></li><li><p><code>location.href=&quot;/url&quot;</code> 当前页面打开URL页面</p></li><li><p><code>windows.location.href=&quot;/url&quot;</code> 当前页面打开URL页面，前面三个用法相同。</p></li><li><p><code>this.location.href=&quot;/url&quot;</code> 当前页面打开URL页面</p></li><li><p><code>parent.location.href=&quot;/url&quot;</code> 在父页面打开新页面</p></li><li><p><code>top.location.href=&quot;/url&quot;</code> 在顶层页面打开新页面</p></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><strong>当前页面跳转</strong><br>  <code>window.location.href = &quot;http://glooo.fun/&quot;</code></p><p><strong>新页面跳转</strong><br>  <code>window.open(&#39;http://glooo.fun/&#39;)</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;open&quot;&gt;&lt;a href=&quot;#open&quot; class=&quot;headerlink&quot; title=&quot;open()&quot;&gt;&lt;/a&gt;open()&lt;/h1&gt;&lt;p&gt;&lt;code&gt;open()&lt;/code&gt;方法用于打开一个新的浏览器窗口或查找一个已命名的窗口。&lt;br&gt;&lt;code&gt;wi
      
    
    </summary>
    
      <category term="js" scheme="http://glooo.fun/categories/js/"/>
    
    
      <category term="js" scheme="http://glooo.fun/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>SQL学习(持续更新～)</title>
    <link href="http://glooo.fun/sql/sql/"/>
    <id>http://glooo.fun/sql/sql/</id>
    <published>2019-11-26T09:42:30.000Z</published>
    <updated>2019-12-09T06:48:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SQL基础"><a href="#SQL基础" class="headerlink" title="SQL基础"></a>SQL基础</h1><p>SQL(Structured Query Language)<br>注意：SQL 对大小写不敏感！</p><h2 id="SQL-DML-和-DDL"><a href="#SQL-DML-和-DDL" class="headerlink" title="SQL DML 和 DDL"></a>SQL DML 和 DDL</h2><p>可以把 SQL 分为两个部分：数据操作语言 (DML) 和 数据定义语言 (DDL)。<br>SQL (结构化查询语言)是用于执行查询的语法。但是 SQL 语言也包含用于更新、插入和删除记录的语法。</p><p>查询和更新指令构成了 SQL 的 DML 部分：</p><ul><li><code>select</code> - 从数据库表中获取数据</li><li><code>update</code> - 更新数据库表中的数据</li><li><code>delete</code> - 从数据库表中删除数据</li><li><code>insert into</code> - 向数据库表中插入数据</li></ul><p>SQL 的数据定义语言 (DDL) 部分使我们有能力创建或删除表格。我们也可以定义索引（键），规定表之间的链接，以及施加表间的约束。</p><p><strong>SQL 中最重要的 DDL 语句:</strong></p><ul><li><code>create database</code> - 创建新数据库</li><li><code>alter database</code> - 修改数据库 （注意是<code>alter</code>不是<code>alert</code>）</li><li><code>create table</code> - 创建新表</li><li><code>alter table</code> - 变更（改变）数据库表</li><li><code>drop table</code> - 删除表</li><li><code>create index</code> - 创建索引（搜索键）</li><li><code>drop index</code> - 删除索引</li></ul><h2 id="select"><a href="#select" class="headerlink" title="select"></a>select</h2><p>SELECT 语句用于从表中选取数据，结果被存储在一个结果表中（称为结果集）。<br>语法:<br><code>SELECT [&lt;列名称1&gt;,&lt;列名称2&gt;] FROM &lt;表名称&gt;;</code></p><p>选取所有:<br><code>SELECT * FROM &lt;表名称&gt;;</code></p><p>从table表中选取age字段<br><code>select age from table;</code></p><p>从table表中选取<code>age</code>和<code>name</code>字段<br><code>select age,name from table</code></p><h2 id="distinct-去重"><a href="#distinct-去重" class="headerlink" title="distinct 去重"></a>distinct 去重</h2><p>在表中，可能会包含重复值。<br>关键词 distinct 用于返回结果集中<strong>唯一不同</strong>的值。<br><code>select distinct &lt;列名称&gt; FROM &lt;表名称&gt;</code></p><h2 id="where"><a href="#where" class="headerlink" title="where"></a>where</h2><p>如需有条件地从表中选取数据，可将 where 子句添加到 select 语句。<br><code>SELECT &lt;列名称&gt; FROM &lt;表名称&gt; WHERE &lt;列&gt; &lt;运算符&gt; &lt;值&gt;</code><br>下面的运算符可在 WHERE 子句中使用：</p><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>=</td><td>等于</td></tr><tr><td>&lt;&gt;</td><td>不等于</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr><tr><td>BETWEEN</td><td>在某个范围内</td></tr><tr><td>LIKE</td><td>搜索某种模式</td></tr></tbody></table><p>注意：某些版本的sql中，操作符<code>&lt;&gt;</code>可以写为<code>!=</code></p><h3 id="引号的使用"><a href="#引号的使用" class="headerlink" title="引号的使用"></a>引号的使用</h3><p>请注意，在下面例子中的条件值周围使用的是<strong>单引号</strong>。</p><p>SQL 使用<strong>单引号</strong>来环绕<strong>文本值（大部分数据库系统也接受双引号）</strong>。如果是<strong>数值</strong>，请不要使用引号。</p><ol><li><p>文本值：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 这是正确的：</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Persons <span class="keyword">WHERE</span> FirstName=<span class="string">'Bush'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 这是错误的：</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Persons <span class="keyword">WHERE</span> FirstName=Bush</span><br></pre></td></tr></table></figure></li><li><p>数值：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 这是正确的：</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Persons <span class="keyword">WHERE</span> <span class="keyword">Year</span>&gt;<span class="number">1965</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 这是错误的：</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Persons <span class="keyword">WHERE</span> <span class="keyword">Year</span>&gt;<span class="string">'1965'</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="and-amp-or"><a href="#and-amp-or" class="headerlink" title="and &amp; or"></a>and &amp; or</h2><p>and 和 or 可在 where 子语句中把两个或多个条件结合起来。</p><p>实例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- AND</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Persons <span class="keyword">WHERE</span> FirstName=<span class="string">'Thomas'</span> <span class="keyword">AND</span> LastName=<span class="string">'Carter'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- OR</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Persons <span class="keyword">WHERE</span> firstname=<span class="string">'Thomas'</span> <span class="keyword">OR</span> lastname=<span class="string">'Carter'</span></span><br></pre></td></tr></table></figure><h3 id="结合-AND-和-OR-运算符"><a href="#结合-AND-和-OR-运算符" class="headerlink" title="结合 AND 和 OR 运算符"></a>结合 AND 和 OR 运算符</h3><p>我们也可以把 and 和 or 结合起来，使用圆括号来组成复杂的表达式:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Persons <span class="keyword">WHERE</span> (FirstName=<span class="string">'Thomas'</span> <span class="keyword">OR</span> FirstName=<span class="string">'William'</span>)</span><br><span class="line"><span class="keyword">AND</span> LastName=<span class="string">'Carter'</span></span><br></pre></td></tr></table></figure><h2 id="order-by"><a href="#order-by" class="headerlink" title="order by"></a>order by</h2><p>ORDER BY 语句用于对结果集进行排序。</p><p>ORDER BY 语句用于根据指定的列对结果集进行排序。</p><p>ORDER BY 语句默认按照<strong>升序</strong>对记录进行排序。</p><p>实例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 以Company字母顺序排序</span></span><br><span class="line"><span class="keyword">SELECT</span> Company, OrderNumber <span class="keyword">FROM</span> Orders <span class="keyword">ORDER</span> <span class="keyword">BY</span> Company</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 以字母顺序显示公司名称（Company），公司名相同时，按OrderNumber的大小排序</span></span><br><span class="line"><span class="keyword">SELECT</span> Company, OrderNumber <span class="keyword">FROM</span> Orders <span class="keyword">ORDER</span> <span class="keyword">BY</span> Company, OrderNumber</span><br></pre></td></tr></table></figure><h3 id="DESC"><a href="#DESC" class="headerlink" title="DESC"></a>DESC</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 以逆字母顺序显示公司名称：</span></span><br><span class="line"><span class="keyword">SELECT</span> Company, OrderNumber <span class="keyword">FROM</span> Orders <span class="keyword">ORDER</span> <span class="keyword">BY</span> Company <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure><h3 id="ASC"><a href="#ASC" class="headerlink" title="ASC"></a>ASC</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 以逆字母顺序显示公司名称，公司名相同的时候，按OrderNumber排序</span></span><br><span class="line"><span class="keyword">SELECT</span> Company, OrderNumber <span class="keyword">FROM</span> Orders <span class="keyword">ORDER</span> <span class="keyword">BY</span> Company <span class="keyword">DESC</span>, OrderNumber <span class="keyword">ASC</span></span><br></pre></td></tr></table></figure><h2 id="insert-into"><a href="#insert-into" class="headerlink" title="insert into"></a>insert into</h2><p>INSERT INTO 语句用于向表格中插入新的行。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> &lt;表名称&gt; <span class="keyword">VALUES</span> (&lt;值<span class="number">1</span>&gt;,&lt;值<span class="number">2</span>&gt;,...)</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Persons <span class="keyword">VALUES</span> (<span class="string">'Gates'</span>, <span class="string">'Bill'</span>, <span class="string">'Xuanwumen 10'</span>, <span class="string">'Beijing'</span>)</span><br></pre></td></tr></table></figure><p>我们也可以指定所要插入数据的列：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> &lt;标名称&gt; (&lt;列<span class="number">1</span>&gt;,&lt;列<span class="number">2</span>&gt;,...) <span class="keyword">VALUES</span> (&lt;值<span class="number">1</span>&gt;,&lt;值<span class="number">2</span>&gt;,...)</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Persons (LastName, Address) <span class="keyword">VALUES</span> (<span class="string">'Wilson'</span>, <span class="string">'Champs-Elysees'</span>)</span><br></pre></td></tr></table></figure><h2 id="update"><a href="#update" class="headerlink" title="update"></a>update</h2><p>Update 语句用于修改表中的数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> &lt;表名称&gt; <span class="keyword">SET</span> &lt;列名称&gt; = &lt;新值&gt; <span class="keyword">WHERE</span> &lt;列名称&gt; = &lt;某值&gt;</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 更新某一行的某一列</span></span><br><span class="line"><span class="keyword">UPDATE</span> Person <span class="keyword">SET</span> FirstName = <span class="string">'Fred'</span> <span class="keyword">WHERE</span> LastName = <span class="string">'Wilson'</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 更新一行中的若干列</span></span><br><span class="line"><span class="keyword">UPDATE</span> Person <span class="keyword">SET</span> Address = <span class="string">'Zhongshan 23'</span>, City = <span class="string">'Nanjing'</span></span><br><span class="line"><span class="keyword">WHERE</span> LastName = <span class="string">'Wilson'</span></span><br></pre></td></tr></table></figure><h2 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h2><p>DELETE 语句用于删除表中的行。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> &lt;表名称&gt; <span class="keyword">WHERE</span> &lt;列名称&gt; = &lt;值&gt;</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除某行</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> Person <span class="keyword">WHERE</span> LastName = <span class="string">'Wilson'</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除所有行</span></span><br><span class="line"><span class="comment">-- 可以在不删除表的情况下删除所有的行。这意味着表的结构、属性和索引都是完整的：</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="comment">-- 或者：</span></span><br><span class="line"><span class="keyword">DELETE</span> * <span class="keyword">FROM</span> table_name</span><br></pre></td></tr></table></figure><!-- # 高级进阶 --><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><p>参考<a href="https://www.cnblogs.com/bchjazh/p/5997728.html" target="_blank" rel="noopener">mysql sql语句大全</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SQL基础&quot;&gt;&lt;a href=&quot;#SQL基础&quot; class=&quot;headerlink&quot; title=&quot;SQL基础&quot;&gt;&lt;/a&gt;SQL基础&lt;/h1&gt;&lt;p&gt;SQL(Structured Query Language)&lt;br&gt;注意：SQL 对大小写不敏感！&lt;/p&gt;
&lt;h2 
      
    
    </summary>
    
      <category term="sql" scheme="http://glooo.fun/categories/sql/"/>
    
    
      <category term="sql" scheme="http://glooo.fun/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>require和import的区别</title>
    <link href="http://glooo.fun/webpack/require-import/"/>
    <id>http://glooo.fun/webpack/require-import/</id>
    <published>2019-11-22T14:03:49.000Z</published>
    <updated>2019-11-22T14:08:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>node编程中最重要的思想就是模块化，import和require都是被模块化所使用。</p><p>遵循规范<br>–require 是 AMD规范引入方式<br>–import是es6的一个语法标准，如果要兼容浏览器的话必须转化成es5的语法</p><p>调用时间<br>–require是运行时调用，所以require理论上可以运用在代码的任何地方<br>–import是编译时调用，所以必须放在文件开头</p><p>本质<br>–require是赋值过程，其实require的结果就是对象、数字、字符串、函数等，再把require的结果赋值给某个变量<br>–import是解构过程，但是目前所有的引擎都还没有实现import，我们在node中使用babel支持ES6，也仅仅是将ES6转码为ES5再执行，import语法会被转码为require</p><p>require时代的模块<br>node编程中最重要的思想之一就是模块，而正是这个思想，让JavaScript的大规模工程成为可能。模块化编程在js界流行，也是基于此，随后在浏览器端，requirejs和seajs之类的工具包也出现了，可以说在对应规范下，require统治了ES6之前的所有模块化编程，即使现在，在ES6 module被完全实现之前，还是这样。</p><p>node的module遵循CommonJS规范，requirejs遵循AMD，seajs遵循CMD，虽各有不同，但总之还是希望保持较为统一的代码风格。</p><p>参考自<a href="https://blog.csdn.net/weixin_42966484/article/details/82889608" target="_blank" rel="noopener">归小超https://blog.csdn.net/weixin_42966484/article/details/82889608</a>的CSDN</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;node编程中最重要的思想就是模块化，import和require都是被模块化所使用。&lt;/p&gt;
&lt;p&gt;遵循规范&lt;br&gt;–require 是 AMD规范引入方式&lt;br&gt;–import是es6的一个语法标准，如果要兼容浏览器的话必须转化成es5的语法&lt;/p&gt;
&lt;p&gt;调用时间&lt;b
      
    
    </summary>
    
      <category term="webpack" scheme="http://glooo.fun/categories/webpack/"/>
    
    
      <category term="vue" scheme="http://glooo.fun/tags/vue/"/>
    
      <category term="webpack" scheme="http://glooo.fun/tags/webpack/"/>
    
      <category term="nodejs" scheme="http://glooo.fun/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>HLS - 基于Http的视频流协议</title>
    <link href="http://glooo.fun/hls/hls/"/>
    <id>http://glooo.fun/hls/hls/</id>
    <published>2019-11-22T07:02:13.000Z</published>
    <updated>2019-11-22T07:15:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>HLS（HTTP Live Streaming全称）是一个基于HTTP的视频流协议，由Apple公司实现，Mac OS上的QuickTime、Safari 以及iOS上的 Safari都能很好的支持 HLS，高版本 Android 也增加了对 HLS 的支持。</p><p>一些常见的客户端如：MPlayerX、VLC 也都支持HLS协议，如果需要在chrome上播放，需要使用 <a href="https://github.com/videojs/videojs-contrib-hls" target="_blank" rel="noopener">videojs-contrib-hls.js</a> 解析。</p><p>Server服务器<br>HLS的服务器组件负责获取的媒体输入流 , 然后Media编码后 MPEG-4（H.264 video 和 AAC audio）格式然后用硬件打包到 MPEG-2 (MPEG-2 transport stream)的传输流中。图中显示,传输流会经过stream segmenter, 这里的工作是MPEG-2传输流会被分散为小片段然后保存为一个或多个系列的 .ts 格式的媒体文件。这个过程需要借助编码工具来完成，比如 Apple stream segmenter。<br>(视频类是.ts文件,纯音频会被编码为一些音频小片段，通常为 ADTS头的AAC、MP3、或者 AC-3格式。)<br>服务端可以采用硬件编码和软件编码两种形式，其功能都是按照上文描述的规则对现有的媒体文件进行切片并使用索引文件进行管理。而软件切片通常会使用 Apple 公司提供的工具或者第三方的集成工具。</p><p>Distribution分配组件<br>同时上面提到的那个切片器（segmenter）也会创建一个索引文件，通常会包含这些媒体文件的一个列表，也能包含元数据。它一般都是一个个.M38U的列表。列表元素会关联一个 URL 用于客户端访问。然后按序去请求这些 URL。</p><p>主索引文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#EXTM3U</span><br><span class="line">#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=409037,RESOLUTION=416x234,CODECS=&quot;mp4a.40.2, avc1.42001e&quot;</span><br><span class="line">Gear1/prog_index.m3u8</span><br></pre></td></tr></table></figure><p>复制代码第一行：#EXTM3U<br>每个M3U文件第一行必须是这个tag，起标示作用<br>第二行：#EXT-X-STREAM-INF<br>标签的属性列表中直接指明当前流是VIDEO还是AUDIO</p><p>包含属性 :</p><ul><li>BANDWIDTH 指定码率</li><li>PROGRAM-ID 唯一ID (这个属性在后面的协议版本废除了)</li><li>CODECS 指定流的编码类型</li><li>RESOLUTION：分辨率</li></ul><p>子索引文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#EXTM3U</span><br><span class="line">#EXT-X-TARGETDURATION:11</span><br><span class="line">#EXT-X-VERSION:3</span><br><span class="line">#EXT-X-MEDIA-SEQUENCE:0</span><br><span class="line">#EXT-X-PLAYLIST-TYPE:VOD</span><br><span class="line">#EXTINF:10.133333,</span><br><span class="line">fileSequence0.ts</span><br><span class="line">#EXTINF:10.000666,</span><br><span class="line">fileSequence1.ts</span><br><span class="line">#EXTINF:10.667334,</span><br><span class="line">fileSequence2.ts</span><br><span class="line">#EXTINF:9.686001,</span><br><span class="line">fileSequence3.ts</span><br><span class="line">#EXTINF:9.768665,</span><br><span class="line">fileSequence4.ts</span><br><span class="line">#EXTINF:10.000000,</span><br><span class="line">fileSequence5.ts</span><br><span class="line">#EXT-X-ENDLIST</span><br></pre></td></tr></table></figure><p>#EXTM3U m3u文件头，必须放在第一行。</p><p>#EXT-X-TARGETDURATION 每个分片TS的最大的时长。</p><p>#EXT-X-VERSION 用以标示协议版本。</p><p>#EXT-X-MEDIA-SEQUENCE TS分片的序列号。</p><p>#EXT-X-PLAYLIST-TYPE 提供关于PlayList的可变性的信息， 这个对整个PlayList文件有效，是可选的。</p><p>#EXTINF extra info，分片TS的信息，如时长，带宽等。<br>主索引文件与子索引文件的区别</p><p>主索引文件和子索引文件都是.M3U8的playlist<br>主索引文件只需下载一次，但对于直播节目子索引文件定期重新加载</p><p>client客户端<br>分配组件由标准的网络服务器。他们负责接受Client客户端请求并提供相关联的资源给客户端。<br>videojs-contrib-hls.js组件解析过程</p><p>HLS简单讲就是把整个流分成一个个小的片段，基于 HTTP 的文件来下载，每次只下载一小部分。<br>前面提到了用于 H5 播放直播视频时引入的一个 .m3u8 的文件，这个文件就是基于 HLS 协议，存放视频流元数据的文件。<br>每一个 .m3u8 文件，分别对应若干个 ts 文件，这些 ts 文件才是真正存放视频的数据，m3u8 文件只是存放了一些 ts 文件的配置信息和相关路径，当视频播放时，.m3u8 是动态改变的，再通过解析器（videojs-contrib-hls.js）解析这个文件，并找到对应的 ts 文件来播放，所以一般为了加快速度，.m3u8 放在 web 服务器上，ts 文件放在 cdn 上。</p><p>摘自<a href="https://juejin.im/post/5ab851b6f265da23826df601" target="_blank" rel="noopener">富途web开发团队https://juejin.im/post/5ab851b6f265da23826df601</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;HLS（HTTP Live Streaming全称）是一个基于HTTP的视频流协议，由Apple公司实现，Mac OS上的QuickTime、Safari 以及iOS上的 Safari都能很好的支持 HLS，高版本 Android 也增加了对 HLS 的支持。&lt;/p&gt;
&lt;p
      
    
    </summary>
    
      <category term="hls" scheme="http://glooo.fun/categories/hls/"/>
    
    
      <category term="基于Http的视频流协议" scheme="http://glooo.fun/tags/%E5%9F%BA%E4%BA%8EHttp%E7%9A%84%E8%A7%86%E9%A2%91%E6%B5%81%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>vue调用摄像头显示</title>
    <link href="http://glooo.fun/uncategorized/capture-pic/"/>
    <id>http://glooo.fun/uncategorized/capture-pic/</id>
    <published>2019-11-22T03:52:05.000Z</published>
    <updated>2019-11-22T06:48:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>在<code>src/app.vue</code>中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">video</span> <span class="attr">ref</span>=<span class="string">"video"</span> <span class="attr">id</span>=<span class="string">"video"</span> <span class="attr">width</span>=<span class="string">"160"</span> <span class="attr">height</span>=<span class="string">"12"</span> <span class="attr">autoplay</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;div&gt;&lt;video ref="video" id="video" width="640" height="480" autoplay&gt;&lt;/video&gt;&lt;/div&gt; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"snap"</span> <span class="attr">v-on:click</span>=<span class="string">"capture()"</span>&gt;</span>Snap Photo<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">ref</span>=<span class="string">"canvas"</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">width</span>=<span class="string">"640"</span> <span class="attr">height</span>=<span class="string">"480"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"c in captures"</span> <span class="attr">:key</span>=<span class="string">"c"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">"c"</span> <span class="attr">height</span>=<span class="string">"50"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">      name: <span class="string">'app'</span>,</span></span><br><span class="line">      data() &#123;</span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line">            video: &#123;&#125;,</span><br><span class="line">            canvas: &#123;&#125;,</span><br><span class="line">            captures: []</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      mounted() &#123; </span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.video = <span class="keyword">this</span>.$refs.video;</span></span><br><span class="line">        if(navigator.mediaDevices &amp;&amp; navigator.mediaDevices.getUserMedia) &#123;</span><br><span class="line"><span class="javascript">            navigator.mediaDevices.getUserMedia(&#123; <span class="attr">video</span>: <span class="literal">true</span> &#125;).then(<span class="function"><span class="params">stream</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.video.srcObject = stream</span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.video.play();</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123; </span><br><span class="line">        capture() &#123;</span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.canvas = <span class="keyword">this</span>.$refs.canvas;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> context = <span class="keyword">this</span>.canvas.getContext(<span class="string">"2d"</span>).drawImage(<span class="keyword">this</span>.video, <span class="number">0</span>, <span class="number">0</span>, <span class="number">640</span>, <span class="number">480</span>);</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.captures.push(canvas.toDataURL(<span class="string">"image/png"</span>));</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  body&#123;</span><br><span class="line"><span class="css">      <span class="selector-tag">background-color</span>: <span class="selector-id">#F0F0F0</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-id">#app</span> &#123;</span></span><br><span class="line">      text-align: center;</span><br><span class="line"><span class="css">      <span class="selector-tag">color</span>: <span class="selector-id">#2c3e50</span>;</span></span><br><span class="line">      margin-top: 60px;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-id">#video</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background-color</span>: <span class="selector-id">#000000</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-id">#canvas</span> &#123;</span></span><br><span class="line">      display: none;</span><br><span class="line">  &#125;</span><br><span class="line">  li &#123;</span><br><span class="line">      display: inline;</span><br><span class="line">      padding: 5px;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/GeniusLyzh/p/10589938.html" target="_blank" rel="noopener">原文链接:https://www.cnblogs.com/GeniusLyzh/p/10589938.html</a></p><p><strong>注：</strong>原文<code>this.video.src = window.URL.createObjectURL(stream);</code>会报错，<br>错误：<code>Failed to execute &#39;createObjectURL&#39; on &#39;URL&#39;</code><br>原因：Chrome升级后，新版本的Chrome不再支持该用法。其他主流浏览器也是如此。<br>改成<code>this.video.srcObject = stream</code>就好了。<br>一个兼容的写法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.srcObject = stream;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="keyword">this</span>.src = <span class="built_in">window</span>.URL.createObjectURL(stream);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在&lt;code&gt;src/app.vue&lt;/code&gt;中&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span cla
      
    
    </summary>
    
    
      <category term="vue" scheme="http://glooo.fun/tags/vue/"/>
    
  </entry>
  
</feed>
